// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "github.com/sdkvictor/golang-compiler/ast"
    "github.com/sdkvictor/golang-compiler/directories"
    "github.com/sdkvictor/golang-compiler/gocc/token")

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Programa	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Programa : program id semicolon leftbracket VarsOp rightbracket Functions	<< ast.NewProgram(X[1], X[4], X[6]) >>`,
		Id:         "Programa",
		NTType:     1,
		Index:      1,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewProgram(X[1], X[4], X[6])
		},
	},
	ProdTabEntry{
		String: `VarsOp : Vars	<< (X[0]), nil >>`,
		Id:         "VarsOp",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return (X[0]), nil
		},
	},
	ProdTabEntry{
		String: `VarsOp : empty	<< make([]*directories.VarEntry, 0), nil >>`,
		Id:         "VarsOp",
		NTType:     2,
		Index:      3,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return make([]*directories.VarEntry, 0), nil
		},
	},
	ProdTabEntry{
		String: `Vars : Type Ids semicolon Vars	<< ast.AppendVarsList(X[0], X[1], X[3]) >>`,
		Id:         "Vars",
		NTType:     3,
		Index:      4,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendVarsList(X[0], X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Vars : Type Ids semicolon	<< ast.NewVarsList(X[0], X[1]) >>`,
		Id:         "Vars",
		NTType:     3,
		Index:      5,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVarsList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `VarsDec : Vars	<< ast.NewVarsDec(X[0]) >>`,
		Id:         "VarsDec",
		NTType:     4,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVarsDec(X[0])
		},
	},
	ProdTabEntry{
		String: `Ids : id comma Ids	<< ast.AppendIdList(X[0], X[2]) >>`,
		Id:         "Ids",
		NTType:     5,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendIdList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Ids : id	<< ast.NewIdList(X[0]) >>`,
		Id:         "Ids",
		NTType:     5,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIdList(X[0])
		},
	},
	ProdTabEntry{
		String: `Params : ParamsAux	<< (X[0]), nil >>`,
		Id:         "Params",
		NTType:     6,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return (X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Params : empty	<< make([]*directories.VarEntry, 0), nil >>`,
		Id:         "Params",
		NTType:     6,
		Index:      10,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return make([]*directories.VarEntry, 0), nil
		},
	},
	ProdTabEntry{
		String: `ParamsAux : Type id comma ParamsAux	<< ast.AppendParamsList(X[0], X[1], X[3]) >>`,
		Id:         "ParamsAux",
		NTType:     7,
		Index:      11,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendParamsList(X[0], X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `ParamsAux : Type id	<< ast.NewParamsList(X[0], X[1]) >>`,
		Id:         "ParamsAux",
		NTType:     7,
		Index:      12,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewParamsList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Functions : FunctionsAux id leftparenthesis Params rightparenthesis Block Functions	<< ast.AppendFunction(X[0], X[1], X[3], X[5], X[6]) >>`,
		Id:         "Functions",
		NTType:     8,
		Index:      13,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendFunction(X[0], X[1], X[3], X[5], X[6])
		},
	},
	ProdTabEntry{
		String: `Functions : FunctionsAux id leftparenthesis Params rightparenthesis Block	<< ast.FirstFunction(X[0], X[1], X[3], X[5]) >>`,
		Id:         "Functions",
		NTType:     8,
		Index:      14,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.FirstFunction(X[0], X[1], X[3], X[5])
		},
	},
	ProdTabEntry{
		String: `FunctionsAux : Type	<< X[0], nil >>`,
		Id:         "FunctionsAux",
		NTType:     9,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FunctionsAux : voidtype	<< ast.NewType(X[0]) >>`,
		Id:         "FunctionsAux",
		NTType:     9,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `Block : leftbracket BlockAux rightbracket	<< (X[1]), nil >>`,
		Id:         "Block",
		NTType:     10,
		Index:      17,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return (X[1]), nil
		},
	},
	ProdTabEntry{
		String: `Block : leftbracket rightbracket	<< make([]ast.Statement, 0), nil >>`,
		Id:         "Block",
		NTType:     10,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return make([]ast.Statement, 0), nil
		},
	},
	ProdTabEntry{
		String: `BlockAux : Statement	<< ast.NewStatementList(X[0]) >>`,
		Id:         "BlockAux",
		NTType:     11,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatementList(X[0])
		},
	},
	ProdTabEntry{
		String: `BlockAux : Statement BlockAux	<< ast.AppendStatementList(X[0], X[1]) >>`,
		Id:         "BlockAux",
		NTType:     11,
		Index:      20,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendStatementList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Statement : VarsDec	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : Return	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : For	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : While	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : Write	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : CallFunction semicolon	<< ast.NewStatement(X[0]) >>`,
		Id:         "Statement",
		NTType:     12,
		Index:      28,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStatement(X[0])
		},
	},
	ProdTabEntry{
		String: `BasicType : inttype	<< ast.NewType(X[0]) >>`,
		Id:         "BasicType",
		NTType:     13,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `BasicType : floattype	<< ast.NewType(X[0]) >>`,
		Id:         "BasicType",
		NTType:     13,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `BasicType : booltype	<< ast.NewType(X[0]) >>`,
		Id:         "BasicType",
		NTType:     13,
		Index:      31,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `BasicType : stringtype	<< ast.NewType(X[0]) >>`,
		Id:         "BasicType",
		NTType:     13,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `BasicType : chartype	<< ast.NewType(X[0]) >>`,
		Id:         "BasicType",
		NTType:     13,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `BasicType : Object	<< ast.NewType(X[0]) >>`,
		Id:         "BasicType",
		NTType:     13,
		Index:      34,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `Object : squaretype	<< ast.NewType(X[0]) >>`,
		Id:         "Object",
		NTType:     14,
		Index:      35,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `Object : circletype	<< ast.NewType(X[0]) >>`,
		Id:         "Object",
		NTType:     14,
		Index:      36,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `Object : imagetype	<< ast.NewType(X[0]) >>`,
		Id:         "Object",
		NTType:     14,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `Object : texttype	<< ast.NewType(X[0]) >>`,
		Id:         "Object",
		NTType:     14,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `Object : backgroundtype	<< ast.NewType(X[0]) >>`,
		Id:         "Object",
		NTType:     14,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewType(X[0])
		},
	},
	ProdTabEntry{
		String: `Expression : Exp	<< ast.NewExpression(X[0]) >>`,
		Id:         "Expression",
		NTType:     15,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewExpression(X[0])
		},
	},
	ProdTabEntry{
		String: `Expression : Exp Operations Expression	<< ast.AppendExpression(X[0], X[1], X[2]) >>`,
		Id:         "Expression",
		NTType:     15,
		Index:      41,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendExpression(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Operations : relop	<<  >>`,
		Id:         "Operations",
		NTType:     16,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operations : logicalop	<<  >>`,
		Id:         "Operations",
		NTType:     16,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp : Term	<< ast.NewExp(X[0]) >>`,
		Id:         "Exp",
		NTType:     17,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewExp(X[0])
		},
	},
	ProdTabEntry{
		String: `Exp : Term plus Exp	<< ast.AppendExp(X[0],X[1],X[2]) >>`,
		Id:         "Exp",
		NTType:     17,
		Index:      45,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendExp(X[0],X[1],X[2])
		},
	},
	ProdTabEntry{
		String: `Exp : Term minus Exp	<< ast.AppendExp(X[0],X[1],X[2]) >>`,
		Id:         "Exp",
		NTType:     17,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendExp(X[0],X[1],X[2])
		},
	},
	ProdTabEntry{
		String: `Term : Factor	<< ast.NewTerm(X[0]) >>`,
		Id:         "Term",
		NTType:     18,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTerm(X[0])
		},
	},
	ProdTabEntry{
		String: `Term : Factor mult Term	<< ast.AppendTerm(X[0],X[1],X[2]) >>`,
		Id:         "Term",
		NTType:     18,
		Index:      48,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendTerm(X[0],X[1],X[2])
		},
	},
	ProdTabEntry{
		String: `Term : Factor div Term	<< ast.AppendTerm(X[0],X[1],X[2]) >>`,
		Id:         "Term",
		NTType:     18,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendTerm(X[0],X[1],X[2])
		},
	},
	ProdTabEntry{
		String: `Factor : leftparenthesis Expression rightparenthesis	<< ast.NewFactor(X[1]) >>`,
		Id:         "Factor",
		NTType:     19,
		Index:      50,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFactor(X[1])
		},
	},
	ProdTabEntry{
		String: `Factor : Varcte	<< ast.NewVCFactor(X[0]) >>`,
		Id:         "Factor",
		NTType:     19,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVCFactor(X[0])
		},
	},
	ProdTabEntry{
		String: `Assign : id equals Expression semicolon	<< ast.NewAssignWithoutAttr(X[0], X[2]) >>`,
		Id:         "Assign",
		NTType:     20,
		Index:      52,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAssignWithoutAttr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Assign : Attribute equals Expression semicolon	<< ast.NewAssignWithAttr(X[0], X[2]) >>`,
		Id:         "Assign",
		NTType:     20,
		Index:      53,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAssignWithAttr(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Write : print leftparenthesis Expression rightparenthesis semicolon	<< ast.NewWrite(X[0], X[2]) >>`,
		Id:         "Write",
		NTType:     21,
		Index:      54,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewWrite(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Condition : if leftparenthesis Expression rightparenthesis Block	<< ast.NewConditionNoElseStmts(X[0], X[2], X[4]) >>`,
		Id:         "Condition",
		NTType:     22,
		Index:      55,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConditionNoElseStmts(X[0], X[2], X[4])
		},
	},
	ProdTabEntry{
		String: `Condition : if leftparenthesis Expression rightparenthesis Block else Block	<< ast.NewCondition(X[0], X[2], X[4], X[6] ) >>`,
		Id:         "Condition",
		NTType:     22,
		Index:      56,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCondition(X[0], X[2], X[4], X[6] )
		},
	},
	ProdTabEntry{
		String: `Return : return Expression semicolon	<< ast.NewReturn(X[0], X[1]) >>`,
		Id:         "Return",
		NTType:     23,
		Index:      57,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewReturn(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block	<< ast.NewFor(X[0], X[2], X[3], X[5], X[7]) >>`,
		Id:         "For",
		NTType:     24,
		Index:      58,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFor(X[0], X[2], X[3], X[5], X[7])
		},
	},
	ProdTabEntry{
		String: `While : while leftparenthesis Expression rightparenthesis Block	<< ast.NewWhile(X[0], X[2], X[4]) >>`,
		Id:         "While",
		NTType:     25,
		Index:      59,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewWhile(X[0], X[2], X[4])
		},
	},
	ProdTabEntry{
		String: `CallFunction : id leftparenthesis CallFunctionAux rightparenthesis	<< ast.NewFunctionCall(X[0], X[2]) >>`,
		Id:         "CallFunction",
		NTType:     26,
		Index:      60,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFunctionCall(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `CallFunction : id leftparenthesis rightparenthesis	<< ast.NewFunctionCallId(X[0]) >>`,
		Id:         "CallFunction",
		NTType:     26,
		Index:      61,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFunctionCallId(X[0])
		},
	},
	ProdTabEntry{
		String: `CallFunctionAux : Expression	<< ast.NewArgumentExpression(X[0]) >>`,
		Id:         "CallFunctionAux",
		NTType:     27,
		Index:      62,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewArgumentExpression(X[0])
		},
	},
	ProdTabEntry{
		String: `CallFunctionAux : Expression comma CallFunctionAux	<< ast.AppendArgumentExpression(X[0], X[2]) >>`,
		Id:         "CallFunctionAux",
		NTType:     27,
		Index:      63,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendArgumentExpression(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Varcte : id	<< ast.NewAttribute(X[0], &token.Token{Lit: []byte("")}) >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttribute(X[0], &token.Token{Lit: []byte("")})
		},
	},
	ProdTabEntry{
		String: `Varcte : cteint	<< ast.NewConstantInt(X[0]) >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      65,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantInt(X[0])
		},
	},
	ProdTabEntry{
		String: `Varcte : ctefloat	<< ast.NewConstantFloat(X[0]) >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantFloat(X[0])
		},
	},
	ProdTabEntry{
		String: `Varcte : ctestring	<< ast.NewConstantString(X[0]) >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantString(X[0])
		},
	},
	ProdTabEntry{
		String: `Varcte : ctechar	<< ast.NewConstantChar(X[0]) >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantChar(X[0])
		},
	},
	ProdTabEntry{
		String: `Varcte : ctebool	<< ast.NewConstantBool(X[0]) >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      69,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantBool(X[0])
		},
	},
	ProdTabEntry{
		String: `Varcte : ListElem	<< X[0], nil >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      70,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Varcte : Attribute	<< X[0], nil >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      71,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Varcte : CallFunction	<< X[0], nil >>`,
		Id:         "Varcte",
		NTType:     28,
		Index:      72,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ListElem : id leftsqrbracket Expression rightsqrbracket	<< ast.NewListElem(X[0], X[2]) >>`,
		Id:         "ListElem",
		NTType:     29,
		Index:      73,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewListElem(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Type : BasicType	<< (X[0]), nil >>`,
		Id:         "Type",
		NTType:     30,
		Index:      74,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return (X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type : list leftsqrbracket BasicType rightsqrbracket	<< ast.AppendType(X[2]) >>`,
		Id:         "Type",
		NTType:     30,
		Index:      75,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendType(X[2])
		},
	},
	ProdTabEntry{
		String: `Attribute : id dot id	<< ast.NewAttribute(X[0], X[2]) >>`,
		Id:         "Attribute",
		NTType:     31,
		Index:      76,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAttribute(X[0], X[2])
		},
	},
}
