S': {
	program
}
Programa: {
	program
}
VarsOp: {
	backgroundtype
	booltype
	chartype
	circletype
	empty
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
}
Vars: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
}
VarsDec: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
}
Ids: {
	id
}
Params: {
	backgroundtype
	booltype
	chartype
	circletype
	empty
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
}
ParamsAux: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
}
Functions: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
	voidtype
}
FunctionsAux: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
	voidtype
}
Block: {
	leftbracket
}
BlockAux: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	for
	id
	if
	imagetype
	inttype
	print
	return
	squaretype
	stringtype
	texttype
	while
}
Statement: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	for
	id
	if
	imagetype
	inttype
	print
	return
	squaretype
	stringtype
	texttype
	while
}
BasicType: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
}
Object: {
	backgroundtype
	circletype
	imagetype
	squaretype
	texttype
}
Expression: {
	ctebool
	ctechar
	ctefloat
	cteint
	ctestring
	id
	leftparenthesis
}
Operations: {
	logicalop
	relop
}
Exp: {
	ctebool
	ctechar
	ctefloat
	cteint
	ctestring
	id
	leftparenthesis
}
Term: {
	ctebool
	ctechar
	ctefloat
	cteint
	ctestring
	id
	leftparenthesis
}
Factor: {
	ctebool
	ctechar
	ctefloat
	cteint
	ctestring
	id
	leftparenthesis
}
Assign: {
	id
}
Write: {
	print
}
Condition: {
	if
}
Return: {
	return
}
For: {
	for
}
While: {
	while
}
CallFunction: {
	id
}
CallFunctionAux: {
	ctebool
	ctechar
	ctefloat
	cteint
	ctestring
	id
	leftparenthesis
}
Varcte: {
	ctebool
	ctechar
	ctefloat
	cteint
	ctestring
	id
}
ListElem: {
	id
}
Type: {
	backgroundtype
	booltype
	chartype
	circletype
	floattype
	imagetype
	inttype
	squaretype
	stringtype
	texttype
}
Attribute: {
	id
}
