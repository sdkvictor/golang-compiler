S0{
	S' : •Programa «$»
	Programa : •program id semicolon leftbracket VarsOp rightbracket Functions «$»
}
Transitions:
	Programa -> 1
	program -> 2


S1{
	S' : Programa• «$»
}
Transitions:


S2{
	Programa : program •id semicolon leftbracket VarsOp rightbracket Functions «$»
}
Transitions:
	id -> 3


S3{
	Programa : program id •semicolon leftbracket VarsOp rightbracket Functions «$»
}
Transitions:
	semicolon -> 4


S4{
	Programa : program id semicolon •leftbracket VarsOp rightbracket Functions «$»
}
Transitions:
	leftbracket -> 5


S5{
	Programa : program id semicolon leftbracket •VarsOp rightbracket Functions «$»
	VarsOp : •Vars «rightbracket»
	VarsOp : empty• «rightbracket»
	Vars : •Type Ids semicolon Vars «rightbracket»
	Vars : •Type Ids semicolon «rightbracket»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	VarsOp -> 6
	Vars -> 7
	Type -> 8
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21


S6{
	Programa : program id semicolon leftbracket VarsOp •rightbracket Functions «$»
}
Transitions:
	rightbracket -> 22


S7{
	VarsOp : Vars• «rightbracket»
}
Transitions:


S8{
	Vars : Type •Ids semicolon Vars «rightbracket»
	Vars : Type •Ids semicolon «rightbracket»
	Ids : •id comma Ids «semicolon»
	Ids : •id «semicolon»
}
Transitions:
	id -> 23
	Ids -> 24


S9{
	Type : BasicType• «id»
}
Transitions:


S10{
	BasicType : inttype• «id»
}
Transitions:


S11{
	BasicType : floattype• «id»
}
Transitions:


S12{
	BasicType : booltype• «id»
}
Transitions:


S13{
	BasicType : stringtype• «id»
}
Transitions:


S14{
	BasicType : chartype• «id»
}
Transitions:


S15{
	BasicType : Object• «id»
}
Transitions:


S16{
	Object : squaretype• «id»
}
Transitions:


S17{
	Object : circletype• «id»
}
Transitions:


S18{
	Object : imagetype• «id»
}
Transitions:


S19{
	Object : texttype• «id»
}
Transitions:


S20{
	Object : backgroundtype• «id»
}
Transitions:


S21{
	Type : list •leftsqrbracket BasicType rightsqrbracket «id»
}
Transitions:
	leftsqrbracket -> 25


S22{
	Programa : program id semicolon leftbracket VarsOp rightbracket •Functions «$»
	Functions : •FunctionsAux id leftparenthesis Params rightparenthesis Block Functions «$»
	Functions : •FunctionsAux id leftparenthesis Params rightparenthesis Block «$»
	FunctionsAux : •Type «id»
	FunctionsAux : •voidtype «id»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	Functions -> 26
	Type -> 27
	FunctionsAux -> 28
	voidtype -> 29


S23{
	Ids : id •comma Ids «semicolon»
	Ids : id• «semicolon»
}
Transitions:
	comma -> 30


S24{
	Vars : Type Ids •semicolon Vars «rightbracket»
	Vars : Type Ids •semicolon «rightbracket»
}
Transitions:
	semicolon -> 31


S25{
	Type : list leftsqrbracket •BasicType rightsqrbracket «id»
	BasicType : •inttype «rightsqrbracket»
	BasicType : •floattype «rightsqrbracket»
	BasicType : •booltype «rightsqrbracket»
	BasicType : •stringtype «rightsqrbracket»
	BasicType : •chartype «rightsqrbracket»
	BasicType : •Object «rightsqrbracket»
	Object : •squaretype «rightsqrbracket»
	Object : •circletype «rightsqrbracket»
	Object : •imagetype «rightsqrbracket»
	Object : •texttype «rightsqrbracket»
	Object : •backgroundtype «rightsqrbracket»
}
Transitions:
	BasicType -> 32
	inttype -> 33
	floattype -> 34
	booltype -> 35
	stringtype -> 36
	chartype -> 37
	Object -> 38
	squaretype -> 39
	circletype -> 40
	imagetype -> 41
	texttype -> 42
	backgroundtype -> 43


S26{
	Programa : program id semicolon leftbracket VarsOp rightbracket Functions• «$»
}
Transitions:


S27{
	FunctionsAux : Type• «id»
}
Transitions:


S28{
	Functions : FunctionsAux •id leftparenthesis Params rightparenthesis Block Functions «$»
	Functions : FunctionsAux •id leftparenthesis Params rightparenthesis Block «$»
}
Transitions:
	id -> 44


S29{
	FunctionsAux : voidtype• «id»
}
Transitions:


S30{
	Ids : id comma •Ids «semicolon»
	Ids : •id comma Ids «semicolon»
	Ids : •id «semicolon»
}
Transitions:
	id -> 23
	Ids -> 45


S31{
	Vars : Type Ids semicolon •Vars «rightbracket»
	Vars : Type Ids semicolon• «rightbracket»
	Vars : •Type Ids semicolon Vars «rightbracket»
	Vars : •Type Ids semicolon «rightbracket»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	Type -> 8
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	Vars -> 46


S32{
	Type : list leftsqrbracket BasicType •rightsqrbracket «id»
}
Transitions:
	rightsqrbracket -> 47


S33{
	BasicType : inttype• «rightsqrbracket»
}
Transitions:


S34{
	BasicType : floattype• «rightsqrbracket»
}
Transitions:


S35{
	BasicType : booltype• «rightsqrbracket»
}
Transitions:


S36{
	BasicType : stringtype• «rightsqrbracket»
}
Transitions:


S37{
	BasicType : chartype• «rightsqrbracket»
}
Transitions:


S38{
	BasicType : Object• «rightsqrbracket»
}
Transitions:


S39{
	Object : squaretype• «rightsqrbracket»
}
Transitions:


S40{
	Object : circletype• «rightsqrbracket»
}
Transitions:


S41{
	Object : imagetype• «rightsqrbracket»
}
Transitions:


S42{
	Object : texttype• «rightsqrbracket»
}
Transitions:


S43{
	Object : backgroundtype• «rightsqrbracket»
}
Transitions:


S44{
	Functions : FunctionsAux id •leftparenthesis Params rightparenthesis Block Functions «$»
	Functions : FunctionsAux id •leftparenthesis Params rightparenthesis Block «$»
}
Transitions:
	leftparenthesis -> 48


S45{
	Ids : id comma Ids• «semicolon»
}
Transitions:


S46{
	Vars : Type Ids semicolon Vars• «rightbracket»
}
Transitions:


S47{
	Type : list leftsqrbracket BasicType rightsqrbracket• «id»
}
Transitions:


S48{
	Functions : FunctionsAux id leftparenthesis •Params rightparenthesis Block Functions «$»
	Functions : FunctionsAux id leftparenthesis •Params rightparenthesis Block «$»
	Params : •ParamsAux «rightparenthesis»
	Params : empty• «rightparenthesis»
	ParamsAux : •Type id comma ParamsAux «rightparenthesis»
	ParamsAux : •Type id «rightparenthesis»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	Type -> 49
	Params -> 50
	ParamsAux -> 51


S49{
	ParamsAux : Type •id comma ParamsAux «rightparenthesis»
	ParamsAux : Type •id «rightparenthesis»
}
Transitions:
	id -> 52


S50{
	Functions : FunctionsAux id leftparenthesis Params •rightparenthesis Block Functions «$»
	Functions : FunctionsAux id leftparenthesis Params •rightparenthesis Block «$»
}
Transitions:
	rightparenthesis -> 53


S51{
	Params : ParamsAux• «rightparenthesis»
}
Transitions:


S52{
	ParamsAux : Type id •comma ParamsAux «rightparenthesis»
	ParamsAux : Type id• «rightparenthesis»
}
Transitions:
	comma -> 54


S53{
	Functions : FunctionsAux id leftparenthesis Params rightparenthesis •Block Functions «$»
	Functions : FunctionsAux id leftparenthesis Params rightparenthesis •Block «$»
	Block : •leftbracket BlockAux rightbracket «backgroundtype»
	Block : •leftbracket BlockAux rightbracket «booltype»
	Block : •leftbracket BlockAux rightbracket «chartype»
	Block : •leftbracket BlockAux rightbracket «circletype»
	Block : •leftbracket BlockAux rightbracket «floattype»
	Block : •leftbracket BlockAux rightbracket «imagetype»
	Block : •leftbracket BlockAux rightbracket «inttype»
	Block : •leftbracket BlockAux rightbracket «list»
	Block : •leftbracket BlockAux rightbracket «squaretype»
	Block : •leftbracket BlockAux rightbracket «stringtype»
	Block : •leftbracket BlockAux rightbracket «texttype»
	Block : •leftbracket BlockAux rightbracket «voidtype»
	Block : •leftbracket rightbracket «backgroundtype»
	Block : •leftbracket rightbracket «booltype»
	Block : •leftbracket rightbracket «chartype»
	Block : •leftbracket rightbracket «circletype»
	Block : •leftbracket rightbracket «floattype»
	Block : •leftbracket rightbracket «imagetype»
	Block : •leftbracket rightbracket «inttype»
	Block : •leftbracket rightbracket «list»
	Block : •leftbracket rightbracket «squaretype»
	Block : •leftbracket rightbracket «stringtype»
	Block : •leftbracket rightbracket «texttype»
	Block : •leftbracket rightbracket «voidtype»
	Block : •leftbracket BlockAux rightbracket «$»
	Block : •leftbracket rightbracket «$»
}
Transitions:
	leftbracket -> 55
	Block -> 56


S54{
	ParamsAux : Type id comma •ParamsAux «rightparenthesis»
	ParamsAux : •Type id comma ParamsAux «rightparenthesis»
	ParamsAux : •Type id «rightparenthesis»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	Type -> 49
	ParamsAux -> 57


S55{
	Block : leftbracket •BlockAux rightbracket «backgroundtype»
	Block : leftbracket •BlockAux rightbracket «booltype»
	Block : leftbracket •BlockAux rightbracket «chartype»
	Block : leftbracket •BlockAux rightbracket «circletype»
	Block : leftbracket •BlockAux rightbracket «floattype»
	Block : leftbracket •BlockAux rightbracket «imagetype»
	Block : leftbracket •BlockAux rightbracket «inttype»
	Block : leftbracket •BlockAux rightbracket «list»
	Block : leftbracket •BlockAux rightbracket «squaretype»
	Block : leftbracket •BlockAux rightbracket «stringtype»
	Block : leftbracket •BlockAux rightbracket «texttype»
	Block : leftbracket •BlockAux rightbracket «voidtype»
	Block : leftbracket •rightbracket «backgroundtype»
	Block : leftbracket •rightbracket «booltype»
	Block : leftbracket •rightbracket «chartype»
	Block : leftbracket •rightbracket «circletype»
	Block : leftbracket •rightbracket «floattype»
	Block : leftbracket •rightbracket «imagetype»
	Block : leftbracket •rightbracket «inttype»
	Block : leftbracket •rightbracket «list»
	Block : leftbracket •rightbracket «squaretype»
	Block : leftbracket •rightbracket «stringtype»
	Block : leftbracket •rightbracket «texttype»
	Block : leftbracket •rightbracket «voidtype»
	Block : leftbracket •BlockAux rightbracket «$»
	Block : leftbracket •rightbracket «$»
	BlockAux : •Statement «rightbracket»
	BlockAux : •Statement BlockAux «rightbracket»
	Statement : •VarsDec «rightbracket»
	Statement : •Assign «rightbracket»
	Statement : •Condition «rightbracket»
	Statement : •Return «rightbracket»
	Statement : •For «rightbracket»
	Statement : •While «rightbracket»
	Statement : •Write «rightbracket»
	Statement : •CallFunction semicolon «rightbracket»
	Statement : •VarsDec «backgroundtype»
	Statement : •VarsDec «booltype»
	Statement : •VarsDec «chartype»
	Statement : •VarsDec «circletype»
	Statement : •VarsDec «floattype»
	Statement : •VarsDec «for»
	Statement : •VarsDec «id»
	Statement : •VarsDec «if»
	Statement : •VarsDec «imagetype»
	Statement : •VarsDec «inttype»
	Statement : •VarsDec «list»
	Statement : •VarsDec «print»
	Statement : •VarsDec «return»
	Statement : •VarsDec «squaretype»
	Statement : •VarsDec «stringtype»
	Statement : •VarsDec «texttype»
	Statement : •VarsDec «while»
	Statement : •Assign «backgroundtype»
	Statement : •Assign «booltype»
	Statement : •Assign «chartype»
	Statement : •Assign «circletype»
	Statement : •Assign «floattype»
	Statement : •Assign «for»
	Statement : •Assign «id»
	Statement : •Assign «if»
	Statement : •Assign «imagetype»
	Statement : •Assign «inttype»
	Statement : •Assign «list»
	Statement : •Assign «print»
	Statement : •Assign «return»
	Statement : •Assign «squaretype»
	Statement : •Assign «stringtype»
	Statement : •Assign «texttype»
	Statement : •Assign «while»
	Statement : •Condition «backgroundtype»
	Statement : •Condition «booltype»
	Statement : •Condition «chartype»
	Statement : •Condition «circletype»
	Statement : •Condition «floattype»
	Statement : •Condition «for»
	Statement : •Condition «id»
	Statement : •Condition «if»
	Statement : •Condition «imagetype»
	Statement : •Condition «inttype»
	Statement : •Condition «list»
	Statement : •Condition «print»
	Statement : •Condition «return»
	Statement : •Condition «squaretype»
	Statement : •Condition «stringtype»
	Statement : •Condition «texttype»
	Statement : •Condition «while»
	Statement : •Return «backgroundtype»
	Statement : •Return «booltype»
	Statement : •Return «chartype»
	Statement : •Return «circletype»
	Statement : •Return «floattype»
	Statement : •Return «for»
	Statement : •Return «id»
	Statement : •Return «if»
	Statement : •Return «imagetype»
	Statement : •Return «inttype»
	Statement : •Return «list»
	Statement : •Return «print»
	Statement : •Return «return»
	Statement : •Return «squaretype»
	Statement : •Return «stringtype»
	Statement : •Return «texttype»
	Statement : •Return «while»
	Statement : •For «backgroundtype»
	Statement : •For «booltype»
	Statement : •For «chartype»
	Statement : •For «circletype»
	Statement : •For «floattype»
	Statement : •For «for»
	Statement : •For «id»
	Statement : •For «if»
	Statement : •For «imagetype»
	Statement : •For «inttype»
	Statement : •For «list»
	Statement : •For «print»
	Statement : •For «return»
	Statement : •For «squaretype»
	Statement : •For «stringtype»
	Statement : •For «texttype»
	Statement : •For «while»
	Statement : •While «backgroundtype»
	Statement : •While «booltype»
	Statement : •While «chartype»
	Statement : •While «circletype»
	Statement : •While «floattype»
	Statement : •While «for»
	Statement : •While «id»
	Statement : •While «if»
	Statement : •While «imagetype»
	Statement : •While «inttype»
	Statement : •While «list»
	Statement : •While «print»
	Statement : •While «return»
	Statement : •While «squaretype»
	Statement : •While «stringtype»
	Statement : •While «texttype»
	Statement : •While «while»
	Statement : •Write «backgroundtype»
	Statement : •Write «booltype»
	Statement : •Write «chartype»
	Statement : •Write «circletype»
	Statement : •Write «floattype»
	Statement : •Write «for»
	Statement : •Write «id»
	Statement : •Write «if»
	Statement : •Write «imagetype»
	Statement : •Write «inttype»
	Statement : •Write «list»
	Statement : •Write «print»
	Statement : •Write «return»
	Statement : •Write «squaretype»
	Statement : •Write «stringtype»
	Statement : •Write «texttype»
	Statement : •Write «while»
	Statement : •CallFunction semicolon «backgroundtype»
	Statement : •CallFunction semicolon «booltype»
	Statement : •CallFunction semicolon «chartype»
	Statement : •CallFunction semicolon «circletype»
	Statement : •CallFunction semicolon «floattype»
	Statement : •CallFunction semicolon «for»
	Statement : •CallFunction semicolon «id»
	Statement : •CallFunction semicolon «if»
	Statement : •CallFunction semicolon «imagetype»
	Statement : •CallFunction semicolon «inttype»
	Statement : •CallFunction semicolon «list»
	Statement : •CallFunction semicolon «print»
	Statement : •CallFunction semicolon «return»
	Statement : •CallFunction semicolon «squaretype»
	Statement : •CallFunction semicolon «stringtype»
	Statement : •CallFunction semicolon «texttype»
	Statement : •CallFunction semicolon «while»
	VarsDec : •Vars «rightbracket»
	Assign : •id equals Expression semicolon «rightbracket»
	Assign : •Attribute equals Expression semicolon «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «rightbracket»
	Return : •return Expression semicolon «rightbracket»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «rightbracket»
	While : •while leftparenthesis Expression rightparenthesis Block «rightbracket»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «rightbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	VarsDec : •Vars «backgroundtype»
	VarsDec : •Vars «booltype»
	VarsDec : •Vars «chartype»
	VarsDec : •Vars «circletype»
	VarsDec : •Vars «floattype»
	VarsDec : •Vars «for»
	VarsDec : •Vars «id»
	VarsDec : •Vars «if»
	VarsDec : •Vars «imagetype»
	VarsDec : •Vars «inttype»
	VarsDec : •Vars «list»
	VarsDec : •Vars «print»
	VarsDec : •Vars «return»
	VarsDec : •Vars «squaretype»
	VarsDec : •Vars «stringtype»
	VarsDec : •Vars «texttype»
	VarsDec : •Vars «while»
	Assign : •id equals Expression semicolon «backgroundtype»
	Assign : •Attribute equals Expression semicolon «backgroundtype»
	Assign : •id equals Expression semicolon «booltype»
	Assign : •Attribute equals Expression semicolon «booltype»
	Assign : •id equals Expression semicolon «chartype»
	Assign : •Attribute equals Expression semicolon «chartype»
	Assign : •id equals Expression semicolon «circletype»
	Assign : •Attribute equals Expression semicolon «circletype»
	Assign : •id equals Expression semicolon «floattype»
	Assign : •Attribute equals Expression semicolon «floattype»
	Assign : •id equals Expression semicolon «for»
	Assign : •Attribute equals Expression semicolon «for»
	Assign : •id equals Expression semicolon «id»
	Assign : •Attribute equals Expression semicolon «id»
	Assign : •id equals Expression semicolon «if»
	Assign : •Attribute equals Expression semicolon «if»
	Assign : •id equals Expression semicolon «imagetype»
	Assign : •Attribute equals Expression semicolon «imagetype»
	Assign : •id equals Expression semicolon «inttype»
	Assign : •Attribute equals Expression semicolon «inttype»
	Assign : •id equals Expression semicolon «list»
	Assign : •Attribute equals Expression semicolon «list»
	Assign : •id equals Expression semicolon «print»
	Assign : •Attribute equals Expression semicolon «print»
	Assign : •id equals Expression semicolon «return»
	Assign : •Attribute equals Expression semicolon «return»
	Assign : •id equals Expression semicolon «squaretype»
	Assign : •Attribute equals Expression semicolon «squaretype»
	Assign : •id equals Expression semicolon «stringtype»
	Assign : •Attribute equals Expression semicolon «stringtype»
	Assign : •id equals Expression semicolon «texttype»
	Assign : •Attribute equals Expression semicolon «texttype»
	Assign : •id equals Expression semicolon «while»
	Assign : •Attribute equals Expression semicolon «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «while»
	Return : •return Expression semicolon «backgroundtype»
	Return : •return Expression semicolon «booltype»
	Return : •return Expression semicolon «chartype»
	Return : •return Expression semicolon «circletype»
	Return : •return Expression semicolon «floattype»
	Return : •return Expression semicolon «for»
	Return : •return Expression semicolon «id»
	Return : •return Expression semicolon «if»
	Return : •return Expression semicolon «imagetype»
	Return : •return Expression semicolon «inttype»
	Return : •return Expression semicolon «list»
	Return : •return Expression semicolon «print»
	Return : •return Expression semicolon «return»
	Return : •return Expression semicolon «squaretype»
	Return : •return Expression semicolon «stringtype»
	Return : •return Expression semicolon «texttype»
	Return : •return Expression semicolon «while»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «backgroundtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «booltype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «chartype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «circletype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «floattype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «for»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «id»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «if»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «imagetype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «inttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «list»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «print»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «return»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «squaretype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «stringtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «texttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «while»
	While : •while leftparenthesis Expression rightparenthesis Block «backgroundtype»
	While : •while leftparenthesis Expression rightparenthesis Block «booltype»
	While : •while leftparenthesis Expression rightparenthesis Block «chartype»
	While : •while leftparenthesis Expression rightparenthesis Block «circletype»
	While : •while leftparenthesis Expression rightparenthesis Block «floattype»
	While : •while leftparenthesis Expression rightparenthesis Block «for»
	While : •while leftparenthesis Expression rightparenthesis Block «id»
	While : •while leftparenthesis Expression rightparenthesis Block «if»
	While : •while leftparenthesis Expression rightparenthesis Block «imagetype»
	While : •while leftparenthesis Expression rightparenthesis Block «inttype»
	While : •while leftparenthesis Expression rightparenthesis Block «list»
	While : •while leftparenthesis Expression rightparenthesis Block «print»
	While : •while leftparenthesis Expression rightparenthesis Block «return»
	While : •while leftparenthesis Expression rightparenthesis Block «squaretype»
	While : •while leftparenthesis Expression rightparenthesis Block «stringtype»
	While : •while leftparenthesis Expression rightparenthesis Block «texttype»
	While : •while leftparenthesis Expression rightparenthesis Block «while»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «backgroundtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «booltype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «chartype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «circletype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «floattype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «for»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «id»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «if»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «imagetype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «inttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «list»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «print»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «return»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «squaretype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «stringtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «texttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «while»
	Vars : •Type Ids semicolon Vars «rightbracket»
	Vars : •Type Ids semicolon «rightbracket»
	Attribute : •id dot id «equals»
	Vars : •Type Ids semicolon Vars «backgroundtype»
	Vars : •Type Ids semicolon «backgroundtype»
	Vars : •Type Ids semicolon Vars «booltype»
	Vars : •Type Ids semicolon «booltype»
	Vars : •Type Ids semicolon Vars «chartype»
	Vars : •Type Ids semicolon «chartype»
	Vars : •Type Ids semicolon Vars «circletype»
	Vars : •Type Ids semicolon «circletype»
	Vars : •Type Ids semicolon Vars «floattype»
	Vars : •Type Ids semicolon «floattype»
	Vars : •Type Ids semicolon Vars «for»
	Vars : •Type Ids semicolon «for»
	Vars : •Type Ids semicolon Vars «id»
	Vars : •Type Ids semicolon «id»
	Vars : •Type Ids semicolon Vars «if»
	Vars : •Type Ids semicolon «if»
	Vars : •Type Ids semicolon Vars «imagetype»
	Vars : •Type Ids semicolon «imagetype»
	Vars : •Type Ids semicolon Vars «inttype»
	Vars : •Type Ids semicolon «inttype»
	Vars : •Type Ids semicolon Vars «list»
	Vars : •Type Ids semicolon «list»
	Vars : •Type Ids semicolon Vars «print»
	Vars : •Type Ids semicolon «print»
	Vars : •Type Ids semicolon Vars «return»
	Vars : •Type Ids semicolon «return»
	Vars : •Type Ids semicolon Vars «squaretype»
	Vars : •Type Ids semicolon «squaretype»
	Vars : •Type Ids semicolon Vars «stringtype»
	Vars : •Type Ids semicolon «stringtype»
	Vars : •Type Ids semicolon Vars «texttype»
	Vars : •Type Ids semicolon «texttype»
	Vars : •Type Ids semicolon Vars «while»
	Vars : •Type Ids semicolon «while»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	id -> 58
	rightbracket -> 59
	Vars -> 60
	Type -> 61
	VarsDec -> 62
	BlockAux -> 63
	Statement -> 64
	Assign -> 65
	Condition -> 66
	Return -> 67
	For -> 68
	While -> 69
	Write -> 70
	CallFunction -> 71
	Attribute -> 72
	print -> 73
	if -> 74
	return -> 75
	for -> 76
	while -> 77


S56{
	Functions : FunctionsAux id leftparenthesis Params rightparenthesis Block •Functions «$»
	Functions : FunctionsAux id leftparenthesis Params rightparenthesis Block• «$»
	Functions : •FunctionsAux id leftparenthesis Params rightparenthesis Block Functions «$»
	Functions : •FunctionsAux id leftparenthesis Params rightparenthesis Block «$»
	FunctionsAux : •Type «id»
	FunctionsAux : •voidtype «id»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	Type -> 27
	FunctionsAux -> 28
	voidtype -> 29
	Functions -> 78


S57{
	ParamsAux : Type id comma ParamsAux• «rightparenthesis»
}
Transitions:


S58{
	Assign : id •equals Expression semicolon «rightbracket»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : id •leftparenthesis rightparenthesis «semicolon»
	Assign : id •equals Expression semicolon «backgroundtype»
	Assign : id •equals Expression semicolon «booltype»
	Assign : id •equals Expression semicolon «chartype»
	Assign : id •equals Expression semicolon «circletype»
	Assign : id •equals Expression semicolon «floattype»
	Assign : id •equals Expression semicolon «for»
	Assign : id •equals Expression semicolon «id»
	Assign : id •equals Expression semicolon «if»
	Assign : id •equals Expression semicolon «imagetype»
	Assign : id •equals Expression semicolon «inttype»
	Assign : id •equals Expression semicolon «list»
	Assign : id •equals Expression semicolon «print»
	Assign : id •equals Expression semicolon «return»
	Assign : id •equals Expression semicolon «squaretype»
	Assign : id •equals Expression semicolon «stringtype»
	Assign : id •equals Expression semicolon «texttype»
	Assign : id •equals Expression semicolon «while»
	Attribute : id •dot id «equals»
}
Transitions:
	leftparenthesis -> 79
	equals -> 80
	dot -> 81


S59{
	Block : leftbracket rightbracket• «backgroundtype»
	Block : leftbracket rightbracket• «booltype»
	Block : leftbracket rightbracket• «chartype»
	Block : leftbracket rightbracket• «circletype»
	Block : leftbracket rightbracket• «floattype»
	Block : leftbracket rightbracket• «imagetype»
	Block : leftbracket rightbracket• «inttype»
	Block : leftbracket rightbracket• «list»
	Block : leftbracket rightbracket• «squaretype»
	Block : leftbracket rightbracket• «stringtype»
	Block : leftbracket rightbracket• «texttype»
	Block : leftbracket rightbracket• «voidtype»
	Block : leftbracket rightbracket• «$»
}
Transitions:


S60{
	VarsDec : Vars• «rightbracket»
	VarsDec : Vars• «backgroundtype»
	VarsDec : Vars• «booltype»
	VarsDec : Vars• «chartype»
	VarsDec : Vars• «circletype»
	VarsDec : Vars• «floattype»
	VarsDec : Vars• «for»
	VarsDec : Vars• «id»
	VarsDec : Vars• «if»
	VarsDec : Vars• «imagetype»
	VarsDec : Vars• «inttype»
	VarsDec : Vars• «list»
	VarsDec : Vars• «print»
	VarsDec : Vars• «return»
	VarsDec : Vars• «squaretype»
	VarsDec : Vars• «stringtype»
	VarsDec : Vars• «texttype»
	VarsDec : Vars• «while»
}
Transitions:


S61{
	Vars : Type •Ids semicolon Vars «rightbracket»
	Vars : Type •Ids semicolon «rightbracket»
	Vars : Type •Ids semicolon Vars «backgroundtype»
	Vars : Type •Ids semicolon «backgroundtype»
	Vars : Type •Ids semicolon Vars «booltype»
	Vars : Type •Ids semicolon «booltype»
	Vars : Type •Ids semicolon Vars «chartype»
	Vars : Type •Ids semicolon «chartype»
	Vars : Type •Ids semicolon Vars «circletype»
	Vars : Type •Ids semicolon «circletype»
	Vars : Type •Ids semicolon Vars «floattype»
	Vars : Type •Ids semicolon «floattype»
	Vars : Type •Ids semicolon Vars «for»
	Vars : Type •Ids semicolon «for»
	Vars : Type •Ids semicolon Vars «id»
	Vars : Type •Ids semicolon «id»
	Vars : Type •Ids semicolon Vars «if»
	Vars : Type •Ids semicolon «if»
	Vars : Type •Ids semicolon Vars «imagetype»
	Vars : Type •Ids semicolon «imagetype»
	Vars : Type •Ids semicolon Vars «inttype»
	Vars : Type •Ids semicolon «inttype»
	Vars : Type •Ids semicolon Vars «list»
	Vars : Type •Ids semicolon «list»
	Vars : Type •Ids semicolon Vars «print»
	Vars : Type •Ids semicolon «print»
	Vars : Type •Ids semicolon Vars «return»
	Vars : Type •Ids semicolon «return»
	Vars : Type •Ids semicolon Vars «squaretype»
	Vars : Type •Ids semicolon «squaretype»
	Vars : Type •Ids semicolon Vars «stringtype»
	Vars : Type •Ids semicolon «stringtype»
	Vars : Type •Ids semicolon Vars «texttype»
	Vars : Type •Ids semicolon «texttype»
	Vars : Type •Ids semicolon Vars «while»
	Vars : Type •Ids semicolon «while»
	Ids : •id comma Ids «semicolon»
	Ids : •id «semicolon»
}
Transitions:
	id -> 23
	Ids -> 82


S62{
	Statement : VarsDec• «rightbracket»
	Statement : VarsDec• «backgroundtype»
	Statement : VarsDec• «booltype»
	Statement : VarsDec• «chartype»
	Statement : VarsDec• «circletype»
	Statement : VarsDec• «floattype»
	Statement : VarsDec• «for»
	Statement : VarsDec• «id»
	Statement : VarsDec• «if»
	Statement : VarsDec• «imagetype»
	Statement : VarsDec• «inttype»
	Statement : VarsDec• «list»
	Statement : VarsDec• «print»
	Statement : VarsDec• «return»
	Statement : VarsDec• «squaretype»
	Statement : VarsDec• «stringtype»
	Statement : VarsDec• «texttype»
	Statement : VarsDec• «while»
}
Transitions:


S63{
	Block : leftbracket BlockAux •rightbracket «backgroundtype»
	Block : leftbracket BlockAux •rightbracket «booltype»
	Block : leftbracket BlockAux •rightbracket «chartype»
	Block : leftbracket BlockAux •rightbracket «circletype»
	Block : leftbracket BlockAux •rightbracket «floattype»
	Block : leftbracket BlockAux •rightbracket «imagetype»
	Block : leftbracket BlockAux •rightbracket «inttype»
	Block : leftbracket BlockAux •rightbracket «list»
	Block : leftbracket BlockAux •rightbracket «squaretype»
	Block : leftbracket BlockAux •rightbracket «stringtype»
	Block : leftbracket BlockAux •rightbracket «texttype»
	Block : leftbracket BlockAux •rightbracket «voidtype»
	Block : leftbracket BlockAux •rightbracket «$»
}
Transitions:
	rightbracket -> 83


S64{
	BlockAux : Statement• «rightbracket»
	BlockAux : Statement •BlockAux «rightbracket»
	BlockAux : •Statement «rightbracket»
	BlockAux : •Statement BlockAux «rightbracket»
	Statement : •VarsDec «rightbracket»
	Statement : •Assign «rightbracket»
	Statement : •Condition «rightbracket»
	Statement : •Return «rightbracket»
	Statement : •For «rightbracket»
	Statement : •While «rightbracket»
	Statement : •Write «rightbracket»
	Statement : •CallFunction semicolon «rightbracket»
	Statement : •VarsDec «backgroundtype»
	Statement : •VarsDec «booltype»
	Statement : •VarsDec «chartype»
	Statement : •VarsDec «circletype»
	Statement : •VarsDec «floattype»
	Statement : •VarsDec «for»
	Statement : •VarsDec «id»
	Statement : •VarsDec «if»
	Statement : •VarsDec «imagetype»
	Statement : •VarsDec «inttype»
	Statement : •VarsDec «list»
	Statement : •VarsDec «print»
	Statement : •VarsDec «return»
	Statement : •VarsDec «squaretype»
	Statement : •VarsDec «stringtype»
	Statement : •VarsDec «texttype»
	Statement : •VarsDec «while»
	Statement : •Assign «backgroundtype»
	Statement : •Assign «booltype»
	Statement : •Assign «chartype»
	Statement : •Assign «circletype»
	Statement : •Assign «floattype»
	Statement : •Assign «for»
	Statement : •Assign «id»
	Statement : •Assign «if»
	Statement : •Assign «imagetype»
	Statement : •Assign «inttype»
	Statement : •Assign «list»
	Statement : •Assign «print»
	Statement : •Assign «return»
	Statement : •Assign «squaretype»
	Statement : •Assign «stringtype»
	Statement : •Assign «texttype»
	Statement : •Assign «while»
	Statement : •Condition «backgroundtype»
	Statement : •Condition «booltype»
	Statement : •Condition «chartype»
	Statement : •Condition «circletype»
	Statement : •Condition «floattype»
	Statement : •Condition «for»
	Statement : •Condition «id»
	Statement : •Condition «if»
	Statement : •Condition «imagetype»
	Statement : •Condition «inttype»
	Statement : •Condition «list»
	Statement : •Condition «print»
	Statement : •Condition «return»
	Statement : •Condition «squaretype»
	Statement : •Condition «stringtype»
	Statement : •Condition «texttype»
	Statement : •Condition «while»
	Statement : •Return «backgroundtype»
	Statement : •Return «booltype»
	Statement : •Return «chartype»
	Statement : •Return «circletype»
	Statement : •Return «floattype»
	Statement : •Return «for»
	Statement : •Return «id»
	Statement : •Return «if»
	Statement : •Return «imagetype»
	Statement : •Return «inttype»
	Statement : •Return «list»
	Statement : •Return «print»
	Statement : •Return «return»
	Statement : •Return «squaretype»
	Statement : •Return «stringtype»
	Statement : •Return «texttype»
	Statement : •Return «while»
	Statement : •For «backgroundtype»
	Statement : •For «booltype»
	Statement : •For «chartype»
	Statement : •For «circletype»
	Statement : •For «floattype»
	Statement : •For «for»
	Statement : •For «id»
	Statement : •For «if»
	Statement : •For «imagetype»
	Statement : •For «inttype»
	Statement : •For «list»
	Statement : •For «print»
	Statement : •For «return»
	Statement : •For «squaretype»
	Statement : •For «stringtype»
	Statement : •For «texttype»
	Statement : •For «while»
	Statement : •While «backgroundtype»
	Statement : •While «booltype»
	Statement : •While «chartype»
	Statement : •While «circletype»
	Statement : •While «floattype»
	Statement : •While «for»
	Statement : •While «id»
	Statement : •While «if»
	Statement : •While «imagetype»
	Statement : •While «inttype»
	Statement : •While «list»
	Statement : •While «print»
	Statement : •While «return»
	Statement : •While «squaretype»
	Statement : •While «stringtype»
	Statement : •While «texttype»
	Statement : •While «while»
	Statement : •Write «backgroundtype»
	Statement : •Write «booltype»
	Statement : •Write «chartype»
	Statement : •Write «circletype»
	Statement : •Write «floattype»
	Statement : •Write «for»
	Statement : •Write «id»
	Statement : •Write «if»
	Statement : •Write «imagetype»
	Statement : •Write «inttype»
	Statement : •Write «list»
	Statement : •Write «print»
	Statement : •Write «return»
	Statement : •Write «squaretype»
	Statement : •Write «stringtype»
	Statement : •Write «texttype»
	Statement : •Write «while»
	Statement : •CallFunction semicolon «backgroundtype»
	Statement : •CallFunction semicolon «booltype»
	Statement : •CallFunction semicolon «chartype»
	Statement : •CallFunction semicolon «circletype»
	Statement : •CallFunction semicolon «floattype»
	Statement : •CallFunction semicolon «for»
	Statement : •CallFunction semicolon «id»
	Statement : •CallFunction semicolon «if»
	Statement : •CallFunction semicolon «imagetype»
	Statement : •CallFunction semicolon «inttype»
	Statement : •CallFunction semicolon «list»
	Statement : •CallFunction semicolon «print»
	Statement : •CallFunction semicolon «return»
	Statement : •CallFunction semicolon «squaretype»
	Statement : •CallFunction semicolon «stringtype»
	Statement : •CallFunction semicolon «texttype»
	Statement : •CallFunction semicolon «while»
	VarsDec : •Vars «rightbracket»
	Assign : •id equals Expression semicolon «rightbracket»
	Assign : •Attribute equals Expression semicolon «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «rightbracket»
	Return : •return Expression semicolon «rightbracket»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «rightbracket»
	While : •while leftparenthesis Expression rightparenthesis Block «rightbracket»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «rightbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	VarsDec : •Vars «backgroundtype»
	VarsDec : •Vars «booltype»
	VarsDec : •Vars «chartype»
	VarsDec : •Vars «circletype»
	VarsDec : •Vars «floattype»
	VarsDec : •Vars «for»
	VarsDec : •Vars «id»
	VarsDec : •Vars «if»
	VarsDec : •Vars «imagetype»
	VarsDec : •Vars «inttype»
	VarsDec : •Vars «list»
	VarsDec : •Vars «print»
	VarsDec : •Vars «return»
	VarsDec : •Vars «squaretype»
	VarsDec : •Vars «stringtype»
	VarsDec : •Vars «texttype»
	VarsDec : •Vars «while»
	Assign : •id equals Expression semicolon «backgroundtype»
	Assign : •Attribute equals Expression semicolon «backgroundtype»
	Assign : •id equals Expression semicolon «booltype»
	Assign : •Attribute equals Expression semicolon «booltype»
	Assign : •id equals Expression semicolon «chartype»
	Assign : •Attribute equals Expression semicolon «chartype»
	Assign : •id equals Expression semicolon «circletype»
	Assign : •Attribute equals Expression semicolon «circletype»
	Assign : •id equals Expression semicolon «floattype»
	Assign : •Attribute equals Expression semicolon «floattype»
	Assign : •id equals Expression semicolon «for»
	Assign : •Attribute equals Expression semicolon «for»
	Assign : •id equals Expression semicolon «id»
	Assign : •Attribute equals Expression semicolon «id»
	Assign : •id equals Expression semicolon «if»
	Assign : •Attribute equals Expression semicolon «if»
	Assign : •id equals Expression semicolon «imagetype»
	Assign : •Attribute equals Expression semicolon «imagetype»
	Assign : •id equals Expression semicolon «inttype»
	Assign : •Attribute equals Expression semicolon «inttype»
	Assign : •id equals Expression semicolon «list»
	Assign : •Attribute equals Expression semicolon «list»
	Assign : •id equals Expression semicolon «print»
	Assign : •Attribute equals Expression semicolon «print»
	Assign : •id equals Expression semicolon «return»
	Assign : •Attribute equals Expression semicolon «return»
	Assign : •id equals Expression semicolon «squaretype»
	Assign : •Attribute equals Expression semicolon «squaretype»
	Assign : •id equals Expression semicolon «stringtype»
	Assign : •Attribute equals Expression semicolon «stringtype»
	Assign : •id equals Expression semicolon «texttype»
	Assign : •Attribute equals Expression semicolon «texttype»
	Assign : •id equals Expression semicolon «while»
	Assign : •Attribute equals Expression semicolon «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «while»
	Return : •return Expression semicolon «backgroundtype»
	Return : •return Expression semicolon «booltype»
	Return : •return Expression semicolon «chartype»
	Return : •return Expression semicolon «circletype»
	Return : •return Expression semicolon «floattype»
	Return : •return Expression semicolon «for»
	Return : •return Expression semicolon «id»
	Return : •return Expression semicolon «if»
	Return : •return Expression semicolon «imagetype»
	Return : •return Expression semicolon «inttype»
	Return : •return Expression semicolon «list»
	Return : •return Expression semicolon «print»
	Return : •return Expression semicolon «return»
	Return : •return Expression semicolon «squaretype»
	Return : •return Expression semicolon «stringtype»
	Return : •return Expression semicolon «texttype»
	Return : •return Expression semicolon «while»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «backgroundtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «booltype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «chartype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «circletype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «floattype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «for»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «id»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «if»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «imagetype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «inttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «list»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «print»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «return»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «squaretype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «stringtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «texttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «while»
	While : •while leftparenthesis Expression rightparenthesis Block «backgroundtype»
	While : •while leftparenthesis Expression rightparenthesis Block «booltype»
	While : •while leftparenthesis Expression rightparenthesis Block «chartype»
	While : •while leftparenthesis Expression rightparenthesis Block «circletype»
	While : •while leftparenthesis Expression rightparenthesis Block «floattype»
	While : •while leftparenthesis Expression rightparenthesis Block «for»
	While : •while leftparenthesis Expression rightparenthesis Block «id»
	While : •while leftparenthesis Expression rightparenthesis Block «if»
	While : •while leftparenthesis Expression rightparenthesis Block «imagetype»
	While : •while leftparenthesis Expression rightparenthesis Block «inttype»
	While : •while leftparenthesis Expression rightparenthesis Block «list»
	While : •while leftparenthesis Expression rightparenthesis Block «print»
	While : •while leftparenthesis Expression rightparenthesis Block «return»
	While : •while leftparenthesis Expression rightparenthesis Block «squaretype»
	While : •while leftparenthesis Expression rightparenthesis Block «stringtype»
	While : •while leftparenthesis Expression rightparenthesis Block «texttype»
	While : •while leftparenthesis Expression rightparenthesis Block «while»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «backgroundtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «booltype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «chartype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «circletype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «floattype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «for»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «id»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «if»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «imagetype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «inttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «list»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «print»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «return»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «squaretype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «stringtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «texttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «while»
	Vars : •Type Ids semicolon Vars «rightbracket»
	Vars : •Type Ids semicolon «rightbracket»
	Attribute : •id dot id «equals»
	Vars : •Type Ids semicolon Vars «backgroundtype»
	Vars : •Type Ids semicolon «backgroundtype»
	Vars : •Type Ids semicolon Vars «booltype»
	Vars : •Type Ids semicolon «booltype»
	Vars : •Type Ids semicolon Vars «chartype»
	Vars : •Type Ids semicolon «chartype»
	Vars : •Type Ids semicolon Vars «circletype»
	Vars : •Type Ids semicolon «circletype»
	Vars : •Type Ids semicolon Vars «floattype»
	Vars : •Type Ids semicolon «floattype»
	Vars : •Type Ids semicolon Vars «for»
	Vars : •Type Ids semicolon «for»
	Vars : •Type Ids semicolon Vars «id»
	Vars : •Type Ids semicolon «id»
	Vars : •Type Ids semicolon Vars «if»
	Vars : •Type Ids semicolon «if»
	Vars : •Type Ids semicolon Vars «imagetype»
	Vars : •Type Ids semicolon «imagetype»
	Vars : •Type Ids semicolon Vars «inttype»
	Vars : •Type Ids semicolon «inttype»
	Vars : •Type Ids semicolon Vars «list»
	Vars : •Type Ids semicolon «list»
	Vars : •Type Ids semicolon Vars «print»
	Vars : •Type Ids semicolon «print»
	Vars : •Type Ids semicolon Vars «return»
	Vars : •Type Ids semicolon «return»
	Vars : •Type Ids semicolon Vars «squaretype»
	Vars : •Type Ids semicolon «squaretype»
	Vars : •Type Ids semicolon Vars «stringtype»
	Vars : •Type Ids semicolon «stringtype»
	Vars : •Type Ids semicolon Vars «texttype»
	Vars : •Type Ids semicolon «texttype»
	Vars : •Type Ids semicolon Vars «while»
	Vars : •Type Ids semicolon «while»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	id -> 58
	Vars -> 60
	Type -> 61
	VarsDec -> 62
	Statement -> 64
	Assign -> 65
	Condition -> 66
	Return -> 67
	For -> 68
	While -> 69
	Write -> 70
	CallFunction -> 71
	Attribute -> 72
	print -> 73
	if -> 74
	return -> 75
	for -> 76
	while -> 77
	BlockAux -> 84


S65{
	Statement : Assign• «rightbracket»
	Statement : Assign• «backgroundtype»
	Statement : Assign• «booltype»
	Statement : Assign• «chartype»
	Statement : Assign• «circletype»
	Statement : Assign• «floattype»
	Statement : Assign• «for»
	Statement : Assign• «id»
	Statement : Assign• «if»
	Statement : Assign• «imagetype»
	Statement : Assign• «inttype»
	Statement : Assign• «list»
	Statement : Assign• «print»
	Statement : Assign• «return»
	Statement : Assign• «squaretype»
	Statement : Assign• «stringtype»
	Statement : Assign• «texttype»
	Statement : Assign• «while»
}
Transitions:


S66{
	Statement : Condition• «rightbracket»
	Statement : Condition• «backgroundtype»
	Statement : Condition• «booltype»
	Statement : Condition• «chartype»
	Statement : Condition• «circletype»
	Statement : Condition• «floattype»
	Statement : Condition• «for»
	Statement : Condition• «id»
	Statement : Condition• «if»
	Statement : Condition• «imagetype»
	Statement : Condition• «inttype»
	Statement : Condition• «list»
	Statement : Condition• «print»
	Statement : Condition• «return»
	Statement : Condition• «squaretype»
	Statement : Condition• «stringtype»
	Statement : Condition• «texttype»
	Statement : Condition• «while»
}
Transitions:


S67{
	Statement : Return• «rightbracket»
	Statement : Return• «backgroundtype»
	Statement : Return• «booltype»
	Statement : Return• «chartype»
	Statement : Return• «circletype»
	Statement : Return• «floattype»
	Statement : Return• «for»
	Statement : Return• «id»
	Statement : Return• «if»
	Statement : Return• «imagetype»
	Statement : Return• «inttype»
	Statement : Return• «list»
	Statement : Return• «print»
	Statement : Return• «return»
	Statement : Return• «squaretype»
	Statement : Return• «stringtype»
	Statement : Return• «texttype»
	Statement : Return• «while»
}
Transitions:


S68{
	Statement : For• «rightbracket»
	Statement : For• «backgroundtype»
	Statement : For• «booltype»
	Statement : For• «chartype»
	Statement : For• «circletype»
	Statement : For• «floattype»
	Statement : For• «for»
	Statement : For• «id»
	Statement : For• «if»
	Statement : For• «imagetype»
	Statement : For• «inttype»
	Statement : For• «list»
	Statement : For• «print»
	Statement : For• «return»
	Statement : For• «squaretype»
	Statement : For• «stringtype»
	Statement : For• «texttype»
	Statement : For• «while»
}
Transitions:


S69{
	Statement : While• «rightbracket»
	Statement : While• «backgroundtype»
	Statement : While• «booltype»
	Statement : While• «chartype»
	Statement : While• «circletype»
	Statement : While• «floattype»
	Statement : While• «for»
	Statement : While• «id»
	Statement : While• «if»
	Statement : While• «imagetype»
	Statement : While• «inttype»
	Statement : While• «list»
	Statement : While• «print»
	Statement : While• «return»
	Statement : While• «squaretype»
	Statement : While• «stringtype»
	Statement : While• «texttype»
	Statement : While• «while»
}
Transitions:


S70{
	Statement : Write• «rightbracket»
	Statement : Write• «backgroundtype»
	Statement : Write• «booltype»
	Statement : Write• «chartype»
	Statement : Write• «circletype»
	Statement : Write• «floattype»
	Statement : Write• «for»
	Statement : Write• «id»
	Statement : Write• «if»
	Statement : Write• «imagetype»
	Statement : Write• «inttype»
	Statement : Write• «list»
	Statement : Write• «print»
	Statement : Write• «return»
	Statement : Write• «squaretype»
	Statement : Write• «stringtype»
	Statement : Write• «texttype»
	Statement : Write• «while»
}
Transitions:


S71{
	Statement : CallFunction •semicolon «rightbracket»
	Statement : CallFunction •semicolon «backgroundtype»
	Statement : CallFunction •semicolon «booltype»
	Statement : CallFunction •semicolon «chartype»
	Statement : CallFunction •semicolon «circletype»
	Statement : CallFunction •semicolon «floattype»
	Statement : CallFunction •semicolon «for»
	Statement : CallFunction •semicolon «id»
	Statement : CallFunction •semicolon «if»
	Statement : CallFunction •semicolon «imagetype»
	Statement : CallFunction •semicolon «inttype»
	Statement : CallFunction •semicolon «list»
	Statement : CallFunction •semicolon «print»
	Statement : CallFunction •semicolon «return»
	Statement : CallFunction •semicolon «squaretype»
	Statement : CallFunction •semicolon «stringtype»
	Statement : CallFunction •semicolon «texttype»
	Statement : CallFunction •semicolon «while»
}
Transitions:
	semicolon -> 85


S72{
	Assign : Attribute •equals Expression semicolon «rightbracket»
	Assign : Attribute •equals Expression semicolon «backgroundtype»
	Assign : Attribute •equals Expression semicolon «booltype»
	Assign : Attribute •equals Expression semicolon «chartype»
	Assign : Attribute •equals Expression semicolon «circletype»
	Assign : Attribute •equals Expression semicolon «floattype»
	Assign : Attribute •equals Expression semicolon «for»
	Assign : Attribute •equals Expression semicolon «id»
	Assign : Attribute •equals Expression semicolon «if»
	Assign : Attribute •equals Expression semicolon «imagetype»
	Assign : Attribute •equals Expression semicolon «inttype»
	Assign : Attribute •equals Expression semicolon «list»
	Assign : Attribute •equals Expression semicolon «print»
	Assign : Attribute •equals Expression semicolon «return»
	Assign : Attribute •equals Expression semicolon «squaretype»
	Assign : Attribute •equals Expression semicolon «stringtype»
	Assign : Attribute •equals Expression semicolon «texttype»
	Assign : Attribute •equals Expression semicolon «while»
}
Transitions:
	equals -> 86


S73{
	Write : print •leftparenthesis Expression rightparenthesis semicolon «rightbracket»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «backgroundtype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «booltype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «chartype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «circletype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «floattype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «for»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «id»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «if»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «imagetype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «inttype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «list»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «print»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «return»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «squaretype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «stringtype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «texttype»
	Write : print •leftparenthesis Expression rightparenthesis semicolon «while»
}
Transitions:
	leftparenthesis -> 87


S74{
	Condition : if •leftparenthesis Expression rightparenthesis Block «rightbracket»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «rightbracket»
	Condition : if •leftparenthesis Expression rightparenthesis Block «backgroundtype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «backgroundtype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «booltype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «booltype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «chartype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «chartype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «circletype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «circletype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «floattype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «floattype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «for»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «for»
	Condition : if •leftparenthesis Expression rightparenthesis Block «id»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «id»
	Condition : if •leftparenthesis Expression rightparenthesis Block «if»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «if»
	Condition : if •leftparenthesis Expression rightparenthesis Block «imagetype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «imagetype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «inttype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «inttype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «list»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «list»
	Condition : if •leftparenthesis Expression rightparenthesis Block «print»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «print»
	Condition : if •leftparenthesis Expression rightparenthesis Block «return»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «return»
	Condition : if •leftparenthesis Expression rightparenthesis Block «squaretype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «squaretype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «stringtype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «stringtype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «texttype»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «texttype»
	Condition : if •leftparenthesis Expression rightparenthesis Block «while»
	Condition : if •leftparenthesis Expression rightparenthesis Block else Block «while»
}
Transitions:
	leftparenthesis -> 88


S75{
	Return : return •Expression semicolon «rightbracket»
	Return : return •Expression semicolon «backgroundtype»
	Return : return •Expression semicolon «booltype»
	Return : return •Expression semicolon «chartype»
	Return : return •Expression semicolon «circletype»
	Return : return •Expression semicolon «floattype»
	Return : return •Expression semicolon «for»
	Return : return •Expression semicolon «id»
	Return : return •Expression semicolon «if»
	Return : return •Expression semicolon «imagetype»
	Return : return •Expression semicolon «inttype»
	Return : return •Expression semicolon «list»
	Return : return •Expression semicolon «print»
	Return : return •Expression semicolon «return»
	Return : return •Expression semicolon «squaretype»
	Return : return •Expression semicolon «stringtype»
	Return : return •Expression semicolon «texttype»
	Return : return •Expression semicolon «while»
	Expression : •Exp «semicolon»
	Expression : •Exp Operations Expression «semicolon»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Expression -> 92
	Exp -> 93
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103


S76{
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «rightbracket»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «backgroundtype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «booltype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «chartype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «circletype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «floattype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «for»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «id»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «if»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «imagetype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «inttype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «list»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «print»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «return»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «squaretype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «stringtype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «texttype»
	For : for •leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «while»
}
Transitions:
	leftparenthesis -> 104


S77{
	While : while •leftparenthesis Expression rightparenthesis Block «rightbracket»
	While : while •leftparenthesis Expression rightparenthesis Block «backgroundtype»
	While : while •leftparenthesis Expression rightparenthesis Block «booltype»
	While : while •leftparenthesis Expression rightparenthesis Block «chartype»
	While : while •leftparenthesis Expression rightparenthesis Block «circletype»
	While : while •leftparenthesis Expression rightparenthesis Block «floattype»
	While : while •leftparenthesis Expression rightparenthesis Block «for»
	While : while •leftparenthesis Expression rightparenthesis Block «id»
	While : while •leftparenthesis Expression rightparenthesis Block «if»
	While : while •leftparenthesis Expression rightparenthesis Block «imagetype»
	While : while •leftparenthesis Expression rightparenthesis Block «inttype»
	While : while •leftparenthesis Expression rightparenthesis Block «list»
	While : while •leftparenthesis Expression rightparenthesis Block «print»
	While : while •leftparenthesis Expression rightparenthesis Block «return»
	While : while •leftparenthesis Expression rightparenthesis Block «squaretype»
	While : while •leftparenthesis Expression rightparenthesis Block «stringtype»
	While : while •leftparenthesis Expression rightparenthesis Block «texttype»
	While : while •leftparenthesis Expression rightparenthesis Block «while»
}
Transitions:
	leftparenthesis -> 105


S78{
	Functions : FunctionsAux id leftparenthesis Params rightparenthesis Block Functions• «$»
}
Transitions:


S79{
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «semicolon»
	CallFunction : id leftparenthesis •rightparenthesis «semicolon»
	CallFunctionAux : •Expression «rightparenthesis»
	CallFunctionAux : •Expression comma CallFunctionAux «rightparenthesis»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Expression : •Exp «comma»
	Expression : •Exp Operations Expression «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	rightparenthesis -> 108
	CallFunction -> 109
	Expression -> 110
	Exp -> 111
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	CallFunctionAux -> 116
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122


S80{
	Assign : id equals •Expression semicolon «rightbracket»
	Assign : id equals •Expression semicolon «backgroundtype»
	Assign : id equals •Expression semicolon «booltype»
	Assign : id equals •Expression semicolon «chartype»
	Assign : id equals •Expression semicolon «circletype»
	Assign : id equals •Expression semicolon «floattype»
	Assign : id equals •Expression semicolon «for»
	Assign : id equals •Expression semicolon «id»
	Assign : id equals •Expression semicolon «if»
	Assign : id equals •Expression semicolon «imagetype»
	Assign : id equals •Expression semicolon «inttype»
	Assign : id equals •Expression semicolon «list»
	Assign : id equals •Expression semicolon «print»
	Assign : id equals •Expression semicolon «return»
	Assign : id equals •Expression semicolon «squaretype»
	Assign : id equals •Expression semicolon «stringtype»
	Assign : id equals •Expression semicolon «texttype»
	Assign : id equals •Expression semicolon «while»
	Expression : •Exp «semicolon»
	Expression : •Exp Operations Expression «semicolon»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Exp -> 93
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Expression -> 123


S81{
	Attribute : id dot •id «equals»
}
Transitions:
	id -> 124


S82{
	Vars : Type Ids •semicolon Vars «rightbracket»
	Vars : Type Ids •semicolon «rightbracket»
	Vars : Type Ids •semicolon Vars «backgroundtype»
	Vars : Type Ids •semicolon «backgroundtype»
	Vars : Type Ids •semicolon Vars «booltype»
	Vars : Type Ids •semicolon «booltype»
	Vars : Type Ids •semicolon Vars «chartype»
	Vars : Type Ids •semicolon «chartype»
	Vars : Type Ids •semicolon Vars «circletype»
	Vars : Type Ids •semicolon «circletype»
	Vars : Type Ids •semicolon Vars «floattype»
	Vars : Type Ids •semicolon «floattype»
	Vars : Type Ids •semicolon Vars «for»
	Vars : Type Ids •semicolon «for»
	Vars : Type Ids •semicolon Vars «id»
	Vars : Type Ids •semicolon «id»
	Vars : Type Ids •semicolon Vars «if»
	Vars : Type Ids •semicolon «if»
	Vars : Type Ids •semicolon Vars «imagetype»
	Vars : Type Ids •semicolon «imagetype»
	Vars : Type Ids •semicolon Vars «inttype»
	Vars : Type Ids •semicolon «inttype»
	Vars : Type Ids •semicolon Vars «list»
	Vars : Type Ids •semicolon «list»
	Vars : Type Ids •semicolon Vars «print»
	Vars : Type Ids •semicolon «print»
	Vars : Type Ids •semicolon Vars «return»
	Vars : Type Ids •semicolon «return»
	Vars : Type Ids •semicolon Vars «squaretype»
	Vars : Type Ids •semicolon «squaretype»
	Vars : Type Ids •semicolon Vars «stringtype»
	Vars : Type Ids •semicolon «stringtype»
	Vars : Type Ids •semicolon Vars «texttype»
	Vars : Type Ids •semicolon «texttype»
	Vars : Type Ids •semicolon Vars «while»
	Vars : Type Ids •semicolon «while»
}
Transitions:
	semicolon -> 125


S83{
	Block : leftbracket BlockAux rightbracket• «backgroundtype»
	Block : leftbracket BlockAux rightbracket• «booltype»
	Block : leftbracket BlockAux rightbracket• «chartype»
	Block : leftbracket BlockAux rightbracket• «circletype»
	Block : leftbracket BlockAux rightbracket• «floattype»
	Block : leftbracket BlockAux rightbracket• «imagetype»
	Block : leftbracket BlockAux rightbracket• «inttype»
	Block : leftbracket BlockAux rightbracket• «list»
	Block : leftbracket BlockAux rightbracket• «squaretype»
	Block : leftbracket BlockAux rightbracket• «stringtype»
	Block : leftbracket BlockAux rightbracket• «texttype»
	Block : leftbracket BlockAux rightbracket• «voidtype»
	Block : leftbracket BlockAux rightbracket• «$»
}
Transitions:


S84{
	BlockAux : Statement BlockAux• «rightbracket»
}
Transitions:


S85{
	Statement : CallFunction semicolon• «rightbracket»
	Statement : CallFunction semicolon• «backgroundtype»
	Statement : CallFunction semicolon• «booltype»
	Statement : CallFunction semicolon• «chartype»
	Statement : CallFunction semicolon• «circletype»
	Statement : CallFunction semicolon• «floattype»
	Statement : CallFunction semicolon• «for»
	Statement : CallFunction semicolon• «id»
	Statement : CallFunction semicolon• «if»
	Statement : CallFunction semicolon• «imagetype»
	Statement : CallFunction semicolon• «inttype»
	Statement : CallFunction semicolon• «list»
	Statement : CallFunction semicolon• «print»
	Statement : CallFunction semicolon• «return»
	Statement : CallFunction semicolon• «squaretype»
	Statement : CallFunction semicolon• «stringtype»
	Statement : CallFunction semicolon• «texttype»
	Statement : CallFunction semicolon• «while»
}
Transitions:


S86{
	Assign : Attribute equals •Expression semicolon «rightbracket»
	Assign : Attribute equals •Expression semicolon «backgroundtype»
	Assign : Attribute equals •Expression semicolon «booltype»
	Assign : Attribute equals •Expression semicolon «chartype»
	Assign : Attribute equals •Expression semicolon «circletype»
	Assign : Attribute equals •Expression semicolon «floattype»
	Assign : Attribute equals •Expression semicolon «for»
	Assign : Attribute equals •Expression semicolon «id»
	Assign : Attribute equals •Expression semicolon «if»
	Assign : Attribute equals •Expression semicolon «imagetype»
	Assign : Attribute equals •Expression semicolon «inttype»
	Assign : Attribute equals •Expression semicolon «list»
	Assign : Attribute equals •Expression semicolon «print»
	Assign : Attribute equals •Expression semicolon «return»
	Assign : Attribute equals •Expression semicolon «squaretype»
	Assign : Attribute equals •Expression semicolon «stringtype»
	Assign : Attribute equals •Expression semicolon «texttype»
	Assign : Attribute equals •Expression semicolon «while»
	Expression : •Exp «semicolon»
	Expression : •Exp Operations Expression «semicolon»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Exp -> 93
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Expression -> 126


S87{
	Write : print leftparenthesis •Expression rightparenthesis semicolon «rightbracket»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «backgroundtype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «booltype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «chartype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «circletype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «floattype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «for»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «id»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «if»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «imagetype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «inttype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «list»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «print»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «return»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «squaretype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «stringtype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «texttype»
	Write : print leftparenthesis •Expression rightparenthesis semicolon «while»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Expression -> 130
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141


S88{
	Condition : if leftparenthesis •Expression rightparenthesis Block «rightbracket»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «rightbracket»
	Condition : if leftparenthesis •Expression rightparenthesis Block «backgroundtype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «backgroundtype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «booltype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «booltype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «chartype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «chartype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «circletype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «circletype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «floattype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «floattype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «for»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «for»
	Condition : if leftparenthesis •Expression rightparenthesis Block «id»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «id»
	Condition : if leftparenthesis •Expression rightparenthesis Block «if»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «if»
	Condition : if leftparenthesis •Expression rightparenthesis Block «imagetype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «imagetype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «inttype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «inttype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «list»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «list»
	Condition : if leftparenthesis •Expression rightparenthesis Block «print»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «print»
	Condition : if leftparenthesis •Expression rightparenthesis Block «return»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «return»
	Condition : if leftparenthesis •Expression rightparenthesis Block «squaretype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «squaretype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «stringtype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «stringtype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «texttype»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «texttype»
	Condition : if leftparenthesis •Expression rightparenthesis Block «while»
	Condition : if leftparenthesis •Expression rightparenthesis Block else Block «while»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 142


S89{
	Varcte : id• «semicolon»
	Varcte : id• «mult»
	Varcte : id• «div»
	Varcte : id• «plus»
	Varcte : id• «minus»
	Varcte : id• «logicalop»
	Varcte : id• «relop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : id •dot id «semicolon»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : id •leftparenthesis rightparenthesis «semicolon»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : id •dot id «mult»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : id •leftparenthesis rightparenthesis «mult»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «div»
	Attribute : id •dot id «div»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : id •leftparenthesis rightparenthesis «div»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : id •dot id «plus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : id •leftparenthesis rightparenthesis «plus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : id •dot id «minus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : id •leftparenthesis rightparenthesis «minus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : id •dot id «logicalop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id •leftparenthesis rightparenthesis «logicalop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : id •dot id «relop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : id •leftparenthesis rightparenthesis «relop»
}
Transitions:
	leftparenthesis -> 143
	leftsqrbracket -> 144
	dot -> 145


S90{
	Factor : leftparenthesis •Expression rightparenthesis «semicolon»
	Factor : leftparenthesis •Expression rightparenthesis «mult»
	Factor : leftparenthesis •Expression rightparenthesis «div»
	Factor : leftparenthesis •Expression rightparenthesis «plus»
	Factor : leftparenthesis •Expression rightparenthesis «minus»
	Factor : leftparenthesis •Expression rightparenthesis «logicalop»
	Factor : leftparenthesis •Expression rightparenthesis «relop»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 146


S91{
	Varcte : CallFunction• «semicolon»
	Varcte : CallFunction• «mult»
	Varcte : CallFunction• «div»
	Varcte : CallFunction• «plus»
	Varcte : CallFunction• «minus»
	Varcte : CallFunction• «logicalop»
	Varcte : CallFunction• «relop»
}
Transitions:


S92{
	Return : return Expression •semicolon «rightbracket»
	Return : return Expression •semicolon «backgroundtype»
	Return : return Expression •semicolon «booltype»
	Return : return Expression •semicolon «chartype»
	Return : return Expression •semicolon «circletype»
	Return : return Expression •semicolon «floattype»
	Return : return Expression •semicolon «for»
	Return : return Expression •semicolon «id»
	Return : return Expression •semicolon «if»
	Return : return Expression •semicolon «imagetype»
	Return : return Expression •semicolon «inttype»
	Return : return Expression •semicolon «list»
	Return : return Expression •semicolon «print»
	Return : return Expression •semicolon «return»
	Return : return Expression •semicolon «squaretype»
	Return : return Expression •semicolon «stringtype»
	Return : return Expression •semicolon «texttype»
	Return : return Expression •semicolon «while»
}
Transitions:
	semicolon -> 147


S93{
	Expression : Exp• «semicolon»
	Expression : Exp •Operations Expression «semicolon»
	Operations : •relop «ctebool»
	Operations : •relop «ctechar»
	Operations : •relop «ctefloat»
	Operations : •relop «cteint»
	Operations : •relop «ctestring»
	Operations : •relop «id»
	Operations : •relop «leftparenthesis»
	Operations : •logicalop «ctebool»
	Operations : •logicalop «ctechar»
	Operations : •logicalop «ctefloat»
	Operations : •logicalop «cteint»
	Operations : •logicalop «ctestring»
	Operations : •logicalop «id»
	Operations : •logicalop «leftparenthesis»
}
Transitions:
	Operations -> 148
	relop -> 149
	logicalop -> 150


S94{
	Exp : Term• «semicolon»
	Exp : Term •plus Exp «semicolon»
	Exp : Term •minus Exp «semicolon»
	Exp : Term• «logicalop»
	Exp : Term• «relop»
	Exp : Term •plus Exp «logicalop»
	Exp : Term •plus Exp «relop»
	Exp : Term •minus Exp «logicalop»
	Exp : Term •minus Exp «relop»
}
Transitions:
	plus -> 151
	minus -> 152


S95{
	Term : Factor• «semicolon»
	Term : Factor •mult Term «semicolon»
	Term : Factor •div Term «semicolon»
	Term : Factor• «plus»
	Term : Factor •mult Term «plus»
	Term : Factor •div Term «plus»
	Term : Factor• «minus»
	Term : Factor •mult Term «minus»
	Term : Factor •div Term «minus»
	Term : Factor• «logicalop»
	Term : Factor •mult Term «logicalop»
	Term : Factor •div Term «logicalop»
	Term : Factor• «relop»
	Term : Factor •mult Term «relop»
	Term : Factor •div Term «relop»
}
Transitions:
	mult -> 153
	div -> 154


S96{
	Factor : Varcte• «semicolon»
	Factor : Varcte• «mult»
	Factor : Varcte• «div»
	Factor : Varcte• «plus»
	Factor : Varcte• «minus»
	Factor : Varcte• «logicalop»
	Factor : Varcte• «relop»
}
Transitions:


S97{
	Varcte : Attribute• «semicolon»
	Varcte : Attribute• «mult»
	Varcte : Attribute• «div»
	Varcte : Attribute• «plus»
	Varcte : Attribute• «minus»
	Varcte : Attribute• «logicalop»
	Varcte : Attribute• «relop»
}
Transitions:


S98{
	Varcte : cteint• «semicolon»
	Varcte : cteint• «mult»
	Varcte : cteint• «div»
	Varcte : cteint• «plus»
	Varcte : cteint• «minus»
	Varcte : cteint• «logicalop»
	Varcte : cteint• «relop»
}
Transitions:


S99{
	Varcte : ctefloat• «semicolon»
	Varcte : ctefloat• «mult»
	Varcte : ctefloat• «div»
	Varcte : ctefloat• «plus»
	Varcte : ctefloat• «minus»
	Varcte : ctefloat• «logicalop»
	Varcte : ctefloat• «relop»
}
Transitions:


S100{
	Varcte : ctestring• «semicolon»
	Varcte : ctestring• «mult»
	Varcte : ctestring• «div»
	Varcte : ctestring• «plus»
	Varcte : ctestring• «minus»
	Varcte : ctestring• «logicalop»
	Varcte : ctestring• «relop»
}
Transitions:


S101{
	Varcte : ctechar• «semicolon»
	Varcte : ctechar• «mult»
	Varcte : ctechar• «div»
	Varcte : ctechar• «plus»
	Varcte : ctechar• «minus»
	Varcte : ctechar• «logicalop»
	Varcte : ctechar• «relop»
}
Transitions:


S102{
	Varcte : ctebool• «semicolon»
	Varcte : ctebool• «mult»
	Varcte : ctebool• «div»
	Varcte : ctebool• «plus»
	Varcte : ctebool• «minus»
	Varcte : ctebool• «logicalop»
	Varcte : ctebool• «relop»
}
Transitions:


S103{
	Varcte : ListElem• «semicolon»
	Varcte : ListElem• «mult»
	Varcte : ListElem• «div»
	Varcte : ListElem• «plus»
	Varcte : ListElem• «minus»
	Varcte : ListElem• «logicalop»
	Varcte : ListElem• «relop»
}
Transitions:


S104{
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «rightbracket»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «backgroundtype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «booltype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «chartype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «circletype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «floattype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «for»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «id»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «if»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «imagetype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «inttype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «list»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «print»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «return»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «squaretype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «stringtype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «texttype»
	For : for leftparenthesis •Assign Expression semicolon Expression rightparenthesis Block «while»
	Assign : •id equals Expression semicolon «ctebool»
	Assign : •id equals Expression semicolon «ctechar»
	Assign : •id equals Expression semicolon «ctefloat»
	Assign : •id equals Expression semicolon «cteint»
	Assign : •id equals Expression semicolon «ctestring»
	Assign : •id equals Expression semicolon «id»
	Assign : •id equals Expression semicolon «leftparenthesis»
	Assign : •Attribute equals Expression semicolon «ctebool»
	Assign : •Attribute equals Expression semicolon «ctechar»
	Assign : •Attribute equals Expression semicolon «ctefloat»
	Assign : •Attribute equals Expression semicolon «cteint»
	Assign : •Attribute equals Expression semicolon «ctestring»
	Assign : •Attribute equals Expression semicolon «id»
	Assign : •Attribute equals Expression semicolon «leftparenthesis»
	Attribute : •id dot id «equals»
}
Transitions:
	id -> 155
	Assign -> 156
	Attribute -> 157


S105{
	While : while leftparenthesis •Expression rightparenthesis Block «rightbracket»
	While : while leftparenthesis •Expression rightparenthesis Block «backgroundtype»
	While : while leftparenthesis •Expression rightparenthesis Block «booltype»
	While : while leftparenthesis •Expression rightparenthesis Block «chartype»
	While : while leftparenthesis •Expression rightparenthesis Block «circletype»
	While : while leftparenthesis •Expression rightparenthesis Block «floattype»
	While : while leftparenthesis •Expression rightparenthesis Block «for»
	While : while leftparenthesis •Expression rightparenthesis Block «id»
	While : while leftparenthesis •Expression rightparenthesis Block «if»
	While : while leftparenthesis •Expression rightparenthesis Block «imagetype»
	While : while leftparenthesis •Expression rightparenthesis Block «inttype»
	While : while leftparenthesis •Expression rightparenthesis Block «list»
	While : while leftparenthesis •Expression rightparenthesis Block «print»
	While : while leftparenthesis •Expression rightparenthesis Block «return»
	While : while leftparenthesis •Expression rightparenthesis Block «squaretype»
	While : while leftparenthesis •Expression rightparenthesis Block «stringtype»
	While : while leftparenthesis •Expression rightparenthesis Block «texttype»
	While : while leftparenthesis •Expression rightparenthesis Block «while»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 158


S106{
	Varcte : id• «rightparenthesis»
	Varcte : id• «mult»
	Varcte : id• «div»
	Varcte : id• «plus»
	Varcte : id• «minus»
	Varcte : id• «logicalop»
	Varcte : id• «relop»
	Varcte : id• «comma»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : id •dot id «rightparenthesis»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : id •leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : id •dot id «mult»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : id •leftparenthesis rightparenthesis «mult»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «div»
	Attribute : id •dot id «div»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : id •leftparenthesis rightparenthesis «div»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : id •dot id «plus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : id •leftparenthesis rightparenthesis «plus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : id •dot id «minus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : id •leftparenthesis rightparenthesis «minus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : id •dot id «logicalop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id •leftparenthesis rightparenthesis «logicalop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : id •dot id «relop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : id •leftparenthesis rightparenthesis «relop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : id •dot id «comma»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : id •leftparenthesis rightparenthesis «comma»
}
Transitions:
	leftparenthesis -> 159
	leftsqrbracket -> 160
	dot -> 161


S107{
	Factor : leftparenthesis •Expression rightparenthesis «rightparenthesis»
	Factor : leftparenthesis •Expression rightparenthesis «mult»
	Factor : leftparenthesis •Expression rightparenthesis «div»
	Factor : leftparenthesis •Expression rightparenthesis «plus»
	Factor : leftparenthesis •Expression rightparenthesis «minus»
	Factor : leftparenthesis •Expression rightparenthesis «logicalop»
	Factor : leftparenthesis •Expression rightparenthesis «relop»
	Factor : leftparenthesis •Expression rightparenthesis «comma»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 162


S108{
	CallFunction : id leftparenthesis rightparenthesis• «semicolon»
}
Transitions:


S109{
	Varcte : CallFunction• «rightparenthesis»
	Varcte : CallFunction• «mult»
	Varcte : CallFunction• «div»
	Varcte : CallFunction• «plus»
	Varcte : CallFunction• «minus»
	Varcte : CallFunction• «logicalop»
	Varcte : CallFunction• «relop»
	Varcte : CallFunction• «comma»
}
Transitions:


S110{
	CallFunctionAux : Expression• «rightparenthesis»
	CallFunctionAux : Expression •comma CallFunctionAux «rightparenthesis»
}
Transitions:
	comma -> 163


S111{
	Expression : Exp• «rightparenthesis»
	Expression : Exp •Operations Expression «rightparenthesis»
	Expression : Exp• «comma»
	Expression : Exp •Operations Expression «comma»
	Operations : •relop «ctebool»
	Operations : •relop «ctechar»
	Operations : •relop «ctefloat»
	Operations : •relop «cteint»
	Operations : •relop «ctestring»
	Operations : •relop «id»
	Operations : •relop «leftparenthesis»
	Operations : •logicalop «ctebool»
	Operations : •logicalop «ctechar»
	Operations : •logicalop «ctefloat»
	Operations : •logicalop «cteint»
	Operations : •logicalop «ctestring»
	Operations : •logicalop «id»
	Operations : •logicalop «leftparenthesis»
}
Transitions:
	relop -> 149
	logicalop -> 150
	Operations -> 164


S112{
	Exp : Term• «rightparenthesis»
	Exp : Term •plus Exp «rightparenthesis»
	Exp : Term •minus Exp «rightparenthesis»
	Exp : Term• «logicalop»
	Exp : Term• «relop»
	Exp : Term •plus Exp «logicalop»
	Exp : Term •plus Exp «relop»
	Exp : Term •minus Exp «logicalop»
	Exp : Term •minus Exp «relop»
	Exp : Term• «comma»
	Exp : Term •plus Exp «comma»
	Exp : Term •minus Exp «comma»
}
Transitions:
	plus -> 165
	minus -> 166


S113{
	Term : Factor• «rightparenthesis»
	Term : Factor •mult Term «rightparenthesis»
	Term : Factor •div Term «rightparenthesis»
	Term : Factor• «plus»
	Term : Factor •mult Term «plus»
	Term : Factor •div Term «plus»
	Term : Factor• «minus»
	Term : Factor •mult Term «minus»
	Term : Factor •div Term «minus»
	Term : Factor• «logicalop»
	Term : Factor •mult Term «logicalop»
	Term : Factor •div Term «logicalop»
	Term : Factor• «relop»
	Term : Factor •mult Term «relop»
	Term : Factor •div Term «relop»
	Term : Factor• «comma»
	Term : Factor •mult Term «comma»
	Term : Factor •div Term «comma»
}
Transitions:
	mult -> 167
	div -> 168


S114{
	Factor : Varcte• «rightparenthesis»
	Factor : Varcte• «mult»
	Factor : Varcte• «div»
	Factor : Varcte• «plus»
	Factor : Varcte• «minus»
	Factor : Varcte• «logicalop»
	Factor : Varcte• «relop»
	Factor : Varcte• «comma»
}
Transitions:


S115{
	Varcte : Attribute• «rightparenthesis»
	Varcte : Attribute• «mult»
	Varcte : Attribute• «div»
	Varcte : Attribute• «plus»
	Varcte : Attribute• «minus»
	Varcte : Attribute• «logicalop»
	Varcte : Attribute• «relop»
	Varcte : Attribute• «comma»
}
Transitions:


S116{
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «semicolon»
}
Transitions:
	rightparenthesis -> 169


S117{
	Varcte : cteint• «rightparenthesis»
	Varcte : cteint• «mult»
	Varcte : cteint• «div»
	Varcte : cteint• «plus»
	Varcte : cteint• «minus»
	Varcte : cteint• «logicalop»
	Varcte : cteint• «relop»
	Varcte : cteint• «comma»
}
Transitions:


S118{
	Varcte : ctefloat• «rightparenthesis»
	Varcte : ctefloat• «mult»
	Varcte : ctefloat• «div»
	Varcte : ctefloat• «plus»
	Varcte : ctefloat• «minus»
	Varcte : ctefloat• «logicalop»
	Varcte : ctefloat• «relop»
	Varcte : ctefloat• «comma»
}
Transitions:


S119{
	Varcte : ctestring• «rightparenthesis»
	Varcte : ctestring• «mult»
	Varcte : ctestring• «div»
	Varcte : ctestring• «plus»
	Varcte : ctestring• «minus»
	Varcte : ctestring• «logicalop»
	Varcte : ctestring• «relop»
	Varcte : ctestring• «comma»
}
Transitions:


S120{
	Varcte : ctechar• «rightparenthesis»
	Varcte : ctechar• «mult»
	Varcte : ctechar• «div»
	Varcte : ctechar• «plus»
	Varcte : ctechar• «minus»
	Varcte : ctechar• «logicalop»
	Varcte : ctechar• «relop»
	Varcte : ctechar• «comma»
}
Transitions:


S121{
	Varcte : ctebool• «rightparenthesis»
	Varcte : ctebool• «mult»
	Varcte : ctebool• «div»
	Varcte : ctebool• «plus»
	Varcte : ctebool• «minus»
	Varcte : ctebool• «logicalop»
	Varcte : ctebool• «relop»
	Varcte : ctebool• «comma»
}
Transitions:


S122{
	Varcte : ListElem• «rightparenthesis»
	Varcte : ListElem• «mult»
	Varcte : ListElem• «div»
	Varcte : ListElem• «plus»
	Varcte : ListElem• «minus»
	Varcte : ListElem• «logicalop»
	Varcte : ListElem• «relop»
	Varcte : ListElem• «comma»
}
Transitions:


S123{
	Assign : id equals Expression •semicolon «rightbracket»
	Assign : id equals Expression •semicolon «backgroundtype»
	Assign : id equals Expression •semicolon «booltype»
	Assign : id equals Expression •semicolon «chartype»
	Assign : id equals Expression •semicolon «circletype»
	Assign : id equals Expression •semicolon «floattype»
	Assign : id equals Expression •semicolon «for»
	Assign : id equals Expression •semicolon «id»
	Assign : id equals Expression •semicolon «if»
	Assign : id equals Expression •semicolon «imagetype»
	Assign : id equals Expression •semicolon «inttype»
	Assign : id equals Expression •semicolon «list»
	Assign : id equals Expression •semicolon «print»
	Assign : id equals Expression •semicolon «return»
	Assign : id equals Expression •semicolon «squaretype»
	Assign : id equals Expression •semicolon «stringtype»
	Assign : id equals Expression •semicolon «texttype»
	Assign : id equals Expression •semicolon «while»
}
Transitions:
	semicolon -> 170


S124{
	Attribute : id dot id• «equals»
}
Transitions:


S125{
	Vars : Type Ids semicolon •Vars «rightbracket»
	Vars : Type Ids semicolon• «rightbracket»
	Vars : Type Ids semicolon •Vars «backgroundtype»
	Vars : Type Ids semicolon• «backgroundtype»
	Vars : Type Ids semicolon •Vars «booltype»
	Vars : Type Ids semicolon• «booltype»
	Vars : Type Ids semicolon •Vars «chartype»
	Vars : Type Ids semicolon• «chartype»
	Vars : Type Ids semicolon •Vars «circletype»
	Vars : Type Ids semicolon• «circletype»
	Vars : Type Ids semicolon •Vars «floattype»
	Vars : Type Ids semicolon• «floattype»
	Vars : Type Ids semicolon •Vars «for»
	Vars : Type Ids semicolon• «for»
	Vars : Type Ids semicolon •Vars «id»
	Vars : Type Ids semicolon• «id»
	Vars : Type Ids semicolon •Vars «if»
	Vars : Type Ids semicolon• «if»
	Vars : Type Ids semicolon •Vars «imagetype»
	Vars : Type Ids semicolon• «imagetype»
	Vars : Type Ids semicolon •Vars «inttype»
	Vars : Type Ids semicolon• «inttype»
	Vars : Type Ids semicolon •Vars «list»
	Vars : Type Ids semicolon• «list»
	Vars : Type Ids semicolon •Vars «print»
	Vars : Type Ids semicolon• «print»
	Vars : Type Ids semicolon •Vars «return»
	Vars : Type Ids semicolon• «return»
	Vars : Type Ids semicolon •Vars «squaretype»
	Vars : Type Ids semicolon• «squaretype»
	Vars : Type Ids semicolon •Vars «stringtype»
	Vars : Type Ids semicolon• «stringtype»
	Vars : Type Ids semicolon •Vars «texttype»
	Vars : Type Ids semicolon• «texttype»
	Vars : Type Ids semicolon •Vars «while»
	Vars : Type Ids semicolon• «while»
	Vars : •Type Ids semicolon Vars «rightbracket»
	Vars : •Type Ids semicolon «rightbracket»
	Vars : •Type Ids semicolon Vars «backgroundtype»
	Vars : •Type Ids semicolon «backgroundtype»
	Vars : •Type Ids semicolon Vars «booltype»
	Vars : •Type Ids semicolon «booltype»
	Vars : •Type Ids semicolon Vars «chartype»
	Vars : •Type Ids semicolon «chartype»
	Vars : •Type Ids semicolon Vars «circletype»
	Vars : •Type Ids semicolon «circletype»
	Vars : •Type Ids semicolon Vars «floattype»
	Vars : •Type Ids semicolon «floattype»
	Vars : •Type Ids semicolon Vars «for»
	Vars : •Type Ids semicolon «for»
	Vars : •Type Ids semicolon Vars «id»
	Vars : •Type Ids semicolon «id»
	Vars : •Type Ids semicolon Vars «if»
	Vars : •Type Ids semicolon «if»
	Vars : •Type Ids semicolon Vars «imagetype»
	Vars : •Type Ids semicolon «imagetype»
	Vars : •Type Ids semicolon Vars «inttype»
	Vars : •Type Ids semicolon «inttype»
	Vars : •Type Ids semicolon Vars «list»
	Vars : •Type Ids semicolon «list»
	Vars : •Type Ids semicolon Vars «print»
	Vars : •Type Ids semicolon «print»
	Vars : •Type Ids semicolon Vars «return»
	Vars : •Type Ids semicolon «return»
	Vars : •Type Ids semicolon Vars «squaretype»
	Vars : •Type Ids semicolon «squaretype»
	Vars : •Type Ids semicolon Vars «stringtype»
	Vars : •Type Ids semicolon «stringtype»
	Vars : •Type Ids semicolon Vars «texttype»
	Vars : •Type Ids semicolon «texttype»
	Vars : •Type Ids semicolon Vars «while»
	Vars : •Type Ids semicolon «while»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	Type -> 61
	Vars -> 171


S126{
	Assign : Attribute equals Expression •semicolon «rightbracket»
	Assign : Attribute equals Expression •semicolon «backgroundtype»
	Assign : Attribute equals Expression •semicolon «booltype»
	Assign : Attribute equals Expression •semicolon «chartype»
	Assign : Attribute equals Expression •semicolon «circletype»
	Assign : Attribute equals Expression •semicolon «floattype»
	Assign : Attribute equals Expression •semicolon «for»
	Assign : Attribute equals Expression •semicolon «id»
	Assign : Attribute equals Expression •semicolon «if»
	Assign : Attribute equals Expression •semicolon «imagetype»
	Assign : Attribute equals Expression •semicolon «inttype»
	Assign : Attribute equals Expression •semicolon «list»
	Assign : Attribute equals Expression •semicolon «print»
	Assign : Attribute equals Expression •semicolon «return»
	Assign : Attribute equals Expression •semicolon «squaretype»
	Assign : Attribute equals Expression •semicolon «stringtype»
	Assign : Attribute equals Expression •semicolon «texttype»
	Assign : Attribute equals Expression •semicolon «while»
}
Transitions:
	semicolon -> 172


S127{
	Varcte : id• «rightparenthesis»
	Varcte : id• «mult»
	Varcte : id• «div»
	Varcte : id• «plus»
	Varcte : id• «minus»
	Varcte : id• «logicalop»
	Varcte : id• «relop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : id •dot id «rightparenthesis»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : id •leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : id •dot id «mult»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : id •leftparenthesis rightparenthesis «mult»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «div»
	Attribute : id •dot id «div»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : id •leftparenthesis rightparenthesis «div»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : id •dot id «plus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : id •leftparenthesis rightparenthesis «plus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : id •dot id «minus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : id •leftparenthesis rightparenthesis «minus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : id •dot id «logicalop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id •leftparenthesis rightparenthesis «logicalop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : id •dot id «relop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : id •leftparenthesis rightparenthesis «relop»
}
Transitions:
	leftparenthesis -> 173
	leftsqrbracket -> 174
	dot -> 175


S128{
	Factor : leftparenthesis •Expression rightparenthesis «rightparenthesis»
	Factor : leftparenthesis •Expression rightparenthesis «mult»
	Factor : leftparenthesis •Expression rightparenthesis «div»
	Factor : leftparenthesis •Expression rightparenthesis «plus»
	Factor : leftparenthesis •Expression rightparenthesis «minus»
	Factor : leftparenthesis •Expression rightparenthesis «logicalop»
	Factor : leftparenthesis •Expression rightparenthesis «relop»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 176


S129{
	Varcte : CallFunction• «rightparenthesis»
	Varcte : CallFunction• «mult»
	Varcte : CallFunction• «div»
	Varcte : CallFunction• «plus»
	Varcte : CallFunction• «minus»
	Varcte : CallFunction• «logicalop»
	Varcte : CallFunction• «relop»
}
Transitions:


S130{
	Write : print leftparenthesis Expression •rightparenthesis semicolon «rightbracket»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «backgroundtype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «booltype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «chartype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «circletype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «floattype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «for»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «id»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «if»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «imagetype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «inttype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «list»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «print»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «return»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «squaretype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «stringtype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «texttype»
	Write : print leftparenthesis Expression •rightparenthesis semicolon «while»
}
Transitions:
	rightparenthesis -> 177


S131{
	Expression : Exp• «rightparenthesis»
	Expression : Exp •Operations Expression «rightparenthesis»
	Operations : •relop «ctebool»
	Operations : •relop «ctechar»
	Operations : •relop «ctefloat»
	Operations : •relop «cteint»
	Operations : •relop «ctestring»
	Operations : •relop «id»
	Operations : •relop «leftparenthesis»
	Operations : •logicalop «ctebool»
	Operations : •logicalop «ctechar»
	Operations : •logicalop «ctefloat»
	Operations : •logicalop «cteint»
	Operations : •logicalop «ctestring»
	Operations : •logicalop «id»
	Operations : •logicalop «leftparenthesis»
}
Transitions:
	relop -> 149
	logicalop -> 150
	Operations -> 178


S132{
	Exp : Term• «rightparenthesis»
	Exp : Term •plus Exp «rightparenthesis»
	Exp : Term •minus Exp «rightparenthesis»
	Exp : Term• «logicalop»
	Exp : Term• «relop»
	Exp : Term •plus Exp «logicalop»
	Exp : Term •plus Exp «relop»
	Exp : Term •minus Exp «logicalop»
	Exp : Term •minus Exp «relop»
}
Transitions:
	plus -> 179
	minus -> 180


S133{
	Term : Factor• «rightparenthesis»
	Term : Factor •mult Term «rightparenthesis»
	Term : Factor •div Term «rightparenthesis»
	Term : Factor• «plus»
	Term : Factor •mult Term «plus»
	Term : Factor •div Term «plus»
	Term : Factor• «minus»
	Term : Factor •mult Term «minus»
	Term : Factor •div Term «minus»
	Term : Factor• «logicalop»
	Term : Factor •mult Term «logicalop»
	Term : Factor •div Term «logicalop»
	Term : Factor• «relop»
	Term : Factor •mult Term «relop»
	Term : Factor •div Term «relop»
}
Transitions:
	mult -> 181
	div -> 182


S134{
	Factor : Varcte• «rightparenthesis»
	Factor : Varcte• «mult»
	Factor : Varcte• «div»
	Factor : Varcte• «plus»
	Factor : Varcte• «minus»
	Factor : Varcte• «logicalop»
	Factor : Varcte• «relop»
}
Transitions:


S135{
	Varcte : Attribute• «rightparenthesis»
	Varcte : Attribute• «mult»
	Varcte : Attribute• «div»
	Varcte : Attribute• «plus»
	Varcte : Attribute• «minus»
	Varcte : Attribute• «logicalop»
	Varcte : Attribute• «relop»
}
Transitions:


S136{
	Varcte : cteint• «rightparenthesis»
	Varcte : cteint• «mult»
	Varcte : cteint• «div»
	Varcte : cteint• «plus»
	Varcte : cteint• «minus»
	Varcte : cteint• «logicalop»
	Varcte : cteint• «relop»
}
Transitions:


S137{
	Varcte : ctefloat• «rightparenthesis»
	Varcte : ctefloat• «mult»
	Varcte : ctefloat• «div»
	Varcte : ctefloat• «plus»
	Varcte : ctefloat• «minus»
	Varcte : ctefloat• «logicalop»
	Varcte : ctefloat• «relop»
}
Transitions:


S138{
	Varcte : ctestring• «rightparenthesis»
	Varcte : ctestring• «mult»
	Varcte : ctestring• «div»
	Varcte : ctestring• «plus»
	Varcte : ctestring• «minus»
	Varcte : ctestring• «logicalop»
	Varcte : ctestring• «relop»
}
Transitions:


S139{
	Varcte : ctechar• «rightparenthesis»
	Varcte : ctechar• «mult»
	Varcte : ctechar• «div»
	Varcte : ctechar• «plus»
	Varcte : ctechar• «minus»
	Varcte : ctechar• «logicalop»
	Varcte : ctechar• «relop»
}
Transitions:


S140{
	Varcte : ctebool• «rightparenthesis»
	Varcte : ctebool• «mult»
	Varcte : ctebool• «div»
	Varcte : ctebool• «plus»
	Varcte : ctebool• «minus»
	Varcte : ctebool• «logicalop»
	Varcte : ctebool• «relop»
}
Transitions:


S141{
	Varcte : ListElem• «rightparenthesis»
	Varcte : ListElem• «mult»
	Varcte : ListElem• «div»
	Varcte : ListElem• «plus»
	Varcte : ListElem• «minus»
	Varcte : ListElem• «logicalop»
	Varcte : ListElem• «relop»
}
Transitions:


S142{
	Condition : if leftparenthesis Expression •rightparenthesis Block «rightbracket»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «rightbracket»
	Condition : if leftparenthesis Expression •rightparenthesis Block «backgroundtype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «backgroundtype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «booltype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «booltype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «chartype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «chartype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «circletype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «circletype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «floattype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «floattype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «for»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «for»
	Condition : if leftparenthesis Expression •rightparenthesis Block «id»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «id»
	Condition : if leftparenthesis Expression •rightparenthesis Block «if»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «if»
	Condition : if leftparenthesis Expression •rightparenthesis Block «imagetype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «imagetype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «inttype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «inttype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «list»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «list»
	Condition : if leftparenthesis Expression •rightparenthesis Block «print»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «print»
	Condition : if leftparenthesis Expression •rightparenthesis Block «return»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «return»
	Condition : if leftparenthesis Expression •rightparenthesis Block «squaretype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «squaretype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «stringtype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «stringtype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «texttype»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «texttype»
	Condition : if leftparenthesis Expression •rightparenthesis Block «while»
	Condition : if leftparenthesis Expression •rightparenthesis Block else Block «while»
}
Transitions:
	rightparenthesis -> 183


S143{
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «semicolon»
	CallFunction : id leftparenthesis •rightparenthesis «semicolon»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «mult»
	CallFunction : id leftparenthesis •rightparenthesis «mult»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «div»
	CallFunction : id leftparenthesis •rightparenthesis «div»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «plus»
	CallFunction : id leftparenthesis •rightparenthesis «plus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «minus»
	CallFunction : id leftparenthesis •rightparenthesis «minus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «relop»
	CallFunction : id leftparenthesis •rightparenthesis «relop»
	CallFunctionAux : •Expression «rightparenthesis»
	CallFunctionAux : •Expression comma CallFunctionAux «rightparenthesis»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Expression : •Exp «comma»
	Expression : •Exp Operations Expression «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Expression -> 110
	Exp -> 111
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	rightparenthesis -> 184
	CallFunctionAux -> 185


S144{
	ListElem : id leftsqrbracket •Expression rightsqrbracket «semicolon»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «mult»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «div»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «plus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «minus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «relop»
	Expression : •Exp «rightsqrbracket»
	Expression : •Exp Operations Expression «rightsqrbracket»
	Exp : •Term «rightsqrbracket»
	Exp : •Term plus Exp «rightsqrbracket»
	Exp : •Term minus Exp «rightsqrbracket»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Expression -> 189
	Exp -> 190
	Term -> 191
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200


S145{
	Attribute : id dot •id «semicolon»
	Attribute : id dot •id «mult»
	Attribute : id dot •id «div»
	Attribute : id dot •id «plus»
	Attribute : id dot •id «minus»
	Attribute : id dot •id «logicalop»
	Attribute : id dot •id «relop»
}
Transitions:
	id -> 201


S146{
	Factor : leftparenthesis Expression •rightparenthesis «semicolon»
	Factor : leftparenthesis Expression •rightparenthesis «mult»
	Factor : leftparenthesis Expression •rightparenthesis «div»
	Factor : leftparenthesis Expression •rightparenthesis «plus»
	Factor : leftparenthesis Expression •rightparenthesis «minus»
	Factor : leftparenthesis Expression •rightparenthesis «logicalop»
	Factor : leftparenthesis Expression •rightparenthesis «relop»
}
Transitions:
	rightparenthesis -> 202


S147{
	Return : return Expression semicolon• «rightbracket»
	Return : return Expression semicolon• «backgroundtype»
	Return : return Expression semicolon• «booltype»
	Return : return Expression semicolon• «chartype»
	Return : return Expression semicolon• «circletype»
	Return : return Expression semicolon• «floattype»
	Return : return Expression semicolon• «for»
	Return : return Expression semicolon• «id»
	Return : return Expression semicolon• «if»
	Return : return Expression semicolon• «imagetype»
	Return : return Expression semicolon• «inttype»
	Return : return Expression semicolon• «list»
	Return : return Expression semicolon• «print»
	Return : return Expression semicolon• «return»
	Return : return Expression semicolon• «squaretype»
	Return : return Expression semicolon• «stringtype»
	Return : return Expression semicolon• «texttype»
	Return : return Expression semicolon• «while»
}
Transitions:


S148{
	Expression : Exp Operations •Expression «semicolon»
	Expression : •Exp «semicolon»
	Expression : •Exp Operations Expression «semicolon»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Exp -> 93
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Expression -> 203


S149{
	Operations : relop• «ctebool»
	Operations : relop• «ctechar»
	Operations : relop• «ctefloat»
	Operations : relop• «cteint»
	Operations : relop• «ctestring»
	Operations : relop• «id»
	Operations : relop• «leftparenthesis»
}
Transitions:


S150{
	Operations : logicalop• «ctebool»
	Operations : logicalop• «ctechar»
	Operations : logicalop• «ctefloat»
	Operations : logicalop• «cteint»
	Operations : logicalop• «ctestring»
	Operations : logicalop• «id»
	Operations : logicalop• «leftparenthesis»
}
Transitions:


S151{
	Exp : Term plus •Exp «semicolon»
	Exp : Term plus •Exp «logicalop»
	Exp : Term plus •Exp «relop»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Exp -> 204


S152{
	Exp : Term minus •Exp «semicolon»
	Exp : Term minus •Exp «logicalop»
	Exp : Term minus •Exp «relop»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Exp -> 205


S153{
	Term : Factor mult •Term «semicolon»
	Term : Factor mult •Term «plus»
	Term : Factor mult •Term «minus»
	Term : Factor mult •Term «logicalop»
	Term : Factor mult •Term «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Term -> 206


S154{
	Term : Factor div •Term «semicolon»
	Term : Factor div •Term «plus»
	Term : Factor div •Term «minus»
	Term : Factor div •Term «logicalop»
	Term : Factor div •Term «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Term -> 207


S155{
	Assign : id •equals Expression semicolon «ctebool»
	Assign : id •equals Expression semicolon «ctechar»
	Assign : id •equals Expression semicolon «ctefloat»
	Assign : id •equals Expression semicolon «cteint»
	Assign : id •equals Expression semicolon «ctestring»
	Assign : id •equals Expression semicolon «id»
	Assign : id •equals Expression semicolon «leftparenthesis»
	Attribute : id •dot id «equals»
}
Transitions:
	dot -> 81
	equals -> 208


S156{
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «rightbracket»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «backgroundtype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «booltype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «chartype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «circletype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «floattype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «for»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «id»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «if»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «imagetype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «inttype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «list»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «print»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «return»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «squaretype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «stringtype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «texttype»
	For : for leftparenthesis Assign •Expression semicolon Expression rightparenthesis Block «while»
	Expression : •Exp «semicolon»
	Expression : •Exp Operations Expression «semicolon»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Exp -> 93
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Expression -> 209


S157{
	Assign : Attribute •equals Expression semicolon «ctebool»
	Assign : Attribute •equals Expression semicolon «ctechar»
	Assign : Attribute •equals Expression semicolon «ctefloat»
	Assign : Attribute •equals Expression semicolon «cteint»
	Assign : Attribute •equals Expression semicolon «ctestring»
	Assign : Attribute •equals Expression semicolon «id»
	Assign : Attribute •equals Expression semicolon «leftparenthesis»
}
Transitions:
	equals -> 210


S158{
	While : while leftparenthesis Expression •rightparenthesis Block «rightbracket»
	While : while leftparenthesis Expression •rightparenthesis Block «backgroundtype»
	While : while leftparenthesis Expression •rightparenthesis Block «booltype»
	While : while leftparenthesis Expression •rightparenthesis Block «chartype»
	While : while leftparenthesis Expression •rightparenthesis Block «circletype»
	While : while leftparenthesis Expression •rightparenthesis Block «floattype»
	While : while leftparenthesis Expression •rightparenthesis Block «for»
	While : while leftparenthesis Expression •rightparenthesis Block «id»
	While : while leftparenthesis Expression •rightparenthesis Block «if»
	While : while leftparenthesis Expression •rightparenthesis Block «imagetype»
	While : while leftparenthesis Expression •rightparenthesis Block «inttype»
	While : while leftparenthesis Expression •rightparenthesis Block «list»
	While : while leftparenthesis Expression •rightparenthesis Block «print»
	While : while leftparenthesis Expression •rightparenthesis Block «return»
	While : while leftparenthesis Expression •rightparenthesis Block «squaretype»
	While : while leftparenthesis Expression •rightparenthesis Block «stringtype»
	While : while leftparenthesis Expression •rightparenthesis Block «texttype»
	While : while leftparenthesis Expression •rightparenthesis Block «while»
}
Transitions:
	rightparenthesis -> 211


S159{
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : id leftparenthesis •rightparenthesis «rightparenthesis»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «mult»
	CallFunction : id leftparenthesis •rightparenthesis «mult»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «div»
	CallFunction : id leftparenthesis •rightparenthesis «div»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «plus»
	CallFunction : id leftparenthesis •rightparenthesis «plus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «minus»
	CallFunction : id leftparenthesis •rightparenthesis «minus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «relop»
	CallFunction : id leftparenthesis •rightparenthesis «relop»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «comma»
	CallFunction : id leftparenthesis •rightparenthesis «comma»
	CallFunctionAux : •Expression «rightparenthesis»
	CallFunctionAux : •Expression comma CallFunctionAux «rightparenthesis»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Expression : •Exp «comma»
	Expression : •Exp Operations Expression «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Expression -> 110
	Exp -> 111
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	rightparenthesis -> 212
	CallFunctionAux -> 213


S160{
	ListElem : id leftsqrbracket •Expression rightsqrbracket «rightparenthesis»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «mult»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «div»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «plus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «minus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «relop»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «comma»
	Expression : •Exp «rightsqrbracket»
	Expression : •Exp Operations Expression «rightsqrbracket»
	Exp : •Term «rightsqrbracket»
	Exp : •Term plus Exp «rightsqrbracket»
	Exp : •Term minus Exp «rightsqrbracket»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Exp -> 190
	Term -> 191
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Expression -> 214


S161{
	Attribute : id dot •id «rightparenthesis»
	Attribute : id dot •id «mult»
	Attribute : id dot •id «div»
	Attribute : id dot •id «plus»
	Attribute : id dot •id «minus»
	Attribute : id dot •id «logicalop»
	Attribute : id dot •id «relop»
	Attribute : id dot •id «comma»
}
Transitions:
	id -> 215


S162{
	Factor : leftparenthesis Expression •rightparenthesis «rightparenthesis»
	Factor : leftparenthesis Expression •rightparenthesis «mult»
	Factor : leftparenthesis Expression •rightparenthesis «div»
	Factor : leftparenthesis Expression •rightparenthesis «plus»
	Factor : leftparenthesis Expression •rightparenthesis «minus»
	Factor : leftparenthesis Expression •rightparenthesis «logicalop»
	Factor : leftparenthesis Expression •rightparenthesis «relop»
	Factor : leftparenthesis Expression •rightparenthesis «comma»
}
Transitions:
	rightparenthesis -> 216


S163{
	CallFunctionAux : Expression comma •CallFunctionAux «rightparenthesis»
	CallFunctionAux : •Expression «rightparenthesis»
	CallFunctionAux : •Expression comma CallFunctionAux «rightparenthesis»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Expression : •Exp «comma»
	Expression : •Exp Operations Expression «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Expression -> 110
	Exp -> 111
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	CallFunctionAux -> 217


S164{
	Expression : Exp Operations •Expression «rightparenthesis»
	Expression : Exp Operations •Expression «comma»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Expression : •Exp «comma»
	Expression : •Exp Operations Expression «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Exp -> 111
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	Expression -> 218


S165{
	Exp : Term plus •Exp «rightparenthesis»
	Exp : Term plus •Exp «logicalop»
	Exp : Term plus •Exp «relop»
	Exp : Term plus •Exp «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	Exp -> 219


S166{
	Exp : Term minus •Exp «rightparenthesis»
	Exp : Term minus •Exp «logicalop»
	Exp : Term minus •Exp «relop»
	Exp : Term minus •Exp «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	Exp -> 220


S167{
	Term : Factor mult •Term «rightparenthesis»
	Term : Factor mult •Term «plus»
	Term : Factor mult •Term «minus»
	Term : Factor mult •Term «logicalop»
	Term : Factor mult •Term «relop»
	Term : Factor mult •Term «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	Term -> 221


S168{
	Term : Factor div •Term «rightparenthesis»
	Term : Factor div •Term «plus»
	Term : Factor div •Term «minus»
	Term : Factor div •Term «logicalop»
	Term : Factor div •Term «relop»
	Term : Factor div •Term «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	Term -> 222


S169{
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «semicolon»
}
Transitions:


S170{
	Assign : id equals Expression semicolon• «rightbracket»
	Assign : id equals Expression semicolon• «backgroundtype»
	Assign : id equals Expression semicolon• «booltype»
	Assign : id equals Expression semicolon• «chartype»
	Assign : id equals Expression semicolon• «circletype»
	Assign : id equals Expression semicolon• «floattype»
	Assign : id equals Expression semicolon• «for»
	Assign : id equals Expression semicolon• «id»
	Assign : id equals Expression semicolon• «if»
	Assign : id equals Expression semicolon• «imagetype»
	Assign : id equals Expression semicolon• «inttype»
	Assign : id equals Expression semicolon• «list»
	Assign : id equals Expression semicolon• «print»
	Assign : id equals Expression semicolon• «return»
	Assign : id equals Expression semicolon• «squaretype»
	Assign : id equals Expression semicolon• «stringtype»
	Assign : id equals Expression semicolon• «texttype»
	Assign : id equals Expression semicolon• «while»
}
Transitions:


S171{
	Vars : Type Ids semicolon Vars• «rightbracket»
	Vars : Type Ids semicolon Vars• «backgroundtype»
	Vars : Type Ids semicolon Vars• «booltype»
	Vars : Type Ids semicolon Vars• «chartype»
	Vars : Type Ids semicolon Vars• «circletype»
	Vars : Type Ids semicolon Vars• «floattype»
	Vars : Type Ids semicolon Vars• «for»
	Vars : Type Ids semicolon Vars• «id»
	Vars : Type Ids semicolon Vars• «if»
	Vars : Type Ids semicolon Vars• «imagetype»
	Vars : Type Ids semicolon Vars• «inttype»
	Vars : Type Ids semicolon Vars• «list»
	Vars : Type Ids semicolon Vars• «print»
	Vars : Type Ids semicolon Vars• «return»
	Vars : Type Ids semicolon Vars• «squaretype»
	Vars : Type Ids semicolon Vars• «stringtype»
	Vars : Type Ids semicolon Vars• «texttype»
	Vars : Type Ids semicolon Vars• «while»
}
Transitions:


S172{
	Assign : Attribute equals Expression semicolon• «rightbracket»
	Assign : Attribute equals Expression semicolon• «backgroundtype»
	Assign : Attribute equals Expression semicolon• «booltype»
	Assign : Attribute equals Expression semicolon• «chartype»
	Assign : Attribute equals Expression semicolon• «circletype»
	Assign : Attribute equals Expression semicolon• «floattype»
	Assign : Attribute equals Expression semicolon• «for»
	Assign : Attribute equals Expression semicolon• «id»
	Assign : Attribute equals Expression semicolon• «if»
	Assign : Attribute equals Expression semicolon• «imagetype»
	Assign : Attribute equals Expression semicolon• «inttype»
	Assign : Attribute equals Expression semicolon• «list»
	Assign : Attribute equals Expression semicolon• «print»
	Assign : Attribute equals Expression semicolon• «return»
	Assign : Attribute equals Expression semicolon• «squaretype»
	Assign : Attribute equals Expression semicolon• «stringtype»
	Assign : Attribute equals Expression semicolon• «texttype»
	Assign : Attribute equals Expression semicolon• «while»
}
Transitions:


S173{
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : id leftparenthesis •rightparenthesis «rightparenthesis»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «mult»
	CallFunction : id leftparenthesis •rightparenthesis «mult»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «div»
	CallFunction : id leftparenthesis •rightparenthesis «div»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «plus»
	CallFunction : id leftparenthesis •rightparenthesis «plus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «minus»
	CallFunction : id leftparenthesis •rightparenthesis «minus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «relop»
	CallFunction : id leftparenthesis •rightparenthesis «relop»
	CallFunctionAux : •Expression «rightparenthesis»
	CallFunctionAux : •Expression comma CallFunctionAux «rightparenthesis»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Expression : •Exp «comma»
	Expression : •Exp Operations Expression «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Expression -> 110
	Exp -> 111
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	rightparenthesis -> 223
	CallFunctionAux -> 224


S174{
	ListElem : id leftsqrbracket •Expression rightsqrbracket «rightparenthesis»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «mult»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «div»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «plus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «minus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «relop»
	Expression : •Exp «rightsqrbracket»
	Expression : •Exp Operations Expression «rightsqrbracket»
	Exp : •Term «rightsqrbracket»
	Exp : •Term plus Exp «rightsqrbracket»
	Exp : •Term minus Exp «rightsqrbracket»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Exp -> 190
	Term -> 191
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Expression -> 225


S175{
	Attribute : id dot •id «rightparenthesis»
	Attribute : id dot •id «mult»
	Attribute : id dot •id «div»
	Attribute : id dot •id «plus»
	Attribute : id dot •id «minus»
	Attribute : id dot •id «logicalop»
	Attribute : id dot •id «relop»
}
Transitions:
	id -> 226


S176{
	Factor : leftparenthesis Expression •rightparenthesis «rightparenthesis»
	Factor : leftparenthesis Expression •rightparenthesis «mult»
	Factor : leftparenthesis Expression •rightparenthesis «div»
	Factor : leftparenthesis Expression •rightparenthesis «plus»
	Factor : leftparenthesis Expression •rightparenthesis «minus»
	Factor : leftparenthesis Expression •rightparenthesis «logicalop»
	Factor : leftparenthesis Expression •rightparenthesis «relop»
}
Transitions:
	rightparenthesis -> 227


S177{
	Write : print leftparenthesis Expression rightparenthesis •semicolon «rightbracket»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «backgroundtype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «booltype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «chartype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «circletype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «floattype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «for»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «id»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «if»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «imagetype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «inttype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «list»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «print»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «return»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «squaretype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «stringtype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «texttype»
	Write : print leftparenthesis Expression rightparenthesis •semicolon «while»
}
Transitions:
	semicolon -> 228


S178{
	Expression : Exp Operations •Expression «rightparenthesis»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 229


S179{
	Exp : Term plus •Exp «rightparenthesis»
	Exp : Term plus •Exp «logicalop»
	Exp : Term plus •Exp «relop»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Exp -> 230


S180{
	Exp : Term minus •Exp «rightparenthesis»
	Exp : Term minus •Exp «logicalop»
	Exp : Term minus •Exp «relop»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Exp -> 231


S181{
	Term : Factor mult •Term «rightparenthesis»
	Term : Factor mult •Term «plus»
	Term : Factor mult •Term «minus»
	Term : Factor mult •Term «logicalop»
	Term : Factor mult •Term «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Term -> 232


S182{
	Term : Factor div •Term «rightparenthesis»
	Term : Factor div •Term «plus»
	Term : Factor div •Term «minus»
	Term : Factor div •Term «logicalop»
	Term : Factor div •Term «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Term -> 233


S183{
	Condition : if leftparenthesis Expression rightparenthesis •Block «rightbracket»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «rightbracket»
	Condition : if leftparenthesis Expression rightparenthesis •Block «backgroundtype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «backgroundtype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «booltype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «booltype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «chartype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «chartype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «circletype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «circletype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «floattype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «floattype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «for»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «for»
	Condition : if leftparenthesis Expression rightparenthesis •Block «id»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «id»
	Condition : if leftparenthesis Expression rightparenthesis •Block «if»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «if»
	Condition : if leftparenthesis Expression rightparenthesis •Block «imagetype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «imagetype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «inttype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «inttype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «list»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «list»
	Condition : if leftparenthesis Expression rightparenthesis •Block «print»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «print»
	Condition : if leftparenthesis Expression rightparenthesis •Block «return»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «return»
	Condition : if leftparenthesis Expression rightparenthesis •Block «squaretype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «squaretype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «stringtype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «stringtype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «texttype»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «texttype»
	Condition : if leftparenthesis Expression rightparenthesis •Block «while»
	Condition : if leftparenthesis Expression rightparenthesis •Block else Block «while»
	Block : •leftbracket BlockAux rightbracket «rightbracket»
	Block : •leftbracket rightbracket «rightbracket»
	Block : •leftbracket BlockAux rightbracket «else»
	Block : •leftbracket rightbracket «else»
	Block : •leftbracket BlockAux rightbracket «backgroundtype»
	Block : •leftbracket rightbracket «backgroundtype»
	Block : •leftbracket BlockAux rightbracket «booltype»
	Block : •leftbracket rightbracket «booltype»
	Block : •leftbracket BlockAux rightbracket «chartype»
	Block : •leftbracket rightbracket «chartype»
	Block : •leftbracket BlockAux rightbracket «circletype»
	Block : •leftbracket rightbracket «circletype»
	Block : •leftbracket BlockAux rightbracket «floattype»
	Block : •leftbracket rightbracket «floattype»
	Block : •leftbracket BlockAux rightbracket «for»
	Block : •leftbracket rightbracket «for»
	Block : •leftbracket BlockAux rightbracket «id»
	Block : •leftbracket rightbracket «id»
	Block : •leftbracket BlockAux rightbracket «if»
	Block : •leftbracket rightbracket «if»
	Block : •leftbracket BlockAux rightbracket «imagetype»
	Block : •leftbracket rightbracket «imagetype»
	Block : •leftbracket BlockAux rightbracket «inttype»
	Block : •leftbracket rightbracket «inttype»
	Block : •leftbracket BlockAux rightbracket «list»
	Block : •leftbracket rightbracket «list»
	Block : •leftbracket BlockAux rightbracket «print»
	Block : •leftbracket rightbracket «print»
	Block : •leftbracket BlockAux rightbracket «return»
	Block : •leftbracket rightbracket «return»
	Block : •leftbracket BlockAux rightbracket «squaretype»
	Block : •leftbracket rightbracket «squaretype»
	Block : •leftbracket BlockAux rightbracket «stringtype»
	Block : •leftbracket rightbracket «stringtype»
	Block : •leftbracket BlockAux rightbracket «texttype»
	Block : •leftbracket rightbracket «texttype»
	Block : •leftbracket BlockAux rightbracket «while»
	Block : •leftbracket rightbracket «while»
}
Transitions:
	leftbracket -> 234
	Block -> 235


S184{
	CallFunction : id leftparenthesis rightparenthesis• «semicolon»
	CallFunction : id leftparenthesis rightparenthesis• «mult»
	CallFunction : id leftparenthesis rightparenthesis• «div»
	CallFunction : id leftparenthesis rightparenthesis• «plus»
	CallFunction : id leftparenthesis rightparenthesis• «minus»
	CallFunction : id leftparenthesis rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis rightparenthesis• «relop»
}
Transitions:


S185{
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «semicolon»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «mult»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «div»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «plus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «minus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «relop»
}
Transitions:
	rightparenthesis -> 236


S186{
	Varcte : id• «rightsqrbracket»
	Varcte : id• «mult»
	Varcte : id• «div»
	Varcte : id• «plus»
	Varcte : id• «minus»
	Varcte : id• «logicalop»
	Varcte : id• «relop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : id •dot id «rightsqrbracket»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : id •leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : id •dot id «mult»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : id •leftparenthesis rightparenthesis «mult»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «div»
	Attribute : id •dot id «div»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : id •leftparenthesis rightparenthesis «div»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : id •dot id «plus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : id •leftparenthesis rightparenthesis «plus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : id •dot id «minus»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : id •leftparenthesis rightparenthesis «minus»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : id •dot id «logicalop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id •leftparenthesis rightparenthesis «logicalop»
	ListElem : id •leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : id •dot id «relop»
	CallFunction : id •leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : id •leftparenthesis rightparenthesis «relop»
}
Transitions:
	leftparenthesis -> 237
	leftsqrbracket -> 238
	dot -> 239


S187{
	Factor : leftparenthesis •Expression rightparenthesis «rightsqrbracket»
	Factor : leftparenthesis •Expression rightparenthesis «mult»
	Factor : leftparenthesis •Expression rightparenthesis «div»
	Factor : leftparenthesis •Expression rightparenthesis «plus»
	Factor : leftparenthesis •Expression rightparenthesis «minus»
	Factor : leftparenthesis •Expression rightparenthesis «logicalop»
	Factor : leftparenthesis •Expression rightparenthesis «relop»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 240


S188{
	Varcte : CallFunction• «rightsqrbracket»
	Varcte : CallFunction• «mult»
	Varcte : CallFunction• «div»
	Varcte : CallFunction• «plus»
	Varcte : CallFunction• «minus»
	Varcte : CallFunction• «logicalop»
	Varcte : CallFunction• «relop»
}
Transitions:


S189{
	ListElem : id leftsqrbracket Expression •rightsqrbracket «semicolon»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «mult»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «div»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «plus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «minus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «relop»
}
Transitions:
	rightsqrbracket -> 241


S190{
	Expression : Exp• «rightsqrbracket»
	Expression : Exp •Operations Expression «rightsqrbracket»
	Operations : •relop «ctebool»
	Operations : •relop «ctechar»
	Operations : •relop «ctefloat»
	Operations : •relop «cteint»
	Operations : •relop «ctestring»
	Operations : •relop «id»
	Operations : •relop «leftparenthesis»
	Operations : •logicalop «ctebool»
	Operations : •logicalop «ctechar»
	Operations : •logicalop «ctefloat»
	Operations : •logicalop «cteint»
	Operations : •logicalop «ctestring»
	Operations : •logicalop «id»
	Operations : •logicalop «leftparenthesis»
}
Transitions:
	relop -> 149
	logicalop -> 150
	Operations -> 242


S191{
	Exp : Term• «rightsqrbracket»
	Exp : Term •plus Exp «rightsqrbracket»
	Exp : Term •minus Exp «rightsqrbracket»
	Exp : Term• «logicalop»
	Exp : Term• «relop»
	Exp : Term •plus Exp «logicalop»
	Exp : Term •plus Exp «relop»
	Exp : Term •minus Exp «logicalop»
	Exp : Term •minus Exp «relop»
}
Transitions:
	plus -> 243
	minus -> 244


S192{
	Term : Factor• «rightsqrbracket»
	Term : Factor •mult Term «rightsqrbracket»
	Term : Factor •div Term «rightsqrbracket»
	Term : Factor• «plus»
	Term : Factor •mult Term «plus»
	Term : Factor •div Term «plus»
	Term : Factor• «minus»
	Term : Factor •mult Term «minus»
	Term : Factor •div Term «minus»
	Term : Factor• «logicalop»
	Term : Factor •mult Term «logicalop»
	Term : Factor •div Term «logicalop»
	Term : Factor• «relop»
	Term : Factor •mult Term «relop»
	Term : Factor •div Term «relop»
}
Transitions:
	mult -> 245
	div -> 246


S193{
	Factor : Varcte• «rightsqrbracket»
	Factor : Varcte• «mult»
	Factor : Varcte• «div»
	Factor : Varcte• «plus»
	Factor : Varcte• «minus»
	Factor : Varcte• «logicalop»
	Factor : Varcte• «relop»
}
Transitions:


S194{
	Varcte : Attribute• «rightsqrbracket»
	Varcte : Attribute• «mult»
	Varcte : Attribute• «div»
	Varcte : Attribute• «plus»
	Varcte : Attribute• «minus»
	Varcte : Attribute• «logicalop»
	Varcte : Attribute• «relop»
}
Transitions:


S195{
	Varcte : cteint• «rightsqrbracket»
	Varcte : cteint• «mult»
	Varcte : cteint• «div»
	Varcte : cteint• «plus»
	Varcte : cteint• «minus»
	Varcte : cteint• «logicalop»
	Varcte : cteint• «relop»
}
Transitions:


S196{
	Varcte : ctefloat• «rightsqrbracket»
	Varcte : ctefloat• «mult»
	Varcte : ctefloat• «div»
	Varcte : ctefloat• «plus»
	Varcte : ctefloat• «minus»
	Varcte : ctefloat• «logicalop»
	Varcte : ctefloat• «relop»
}
Transitions:


S197{
	Varcte : ctestring• «rightsqrbracket»
	Varcte : ctestring• «mult»
	Varcte : ctestring• «div»
	Varcte : ctestring• «plus»
	Varcte : ctestring• «minus»
	Varcte : ctestring• «logicalop»
	Varcte : ctestring• «relop»
}
Transitions:


S198{
	Varcte : ctechar• «rightsqrbracket»
	Varcte : ctechar• «mult»
	Varcte : ctechar• «div»
	Varcte : ctechar• «plus»
	Varcte : ctechar• «minus»
	Varcte : ctechar• «logicalop»
	Varcte : ctechar• «relop»
}
Transitions:


S199{
	Varcte : ctebool• «rightsqrbracket»
	Varcte : ctebool• «mult»
	Varcte : ctebool• «div»
	Varcte : ctebool• «plus»
	Varcte : ctebool• «minus»
	Varcte : ctebool• «logicalop»
	Varcte : ctebool• «relop»
}
Transitions:


S200{
	Varcte : ListElem• «rightsqrbracket»
	Varcte : ListElem• «mult»
	Varcte : ListElem• «div»
	Varcte : ListElem• «plus»
	Varcte : ListElem• «minus»
	Varcte : ListElem• «logicalop»
	Varcte : ListElem• «relop»
}
Transitions:


S201{
	Attribute : id dot id• «semicolon»
	Attribute : id dot id• «mult»
	Attribute : id dot id• «div»
	Attribute : id dot id• «plus»
	Attribute : id dot id• «minus»
	Attribute : id dot id• «logicalop»
	Attribute : id dot id• «relop»
}
Transitions:


S202{
	Factor : leftparenthesis Expression rightparenthesis• «semicolon»
	Factor : leftparenthesis Expression rightparenthesis• «mult»
	Factor : leftparenthesis Expression rightparenthesis• «div»
	Factor : leftparenthesis Expression rightparenthesis• «plus»
	Factor : leftparenthesis Expression rightparenthesis• «minus»
	Factor : leftparenthesis Expression rightparenthesis• «logicalop»
	Factor : leftparenthesis Expression rightparenthesis• «relop»
}
Transitions:


S203{
	Expression : Exp Operations Expression• «semicolon»
}
Transitions:


S204{
	Exp : Term plus Exp• «semicolon»
	Exp : Term plus Exp• «logicalop»
	Exp : Term plus Exp• «relop»
}
Transitions:


S205{
	Exp : Term minus Exp• «semicolon»
	Exp : Term minus Exp• «logicalop»
	Exp : Term minus Exp• «relop»
}
Transitions:


S206{
	Term : Factor mult Term• «semicolon»
	Term : Factor mult Term• «plus»
	Term : Factor mult Term• «minus»
	Term : Factor mult Term• «logicalop»
	Term : Factor mult Term• «relop»
}
Transitions:


S207{
	Term : Factor div Term• «semicolon»
	Term : Factor div Term• «plus»
	Term : Factor div Term• «minus»
	Term : Factor div Term• «logicalop»
	Term : Factor div Term• «relop»
}
Transitions:


S208{
	Assign : id equals •Expression semicolon «ctebool»
	Assign : id equals •Expression semicolon «ctechar»
	Assign : id equals •Expression semicolon «ctefloat»
	Assign : id equals •Expression semicolon «cteint»
	Assign : id equals •Expression semicolon «ctestring»
	Assign : id equals •Expression semicolon «id»
	Assign : id equals •Expression semicolon «leftparenthesis»
	Expression : •Exp «semicolon»
	Expression : •Exp Operations Expression «semicolon»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Exp -> 93
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Expression -> 247


S209{
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «rightbracket»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «backgroundtype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «booltype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «chartype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «circletype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «floattype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «for»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «id»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «if»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «imagetype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «inttype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «list»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «print»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «return»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «squaretype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «stringtype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «texttype»
	For : for leftparenthesis Assign Expression •semicolon Expression rightparenthesis Block «while»
}
Transitions:
	semicolon -> 248


S210{
	Assign : Attribute equals •Expression semicolon «ctebool»
	Assign : Attribute equals •Expression semicolon «ctechar»
	Assign : Attribute equals •Expression semicolon «ctefloat»
	Assign : Attribute equals •Expression semicolon «cteint»
	Assign : Attribute equals •Expression semicolon «ctestring»
	Assign : Attribute equals •Expression semicolon «id»
	Assign : Attribute equals •Expression semicolon «leftparenthesis»
	Expression : •Exp «semicolon»
	Expression : •Exp Operations Expression «semicolon»
	Exp : •Term «semicolon»
	Exp : •Term plus Exp «semicolon»
	Exp : •Term minus Exp «semicolon»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «semicolon»
	Term : •Factor mult Term «semicolon»
	Term : •Factor div Term «semicolon»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «semicolon»
	Factor : •Varcte «semicolon»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «semicolon»
	Varcte : •cteint «semicolon»
	Varcte : •ctefloat «semicolon»
	Varcte : •ctestring «semicolon»
	Varcte : •ctechar «semicolon»
	Varcte : •ctebool «semicolon»
	Varcte : •ListElem «semicolon»
	Varcte : •Attribute «semicolon»
	Varcte : •CallFunction «semicolon»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «semicolon»
	Attribute : •id dot id «semicolon»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 89
	leftparenthesis -> 90
	CallFunction -> 91
	Exp -> 93
	Term -> 94
	Factor -> 95
	Varcte -> 96
	Attribute -> 97
	cteint -> 98
	ctefloat -> 99
	ctestring -> 100
	ctechar -> 101
	ctebool -> 102
	ListElem -> 103
	Expression -> 249


S211{
	While : while leftparenthesis Expression rightparenthesis •Block «rightbracket»
	While : while leftparenthesis Expression rightparenthesis •Block «backgroundtype»
	While : while leftparenthesis Expression rightparenthesis •Block «booltype»
	While : while leftparenthesis Expression rightparenthesis •Block «chartype»
	While : while leftparenthesis Expression rightparenthesis •Block «circletype»
	While : while leftparenthesis Expression rightparenthesis •Block «floattype»
	While : while leftparenthesis Expression rightparenthesis •Block «for»
	While : while leftparenthesis Expression rightparenthesis •Block «id»
	While : while leftparenthesis Expression rightparenthesis •Block «if»
	While : while leftparenthesis Expression rightparenthesis •Block «imagetype»
	While : while leftparenthesis Expression rightparenthesis •Block «inttype»
	While : while leftparenthesis Expression rightparenthesis •Block «list»
	While : while leftparenthesis Expression rightparenthesis •Block «print»
	While : while leftparenthesis Expression rightparenthesis •Block «return»
	While : while leftparenthesis Expression rightparenthesis •Block «squaretype»
	While : while leftparenthesis Expression rightparenthesis •Block «stringtype»
	While : while leftparenthesis Expression rightparenthesis •Block «texttype»
	While : while leftparenthesis Expression rightparenthesis •Block «while»
	Block : •leftbracket BlockAux rightbracket «rightbracket»
	Block : •leftbracket rightbracket «rightbracket»
	Block : •leftbracket BlockAux rightbracket «backgroundtype»
	Block : •leftbracket rightbracket «backgroundtype»
	Block : •leftbracket BlockAux rightbracket «booltype»
	Block : •leftbracket rightbracket «booltype»
	Block : •leftbracket BlockAux rightbracket «chartype»
	Block : •leftbracket rightbracket «chartype»
	Block : •leftbracket BlockAux rightbracket «circletype»
	Block : •leftbracket rightbracket «circletype»
	Block : •leftbracket BlockAux rightbracket «floattype»
	Block : •leftbracket rightbracket «floattype»
	Block : •leftbracket BlockAux rightbracket «for»
	Block : •leftbracket rightbracket «for»
	Block : •leftbracket BlockAux rightbracket «id»
	Block : •leftbracket rightbracket «id»
	Block : •leftbracket BlockAux rightbracket «if»
	Block : •leftbracket rightbracket «if»
	Block : •leftbracket BlockAux rightbracket «imagetype»
	Block : •leftbracket rightbracket «imagetype»
	Block : •leftbracket BlockAux rightbracket «inttype»
	Block : •leftbracket rightbracket «inttype»
	Block : •leftbracket BlockAux rightbracket «list»
	Block : •leftbracket rightbracket «list»
	Block : •leftbracket BlockAux rightbracket «print»
	Block : •leftbracket rightbracket «print»
	Block : •leftbracket BlockAux rightbracket «return»
	Block : •leftbracket rightbracket «return»
	Block : •leftbracket BlockAux rightbracket «squaretype»
	Block : •leftbracket rightbracket «squaretype»
	Block : •leftbracket BlockAux rightbracket «stringtype»
	Block : •leftbracket rightbracket «stringtype»
	Block : •leftbracket BlockAux rightbracket «texttype»
	Block : •leftbracket rightbracket «texttype»
	Block : •leftbracket BlockAux rightbracket «while»
	Block : •leftbracket rightbracket «while»
}
Transitions:
	leftbracket -> 250
	Block -> 251


S212{
	CallFunction : id leftparenthesis rightparenthesis• «rightparenthesis»
	CallFunction : id leftparenthesis rightparenthesis• «mult»
	CallFunction : id leftparenthesis rightparenthesis• «div»
	CallFunction : id leftparenthesis rightparenthesis• «plus»
	CallFunction : id leftparenthesis rightparenthesis• «minus»
	CallFunction : id leftparenthesis rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis rightparenthesis• «relop»
	CallFunction : id leftparenthesis rightparenthesis• «comma»
}
Transitions:


S213{
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «rightparenthesis»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «mult»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «div»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «plus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «minus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «relop»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «comma»
}
Transitions:
	rightparenthesis -> 252


S214{
	ListElem : id leftsqrbracket Expression •rightsqrbracket «rightparenthesis»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «mult»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «div»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «plus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «minus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «relop»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «comma»
}
Transitions:
	rightsqrbracket -> 253


S215{
	Attribute : id dot id• «rightparenthesis»
	Attribute : id dot id• «mult»
	Attribute : id dot id• «div»
	Attribute : id dot id• «plus»
	Attribute : id dot id• «minus»
	Attribute : id dot id• «logicalop»
	Attribute : id dot id• «relop»
	Attribute : id dot id• «comma»
}
Transitions:


S216{
	Factor : leftparenthesis Expression rightparenthesis• «rightparenthesis»
	Factor : leftparenthesis Expression rightparenthesis• «mult»
	Factor : leftparenthesis Expression rightparenthesis• «div»
	Factor : leftparenthesis Expression rightparenthesis• «plus»
	Factor : leftparenthesis Expression rightparenthesis• «minus»
	Factor : leftparenthesis Expression rightparenthesis• «logicalop»
	Factor : leftparenthesis Expression rightparenthesis• «relop»
	Factor : leftparenthesis Expression rightparenthesis• «comma»
}
Transitions:


S217{
	CallFunctionAux : Expression comma CallFunctionAux• «rightparenthesis»
}
Transitions:


S218{
	Expression : Exp Operations Expression• «rightparenthesis»
	Expression : Exp Operations Expression• «comma»
}
Transitions:


S219{
	Exp : Term plus Exp• «rightparenthesis»
	Exp : Term plus Exp• «logicalop»
	Exp : Term plus Exp• «relop»
	Exp : Term plus Exp• «comma»
}
Transitions:


S220{
	Exp : Term minus Exp• «rightparenthesis»
	Exp : Term minus Exp• «logicalop»
	Exp : Term minus Exp• «relop»
	Exp : Term minus Exp• «comma»
}
Transitions:


S221{
	Term : Factor mult Term• «rightparenthesis»
	Term : Factor mult Term• «plus»
	Term : Factor mult Term• «minus»
	Term : Factor mult Term• «logicalop»
	Term : Factor mult Term• «relop»
	Term : Factor mult Term• «comma»
}
Transitions:


S222{
	Term : Factor div Term• «rightparenthesis»
	Term : Factor div Term• «plus»
	Term : Factor div Term• «minus»
	Term : Factor div Term• «logicalop»
	Term : Factor div Term• «relop»
	Term : Factor div Term• «comma»
}
Transitions:


S223{
	CallFunction : id leftparenthesis rightparenthesis• «rightparenthesis»
	CallFunction : id leftparenthesis rightparenthesis• «mult»
	CallFunction : id leftparenthesis rightparenthesis• «div»
	CallFunction : id leftparenthesis rightparenthesis• «plus»
	CallFunction : id leftparenthesis rightparenthesis• «minus»
	CallFunction : id leftparenthesis rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis rightparenthesis• «relop»
}
Transitions:


S224{
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «rightparenthesis»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «mult»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «div»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «plus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «minus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «relop»
}
Transitions:
	rightparenthesis -> 254


S225{
	ListElem : id leftsqrbracket Expression •rightsqrbracket «rightparenthesis»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «mult»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «div»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «plus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «minus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «relop»
}
Transitions:
	rightsqrbracket -> 255


S226{
	Attribute : id dot id• «rightparenthesis»
	Attribute : id dot id• «mult»
	Attribute : id dot id• «div»
	Attribute : id dot id• «plus»
	Attribute : id dot id• «minus»
	Attribute : id dot id• «logicalop»
	Attribute : id dot id• «relop»
}
Transitions:


S227{
	Factor : leftparenthesis Expression rightparenthesis• «rightparenthesis»
	Factor : leftparenthesis Expression rightparenthesis• «mult»
	Factor : leftparenthesis Expression rightparenthesis• «div»
	Factor : leftparenthesis Expression rightparenthesis• «plus»
	Factor : leftparenthesis Expression rightparenthesis• «minus»
	Factor : leftparenthesis Expression rightparenthesis• «logicalop»
	Factor : leftparenthesis Expression rightparenthesis• «relop»
}
Transitions:


S228{
	Write : print leftparenthesis Expression rightparenthesis semicolon• «rightbracket»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «backgroundtype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «booltype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «chartype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «circletype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «floattype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «for»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «id»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «if»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «imagetype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «inttype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «list»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «print»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «return»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «squaretype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «stringtype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «texttype»
	Write : print leftparenthesis Expression rightparenthesis semicolon• «while»
}
Transitions:


S229{
	Expression : Exp Operations Expression• «rightparenthesis»
}
Transitions:


S230{
	Exp : Term plus Exp• «rightparenthesis»
	Exp : Term plus Exp• «logicalop»
	Exp : Term plus Exp• «relop»
}
Transitions:


S231{
	Exp : Term minus Exp• «rightparenthesis»
	Exp : Term minus Exp• «logicalop»
	Exp : Term minus Exp• «relop»
}
Transitions:


S232{
	Term : Factor mult Term• «rightparenthesis»
	Term : Factor mult Term• «plus»
	Term : Factor mult Term• «minus»
	Term : Factor mult Term• «logicalop»
	Term : Factor mult Term• «relop»
}
Transitions:


S233{
	Term : Factor div Term• «rightparenthesis»
	Term : Factor div Term• «plus»
	Term : Factor div Term• «minus»
	Term : Factor div Term• «logicalop»
	Term : Factor div Term• «relop»
}
Transitions:


S234{
	Block : leftbracket •BlockAux rightbracket «rightbracket»
	Block : leftbracket •rightbracket «rightbracket»
	Block : leftbracket •BlockAux rightbracket «else»
	Block : leftbracket •rightbracket «else»
	Block : leftbracket •BlockAux rightbracket «backgroundtype»
	Block : leftbracket •rightbracket «backgroundtype»
	Block : leftbracket •BlockAux rightbracket «booltype»
	Block : leftbracket •rightbracket «booltype»
	Block : leftbracket •BlockAux rightbracket «chartype»
	Block : leftbracket •rightbracket «chartype»
	Block : leftbracket •BlockAux rightbracket «circletype»
	Block : leftbracket •rightbracket «circletype»
	Block : leftbracket •BlockAux rightbracket «floattype»
	Block : leftbracket •rightbracket «floattype»
	Block : leftbracket •BlockAux rightbracket «for»
	Block : leftbracket •rightbracket «for»
	Block : leftbracket •BlockAux rightbracket «id»
	Block : leftbracket •rightbracket «id»
	Block : leftbracket •BlockAux rightbracket «if»
	Block : leftbracket •rightbracket «if»
	Block : leftbracket •BlockAux rightbracket «imagetype»
	Block : leftbracket •rightbracket «imagetype»
	Block : leftbracket •BlockAux rightbracket «inttype»
	Block : leftbracket •rightbracket «inttype»
	Block : leftbracket •BlockAux rightbracket «list»
	Block : leftbracket •rightbracket «list»
	Block : leftbracket •BlockAux rightbracket «print»
	Block : leftbracket •rightbracket «print»
	Block : leftbracket •BlockAux rightbracket «return»
	Block : leftbracket •rightbracket «return»
	Block : leftbracket •BlockAux rightbracket «squaretype»
	Block : leftbracket •rightbracket «squaretype»
	Block : leftbracket •BlockAux rightbracket «stringtype»
	Block : leftbracket •rightbracket «stringtype»
	Block : leftbracket •BlockAux rightbracket «texttype»
	Block : leftbracket •rightbracket «texttype»
	Block : leftbracket •BlockAux rightbracket «while»
	Block : leftbracket •rightbracket «while»
	BlockAux : •Statement «rightbracket»
	BlockAux : •Statement BlockAux «rightbracket»
	Statement : •VarsDec «rightbracket»
	Statement : •Assign «rightbracket»
	Statement : •Condition «rightbracket»
	Statement : •Return «rightbracket»
	Statement : •For «rightbracket»
	Statement : •While «rightbracket»
	Statement : •Write «rightbracket»
	Statement : •CallFunction semicolon «rightbracket»
	Statement : •VarsDec «backgroundtype»
	Statement : •VarsDec «booltype»
	Statement : •VarsDec «chartype»
	Statement : •VarsDec «circletype»
	Statement : •VarsDec «floattype»
	Statement : •VarsDec «for»
	Statement : •VarsDec «id»
	Statement : •VarsDec «if»
	Statement : •VarsDec «imagetype»
	Statement : •VarsDec «inttype»
	Statement : •VarsDec «list»
	Statement : •VarsDec «print»
	Statement : •VarsDec «return»
	Statement : •VarsDec «squaretype»
	Statement : •VarsDec «stringtype»
	Statement : •VarsDec «texttype»
	Statement : •VarsDec «while»
	Statement : •Assign «backgroundtype»
	Statement : •Assign «booltype»
	Statement : •Assign «chartype»
	Statement : •Assign «circletype»
	Statement : •Assign «floattype»
	Statement : •Assign «for»
	Statement : •Assign «id»
	Statement : •Assign «if»
	Statement : •Assign «imagetype»
	Statement : •Assign «inttype»
	Statement : •Assign «list»
	Statement : •Assign «print»
	Statement : •Assign «return»
	Statement : •Assign «squaretype»
	Statement : •Assign «stringtype»
	Statement : •Assign «texttype»
	Statement : •Assign «while»
	Statement : •Condition «backgroundtype»
	Statement : •Condition «booltype»
	Statement : •Condition «chartype»
	Statement : •Condition «circletype»
	Statement : •Condition «floattype»
	Statement : •Condition «for»
	Statement : •Condition «id»
	Statement : •Condition «if»
	Statement : •Condition «imagetype»
	Statement : •Condition «inttype»
	Statement : •Condition «list»
	Statement : •Condition «print»
	Statement : •Condition «return»
	Statement : •Condition «squaretype»
	Statement : •Condition «stringtype»
	Statement : •Condition «texttype»
	Statement : •Condition «while»
	Statement : •Return «backgroundtype»
	Statement : •Return «booltype»
	Statement : •Return «chartype»
	Statement : •Return «circletype»
	Statement : •Return «floattype»
	Statement : •Return «for»
	Statement : •Return «id»
	Statement : •Return «if»
	Statement : •Return «imagetype»
	Statement : •Return «inttype»
	Statement : •Return «list»
	Statement : •Return «print»
	Statement : •Return «return»
	Statement : •Return «squaretype»
	Statement : •Return «stringtype»
	Statement : •Return «texttype»
	Statement : •Return «while»
	Statement : •For «backgroundtype»
	Statement : •For «booltype»
	Statement : •For «chartype»
	Statement : •For «circletype»
	Statement : •For «floattype»
	Statement : •For «for»
	Statement : •For «id»
	Statement : •For «if»
	Statement : •For «imagetype»
	Statement : •For «inttype»
	Statement : •For «list»
	Statement : •For «print»
	Statement : •For «return»
	Statement : •For «squaretype»
	Statement : •For «stringtype»
	Statement : •For «texttype»
	Statement : •For «while»
	Statement : •While «backgroundtype»
	Statement : •While «booltype»
	Statement : •While «chartype»
	Statement : •While «circletype»
	Statement : •While «floattype»
	Statement : •While «for»
	Statement : •While «id»
	Statement : •While «if»
	Statement : •While «imagetype»
	Statement : •While «inttype»
	Statement : •While «list»
	Statement : •While «print»
	Statement : •While «return»
	Statement : •While «squaretype»
	Statement : •While «stringtype»
	Statement : •While «texttype»
	Statement : •While «while»
	Statement : •Write «backgroundtype»
	Statement : •Write «booltype»
	Statement : •Write «chartype»
	Statement : •Write «circletype»
	Statement : •Write «floattype»
	Statement : •Write «for»
	Statement : •Write «id»
	Statement : •Write «if»
	Statement : •Write «imagetype»
	Statement : •Write «inttype»
	Statement : •Write «list»
	Statement : •Write «print»
	Statement : •Write «return»
	Statement : •Write «squaretype»
	Statement : •Write «stringtype»
	Statement : •Write «texttype»
	Statement : •Write «while»
	Statement : •CallFunction semicolon «backgroundtype»
	Statement : •CallFunction semicolon «booltype»
	Statement : •CallFunction semicolon «chartype»
	Statement : •CallFunction semicolon «circletype»
	Statement : •CallFunction semicolon «floattype»
	Statement : •CallFunction semicolon «for»
	Statement : •CallFunction semicolon «id»
	Statement : •CallFunction semicolon «if»
	Statement : •CallFunction semicolon «imagetype»
	Statement : •CallFunction semicolon «inttype»
	Statement : •CallFunction semicolon «list»
	Statement : •CallFunction semicolon «print»
	Statement : •CallFunction semicolon «return»
	Statement : •CallFunction semicolon «squaretype»
	Statement : •CallFunction semicolon «stringtype»
	Statement : •CallFunction semicolon «texttype»
	Statement : •CallFunction semicolon «while»
	VarsDec : •Vars «rightbracket»
	Assign : •id equals Expression semicolon «rightbracket»
	Assign : •Attribute equals Expression semicolon «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «rightbracket»
	Return : •return Expression semicolon «rightbracket»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «rightbracket»
	While : •while leftparenthesis Expression rightparenthesis Block «rightbracket»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «rightbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	VarsDec : •Vars «backgroundtype»
	VarsDec : •Vars «booltype»
	VarsDec : •Vars «chartype»
	VarsDec : •Vars «circletype»
	VarsDec : •Vars «floattype»
	VarsDec : •Vars «for»
	VarsDec : •Vars «id»
	VarsDec : •Vars «if»
	VarsDec : •Vars «imagetype»
	VarsDec : •Vars «inttype»
	VarsDec : •Vars «list»
	VarsDec : •Vars «print»
	VarsDec : •Vars «return»
	VarsDec : •Vars «squaretype»
	VarsDec : •Vars «stringtype»
	VarsDec : •Vars «texttype»
	VarsDec : •Vars «while»
	Assign : •id equals Expression semicolon «backgroundtype»
	Assign : •Attribute equals Expression semicolon «backgroundtype»
	Assign : •id equals Expression semicolon «booltype»
	Assign : •Attribute equals Expression semicolon «booltype»
	Assign : •id equals Expression semicolon «chartype»
	Assign : •Attribute equals Expression semicolon «chartype»
	Assign : •id equals Expression semicolon «circletype»
	Assign : •Attribute equals Expression semicolon «circletype»
	Assign : •id equals Expression semicolon «floattype»
	Assign : •Attribute equals Expression semicolon «floattype»
	Assign : •id equals Expression semicolon «for»
	Assign : •Attribute equals Expression semicolon «for»
	Assign : •id equals Expression semicolon «id»
	Assign : •Attribute equals Expression semicolon «id»
	Assign : •id equals Expression semicolon «if»
	Assign : •Attribute equals Expression semicolon «if»
	Assign : •id equals Expression semicolon «imagetype»
	Assign : •Attribute equals Expression semicolon «imagetype»
	Assign : •id equals Expression semicolon «inttype»
	Assign : •Attribute equals Expression semicolon «inttype»
	Assign : •id equals Expression semicolon «list»
	Assign : •Attribute equals Expression semicolon «list»
	Assign : •id equals Expression semicolon «print»
	Assign : •Attribute equals Expression semicolon «print»
	Assign : •id equals Expression semicolon «return»
	Assign : •Attribute equals Expression semicolon «return»
	Assign : •id equals Expression semicolon «squaretype»
	Assign : •Attribute equals Expression semicolon «squaretype»
	Assign : •id equals Expression semicolon «stringtype»
	Assign : •Attribute equals Expression semicolon «stringtype»
	Assign : •id equals Expression semicolon «texttype»
	Assign : •Attribute equals Expression semicolon «texttype»
	Assign : •id equals Expression semicolon «while»
	Assign : •Attribute equals Expression semicolon «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «while»
	Return : •return Expression semicolon «backgroundtype»
	Return : •return Expression semicolon «booltype»
	Return : •return Expression semicolon «chartype»
	Return : •return Expression semicolon «circletype»
	Return : •return Expression semicolon «floattype»
	Return : •return Expression semicolon «for»
	Return : •return Expression semicolon «id»
	Return : •return Expression semicolon «if»
	Return : •return Expression semicolon «imagetype»
	Return : •return Expression semicolon «inttype»
	Return : •return Expression semicolon «list»
	Return : •return Expression semicolon «print»
	Return : •return Expression semicolon «return»
	Return : •return Expression semicolon «squaretype»
	Return : •return Expression semicolon «stringtype»
	Return : •return Expression semicolon «texttype»
	Return : •return Expression semicolon «while»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «backgroundtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «booltype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «chartype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «circletype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «floattype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «for»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «id»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «if»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «imagetype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «inttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «list»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «print»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «return»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «squaretype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «stringtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «texttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «while»
	While : •while leftparenthesis Expression rightparenthesis Block «backgroundtype»
	While : •while leftparenthesis Expression rightparenthesis Block «booltype»
	While : •while leftparenthesis Expression rightparenthesis Block «chartype»
	While : •while leftparenthesis Expression rightparenthesis Block «circletype»
	While : •while leftparenthesis Expression rightparenthesis Block «floattype»
	While : •while leftparenthesis Expression rightparenthesis Block «for»
	While : •while leftparenthesis Expression rightparenthesis Block «id»
	While : •while leftparenthesis Expression rightparenthesis Block «if»
	While : •while leftparenthesis Expression rightparenthesis Block «imagetype»
	While : •while leftparenthesis Expression rightparenthesis Block «inttype»
	While : •while leftparenthesis Expression rightparenthesis Block «list»
	While : •while leftparenthesis Expression rightparenthesis Block «print»
	While : •while leftparenthesis Expression rightparenthesis Block «return»
	While : •while leftparenthesis Expression rightparenthesis Block «squaretype»
	While : •while leftparenthesis Expression rightparenthesis Block «stringtype»
	While : •while leftparenthesis Expression rightparenthesis Block «texttype»
	While : •while leftparenthesis Expression rightparenthesis Block «while»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «backgroundtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «booltype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «chartype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «circletype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «floattype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «for»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «id»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «if»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «imagetype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «inttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «list»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «print»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «return»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «squaretype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «stringtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «texttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «while»
	Vars : •Type Ids semicolon Vars «rightbracket»
	Vars : •Type Ids semicolon «rightbracket»
	Attribute : •id dot id «equals»
	Vars : •Type Ids semicolon Vars «backgroundtype»
	Vars : •Type Ids semicolon «backgroundtype»
	Vars : •Type Ids semicolon Vars «booltype»
	Vars : •Type Ids semicolon «booltype»
	Vars : •Type Ids semicolon Vars «chartype»
	Vars : •Type Ids semicolon «chartype»
	Vars : •Type Ids semicolon Vars «circletype»
	Vars : •Type Ids semicolon «circletype»
	Vars : •Type Ids semicolon Vars «floattype»
	Vars : •Type Ids semicolon «floattype»
	Vars : •Type Ids semicolon Vars «for»
	Vars : •Type Ids semicolon «for»
	Vars : •Type Ids semicolon Vars «id»
	Vars : •Type Ids semicolon «id»
	Vars : •Type Ids semicolon Vars «if»
	Vars : •Type Ids semicolon «if»
	Vars : •Type Ids semicolon Vars «imagetype»
	Vars : •Type Ids semicolon «imagetype»
	Vars : •Type Ids semicolon Vars «inttype»
	Vars : •Type Ids semicolon «inttype»
	Vars : •Type Ids semicolon Vars «list»
	Vars : •Type Ids semicolon «list»
	Vars : •Type Ids semicolon Vars «print»
	Vars : •Type Ids semicolon «print»
	Vars : •Type Ids semicolon Vars «return»
	Vars : •Type Ids semicolon «return»
	Vars : •Type Ids semicolon Vars «squaretype»
	Vars : •Type Ids semicolon «squaretype»
	Vars : •Type Ids semicolon Vars «stringtype»
	Vars : •Type Ids semicolon «stringtype»
	Vars : •Type Ids semicolon Vars «texttype»
	Vars : •Type Ids semicolon «texttype»
	Vars : •Type Ids semicolon Vars «while»
	Vars : •Type Ids semicolon «while»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	id -> 58
	Vars -> 60
	Type -> 61
	VarsDec -> 62
	Statement -> 64
	Assign -> 65
	Condition -> 66
	Return -> 67
	For -> 68
	While -> 69
	Write -> 70
	CallFunction -> 71
	Attribute -> 72
	print -> 73
	if -> 74
	return -> 75
	for -> 76
	while -> 77
	rightbracket -> 256
	BlockAux -> 257


S235{
	Condition : if leftparenthesis Expression rightparenthesis Block• «rightbracket»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «rightbracket»
	Condition : if leftparenthesis Expression rightparenthesis Block• «backgroundtype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «backgroundtype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «booltype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «booltype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «chartype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «chartype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «circletype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «circletype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «floattype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «floattype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «for»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «for»
	Condition : if leftparenthesis Expression rightparenthesis Block• «id»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «id»
	Condition : if leftparenthesis Expression rightparenthesis Block• «if»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «if»
	Condition : if leftparenthesis Expression rightparenthesis Block• «imagetype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «imagetype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «inttype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «inttype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «list»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «list»
	Condition : if leftparenthesis Expression rightparenthesis Block• «print»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «print»
	Condition : if leftparenthesis Expression rightparenthesis Block• «return»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «return»
	Condition : if leftparenthesis Expression rightparenthesis Block• «squaretype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «squaretype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «stringtype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «stringtype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «texttype»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «texttype»
	Condition : if leftparenthesis Expression rightparenthesis Block• «while»
	Condition : if leftparenthesis Expression rightparenthesis Block •else Block «while»
}
Transitions:
	else -> 258


S236{
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «semicolon»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «mult»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «div»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «plus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «minus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «relop»
}
Transitions:


S237{
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : id leftparenthesis •rightparenthesis «rightsqrbracket»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «mult»
	CallFunction : id leftparenthesis •rightparenthesis «mult»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «div»
	CallFunction : id leftparenthesis •rightparenthesis «div»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «plus»
	CallFunction : id leftparenthesis •rightparenthesis «plus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «minus»
	CallFunction : id leftparenthesis •rightparenthesis «minus»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis •CallFunctionAux rightparenthesis «relop»
	CallFunction : id leftparenthesis •rightparenthesis «relop»
	CallFunctionAux : •Expression «rightparenthesis»
	CallFunctionAux : •Expression comma CallFunctionAux «rightparenthesis»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Expression : •Exp «comma»
	Expression : •Exp Operations Expression «comma»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Exp : •Term «comma»
	Exp : •Term plus Exp «comma»
	Exp : •Term minus Exp «comma»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Term : •Factor «comma»
	Term : •Factor mult Term «comma»
	Term : •Factor div Term «comma»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Factor : •leftparenthesis Expression rightparenthesis «comma»
	Factor : •Varcte «comma»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	Varcte : •id «comma»
	Varcte : •cteint «comma»
	Varcte : •ctefloat «comma»
	Varcte : •ctestring «comma»
	Varcte : •ctechar «comma»
	Varcte : •ctebool «comma»
	Varcte : •ListElem «comma»
	Varcte : •Attribute «comma»
	Varcte : •CallFunction «comma»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «comma»
	Attribute : •id dot id «comma»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «comma»
	CallFunction : •id leftparenthesis rightparenthesis «comma»
}
Transitions:
	id -> 106
	leftparenthesis -> 107
	CallFunction -> 109
	Expression -> 110
	Exp -> 111
	Term -> 112
	Factor -> 113
	Varcte -> 114
	Attribute -> 115
	cteint -> 117
	ctefloat -> 118
	ctestring -> 119
	ctechar -> 120
	ctebool -> 121
	ListElem -> 122
	rightparenthesis -> 259
	CallFunctionAux -> 260


S238{
	ListElem : id leftsqrbracket •Expression rightsqrbracket «rightsqrbracket»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «mult»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «div»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «plus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «minus»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket •Expression rightsqrbracket «relop»
	Expression : •Exp «rightsqrbracket»
	Expression : •Exp Operations Expression «rightsqrbracket»
	Exp : •Term «rightsqrbracket»
	Exp : •Term plus Exp «rightsqrbracket»
	Exp : •Term minus Exp «rightsqrbracket»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Exp -> 190
	Term -> 191
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Expression -> 261


S239{
	Attribute : id dot •id «rightsqrbracket»
	Attribute : id dot •id «mult»
	Attribute : id dot •id «div»
	Attribute : id dot •id «plus»
	Attribute : id dot •id «minus»
	Attribute : id dot •id «logicalop»
	Attribute : id dot •id «relop»
}
Transitions:
	id -> 262


S240{
	Factor : leftparenthesis Expression •rightparenthesis «rightsqrbracket»
	Factor : leftparenthesis Expression •rightparenthesis «mult»
	Factor : leftparenthesis Expression •rightparenthesis «div»
	Factor : leftparenthesis Expression •rightparenthesis «plus»
	Factor : leftparenthesis Expression •rightparenthesis «minus»
	Factor : leftparenthesis Expression •rightparenthesis «logicalop»
	Factor : leftparenthesis Expression •rightparenthesis «relop»
}
Transitions:
	rightparenthesis -> 263


S241{
	ListElem : id leftsqrbracket Expression rightsqrbracket• «semicolon»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «mult»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «div»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «plus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «minus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «logicalop»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «relop»
}
Transitions:


S242{
	Expression : Exp Operations •Expression «rightsqrbracket»
	Expression : •Exp «rightsqrbracket»
	Expression : •Exp Operations Expression «rightsqrbracket»
	Exp : •Term «rightsqrbracket»
	Exp : •Term plus Exp «rightsqrbracket»
	Exp : •Term minus Exp «rightsqrbracket»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Exp -> 190
	Term -> 191
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Expression -> 264


S243{
	Exp : Term plus •Exp «rightsqrbracket»
	Exp : Term plus •Exp «logicalop»
	Exp : Term plus •Exp «relop»
	Exp : •Term «rightsqrbracket»
	Exp : •Term plus Exp «rightsqrbracket»
	Exp : •Term minus Exp «rightsqrbracket»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Term -> 191
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Exp -> 265


S244{
	Exp : Term minus •Exp «rightsqrbracket»
	Exp : Term minus •Exp «logicalop»
	Exp : Term minus •Exp «relop»
	Exp : •Term «rightsqrbracket»
	Exp : •Term plus Exp «rightsqrbracket»
	Exp : •Term minus Exp «rightsqrbracket»
	Exp : •Term «logicalop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Term -> 191
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Exp -> 266


S245{
	Term : Factor mult •Term «rightsqrbracket»
	Term : Factor mult •Term «plus»
	Term : Factor mult •Term «minus»
	Term : Factor mult •Term «logicalop»
	Term : Factor mult •Term «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Term -> 267


S246{
	Term : Factor div •Term «rightsqrbracket»
	Term : Factor div •Term «plus»
	Term : Factor div •Term «minus»
	Term : Factor div •Term «logicalop»
	Term : Factor div •Term «relop»
	Term : •Factor «rightsqrbracket»
	Term : •Factor mult Term «rightsqrbracket»
	Term : •Factor div Term «rightsqrbracket»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightsqrbracket»
	Factor : •Varcte «rightsqrbracket»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightsqrbracket»
	Varcte : •cteint «rightsqrbracket»
	Varcte : •ctefloat «rightsqrbracket»
	Varcte : •ctestring «rightsqrbracket»
	Varcte : •ctechar «rightsqrbracket»
	Varcte : •ctebool «rightsqrbracket»
	Varcte : •ListElem «rightsqrbracket»
	Varcte : •Attribute «rightsqrbracket»
	Varcte : •CallFunction «rightsqrbracket»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightsqrbracket»
	Attribute : •id dot id «rightsqrbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightsqrbracket»
	CallFunction : •id leftparenthesis rightparenthesis «rightsqrbracket»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 186
	leftparenthesis -> 187
	CallFunction -> 188
	Factor -> 192
	Varcte -> 193
	Attribute -> 194
	cteint -> 195
	ctefloat -> 196
	ctestring -> 197
	ctechar -> 198
	ctebool -> 199
	ListElem -> 200
	Term -> 268


S247{
	Assign : id equals Expression •semicolon «ctebool»
	Assign : id equals Expression •semicolon «ctechar»
	Assign : id equals Expression •semicolon «ctefloat»
	Assign : id equals Expression •semicolon «cteint»
	Assign : id equals Expression •semicolon «ctestring»
	Assign : id equals Expression •semicolon «id»
	Assign : id equals Expression •semicolon «leftparenthesis»
}
Transitions:
	semicolon -> 269


S248{
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «rightbracket»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «backgroundtype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «booltype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «chartype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «circletype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «floattype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «for»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «id»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «if»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «imagetype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «inttype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «list»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «print»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «return»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «squaretype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «stringtype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «texttype»
	For : for leftparenthesis Assign Expression semicolon •Expression rightparenthesis Block «while»
	Expression : •Exp «rightparenthesis»
	Expression : •Exp Operations Expression «rightparenthesis»
	Exp : •Term «rightparenthesis»
	Exp : •Term plus Exp «rightparenthesis»
	Exp : •Term minus Exp «rightparenthesis»
	Exp : •Term «logicalop»
	Exp : •Term «relop»
	Exp : •Term plus Exp «logicalop»
	Exp : •Term plus Exp «relop»
	Exp : •Term minus Exp «logicalop»
	Exp : •Term minus Exp «relop»
	Term : •Factor «rightparenthesis»
	Term : •Factor mult Term «rightparenthesis»
	Term : •Factor div Term «rightparenthesis»
	Term : •Factor «plus»
	Term : •Factor mult Term «plus»
	Term : •Factor div Term «plus»
	Term : •Factor «minus»
	Term : •Factor mult Term «minus»
	Term : •Factor div Term «minus»
	Term : •Factor «logicalop»
	Term : •Factor mult Term «logicalop»
	Term : •Factor div Term «logicalop»
	Term : •Factor «relop»
	Term : •Factor mult Term «relop»
	Term : •Factor div Term «relop»
	Factor : •leftparenthesis Expression rightparenthesis «rightparenthesis»
	Factor : •Varcte «rightparenthesis»
	Factor : •leftparenthesis Expression rightparenthesis «mult»
	Factor : •Varcte «mult»
	Factor : •leftparenthesis Expression rightparenthesis «div»
	Factor : •Varcte «div»
	Factor : •leftparenthesis Expression rightparenthesis «plus»
	Factor : •Varcte «plus»
	Factor : •leftparenthesis Expression rightparenthesis «minus»
	Factor : •Varcte «minus»
	Factor : •leftparenthesis Expression rightparenthesis «logicalop»
	Factor : •Varcte «logicalop»
	Factor : •leftparenthesis Expression rightparenthesis «relop»
	Factor : •Varcte «relop»
	Varcte : •id «rightparenthesis»
	Varcte : •cteint «rightparenthesis»
	Varcte : •ctefloat «rightparenthesis»
	Varcte : •ctestring «rightparenthesis»
	Varcte : •ctechar «rightparenthesis»
	Varcte : •ctebool «rightparenthesis»
	Varcte : •ListElem «rightparenthesis»
	Varcte : •Attribute «rightparenthesis»
	Varcte : •CallFunction «rightparenthesis»
	Varcte : •id «mult»
	Varcte : •cteint «mult»
	Varcte : •ctefloat «mult»
	Varcte : •ctestring «mult»
	Varcte : •ctechar «mult»
	Varcte : •ctebool «mult»
	Varcte : •ListElem «mult»
	Varcte : •Attribute «mult»
	Varcte : •CallFunction «mult»
	Varcte : •id «div»
	Varcte : •cteint «div»
	Varcte : •ctefloat «div»
	Varcte : •ctestring «div»
	Varcte : •ctechar «div»
	Varcte : •ctebool «div»
	Varcte : •ListElem «div»
	Varcte : •Attribute «div»
	Varcte : •CallFunction «div»
	Varcte : •id «plus»
	Varcte : •cteint «plus»
	Varcte : •ctefloat «plus»
	Varcte : •ctestring «plus»
	Varcte : •ctechar «plus»
	Varcte : •ctebool «plus»
	Varcte : •ListElem «plus»
	Varcte : •Attribute «plus»
	Varcte : •CallFunction «plus»
	Varcte : •id «minus»
	Varcte : •cteint «minus»
	Varcte : •ctefloat «minus»
	Varcte : •ctestring «minus»
	Varcte : •ctechar «minus»
	Varcte : •ctebool «minus»
	Varcte : •ListElem «minus»
	Varcte : •Attribute «minus»
	Varcte : •CallFunction «minus»
	Varcte : •id «logicalop»
	Varcte : •cteint «logicalop»
	Varcte : •ctefloat «logicalop»
	Varcte : •ctestring «logicalop»
	Varcte : •ctechar «logicalop»
	Varcte : •ctebool «logicalop»
	Varcte : •ListElem «logicalop»
	Varcte : •Attribute «logicalop»
	Varcte : •CallFunction «logicalop»
	Varcte : •id «relop»
	Varcte : •cteint «relop»
	Varcte : •ctefloat «relop»
	Varcte : •ctestring «relop»
	Varcte : •ctechar «relop»
	Varcte : •ctebool «relop»
	Varcte : •ListElem «relop»
	Varcte : •Attribute «relop»
	Varcte : •CallFunction «relop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «rightparenthesis»
	Attribute : •id dot id «rightparenthesis»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «rightparenthesis»
	CallFunction : •id leftparenthesis rightparenthesis «rightparenthesis»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «mult»
	Attribute : •id dot id «mult»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «mult»
	CallFunction : •id leftparenthesis rightparenthesis «mult»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «div»
	Attribute : •id dot id «div»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «div»
	CallFunction : •id leftparenthesis rightparenthesis «div»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «plus»
	Attribute : •id dot id «plus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «plus»
	CallFunction : •id leftparenthesis rightparenthesis «plus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «minus»
	Attribute : •id dot id «minus»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «minus»
	CallFunction : •id leftparenthesis rightparenthesis «minus»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «logicalop»
	Attribute : •id dot id «logicalop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «logicalop»
	CallFunction : •id leftparenthesis rightparenthesis «logicalop»
	ListElem : •id leftsqrbracket Expression rightsqrbracket «relop»
	Attribute : •id dot id «relop»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «relop»
	CallFunction : •id leftparenthesis rightparenthesis «relop»
}
Transitions:
	id -> 127
	leftparenthesis -> 128
	CallFunction -> 129
	Exp -> 131
	Term -> 132
	Factor -> 133
	Varcte -> 134
	Attribute -> 135
	cteint -> 136
	ctefloat -> 137
	ctestring -> 138
	ctechar -> 139
	ctebool -> 140
	ListElem -> 141
	Expression -> 270


S249{
	Assign : Attribute equals Expression •semicolon «ctebool»
	Assign : Attribute equals Expression •semicolon «ctechar»
	Assign : Attribute equals Expression •semicolon «ctefloat»
	Assign : Attribute equals Expression •semicolon «cteint»
	Assign : Attribute equals Expression •semicolon «ctestring»
	Assign : Attribute equals Expression •semicolon «id»
	Assign : Attribute equals Expression •semicolon «leftparenthesis»
}
Transitions:
	semicolon -> 271


S250{
	Block : leftbracket •BlockAux rightbracket «rightbracket»
	Block : leftbracket •rightbracket «rightbracket»
	Block : leftbracket •BlockAux rightbracket «backgroundtype»
	Block : leftbracket •rightbracket «backgroundtype»
	Block : leftbracket •BlockAux rightbracket «booltype»
	Block : leftbracket •rightbracket «booltype»
	Block : leftbracket •BlockAux rightbracket «chartype»
	Block : leftbracket •rightbracket «chartype»
	Block : leftbracket •BlockAux rightbracket «circletype»
	Block : leftbracket •rightbracket «circletype»
	Block : leftbracket •BlockAux rightbracket «floattype»
	Block : leftbracket •rightbracket «floattype»
	Block : leftbracket •BlockAux rightbracket «for»
	Block : leftbracket •rightbracket «for»
	Block : leftbracket •BlockAux rightbracket «id»
	Block : leftbracket •rightbracket «id»
	Block : leftbracket •BlockAux rightbracket «if»
	Block : leftbracket •rightbracket «if»
	Block : leftbracket •BlockAux rightbracket «imagetype»
	Block : leftbracket •rightbracket «imagetype»
	Block : leftbracket •BlockAux rightbracket «inttype»
	Block : leftbracket •rightbracket «inttype»
	Block : leftbracket •BlockAux rightbracket «list»
	Block : leftbracket •rightbracket «list»
	Block : leftbracket •BlockAux rightbracket «print»
	Block : leftbracket •rightbracket «print»
	Block : leftbracket •BlockAux rightbracket «return»
	Block : leftbracket •rightbracket «return»
	Block : leftbracket •BlockAux rightbracket «squaretype»
	Block : leftbracket •rightbracket «squaretype»
	Block : leftbracket •BlockAux rightbracket «stringtype»
	Block : leftbracket •rightbracket «stringtype»
	Block : leftbracket •BlockAux rightbracket «texttype»
	Block : leftbracket •rightbracket «texttype»
	Block : leftbracket •BlockAux rightbracket «while»
	Block : leftbracket •rightbracket «while»
	BlockAux : •Statement «rightbracket»
	BlockAux : •Statement BlockAux «rightbracket»
	Statement : •VarsDec «rightbracket»
	Statement : •Assign «rightbracket»
	Statement : •Condition «rightbracket»
	Statement : •Return «rightbracket»
	Statement : •For «rightbracket»
	Statement : •While «rightbracket»
	Statement : •Write «rightbracket»
	Statement : •CallFunction semicolon «rightbracket»
	Statement : •VarsDec «backgroundtype»
	Statement : •VarsDec «booltype»
	Statement : •VarsDec «chartype»
	Statement : •VarsDec «circletype»
	Statement : •VarsDec «floattype»
	Statement : •VarsDec «for»
	Statement : •VarsDec «id»
	Statement : •VarsDec «if»
	Statement : •VarsDec «imagetype»
	Statement : •VarsDec «inttype»
	Statement : •VarsDec «list»
	Statement : •VarsDec «print»
	Statement : •VarsDec «return»
	Statement : •VarsDec «squaretype»
	Statement : •VarsDec «stringtype»
	Statement : •VarsDec «texttype»
	Statement : •VarsDec «while»
	Statement : •Assign «backgroundtype»
	Statement : •Assign «booltype»
	Statement : •Assign «chartype»
	Statement : •Assign «circletype»
	Statement : •Assign «floattype»
	Statement : •Assign «for»
	Statement : •Assign «id»
	Statement : •Assign «if»
	Statement : •Assign «imagetype»
	Statement : •Assign «inttype»
	Statement : •Assign «list»
	Statement : •Assign «print»
	Statement : •Assign «return»
	Statement : •Assign «squaretype»
	Statement : •Assign «stringtype»
	Statement : •Assign «texttype»
	Statement : •Assign «while»
	Statement : •Condition «backgroundtype»
	Statement : •Condition «booltype»
	Statement : •Condition «chartype»
	Statement : •Condition «circletype»
	Statement : •Condition «floattype»
	Statement : •Condition «for»
	Statement : •Condition «id»
	Statement : •Condition «if»
	Statement : •Condition «imagetype»
	Statement : •Condition «inttype»
	Statement : •Condition «list»
	Statement : •Condition «print»
	Statement : •Condition «return»
	Statement : •Condition «squaretype»
	Statement : •Condition «stringtype»
	Statement : •Condition «texttype»
	Statement : •Condition «while»
	Statement : •Return «backgroundtype»
	Statement : •Return «booltype»
	Statement : •Return «chartype»
	Statement : •Return «circletype»
	Statement : •Return «floattype»
	Statement : •Return «for»
	Statement : •Return «id»
	Statement : •Return «if»
	Statement : •Return «imagetype»
	Statement : •Return «inttype»
	Statement : •Return «list»
	Statement : •Return «print»
	Statement : •Return «return»
	Statement : •Return «squaretype»
	Statement : •Return «stringtype»
	Statement : •Return «texttype»
	Statement : •Return «while»
	Statement : •For «backgroundtype»
	Statement : •For «booltype»
	Statement : •For «chartype»
	Statement : •For «circletype»
	Statement : •For «floattype»
	Statement : •For «for»
	Statement : •For «id»
	Statement : •For «if»
	Statement : •For «imagetype»
	Statement : •For «inttype»
	Statement : •For «list»
	Statement : •For «print»
	Statement : •For «return»
	Statement : •For «squaretype»
	Statement : •For «stringtype»
	Statement : •For «texttype»
	Statement : •For «while»
	Statement : •While «backgroundtype»
	Statement : •While «booltype»
	Statement : •While «chartype»
	Statement : •While «circletype»
	Statement : •While «floattype»
	Statement : •While «for»
	Statement : •While «id»
	Statement : •While «if»
	Statement : •While «imagetype»
	Statement : •While «inttype»
	Statement : •While «list»
	Statement : •While «print»
	Statement : •While «return»
	Statement : •While «squaretype»
	Statement : •While «stringtype»
	Statement : •While «texttype»
	Statement : •While «while»
	Statement : •Write «backgroundtype»
	Statement : •Write «booltype»
	Statement : •Write «chartype»
	Statement : •Write «circletype»
	Statement : •Write «floattype»
	Statement : •Write «for»
	Statement : •Write «id»
	Statement : •Write «if»
	Statement : •Write «imagetype»
	Statement : •Write «inttype»
	Statement : •Write «list»
	Statement : •Write «print»
	Statement : •Write «return»
	Statement : •Write «squaretype»
	Statement : •Write «stringtype»
	Statement : •Write «texttype»
	Statement : •Write «while»
	Statement : •CallFunction semicolon «backgroundtype»
	Statement : •CallFunction semicolon «booltype»
	Statement : •CallFunction semicolon «chartype»
	Statement : •CallFunction semicolon «circletype»
	Statement : •CallFunction semicolon «floattype»
	Statement : •CallFunction semicolon «for»
	Statement : •CallFunction semicolon «id»
	Statement : •CallFunction semicolon «if»
	Statement : •CallFunction semicolon «imagetype»
	Statement : •CallFunction semicolon «inttype»
	Statement : •CallFunction semicolon «list»
	Statement : •CallFunction semicolon «print»
	Statement : •CallFunction semicolon «return»
	Statement : •CallFunction semicolon «squaretype»
	Statement : •CallFunction semicolon «stringtype»
	Statement : •CallFunction semicolon «texttype»
	Statement : •CallFunction semicolon «while»
	VarsDec : •Vars «rightbracket»
	Assign : •id equals Expression semicolon «rightbracket»
	Assign : •Attribute equals Expression semicolon «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block «rightbracket»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «rightbracket»
	Return : •return Expression semicolon «rightbracket»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «rightbracket»
	While : •while leftparenthesis Expression rightparenthesis Block «rightbracket»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «rightbracket»
	CallFunction : •id leftparenthesis CallFunctionAux rightparenthesis «semicolon»
	CallFunction : •id leftparenthesis rightparenthesis «semicolon»
	VarsDec : •Vars «backgroundtype»
	VarsDec : •Vars «booltype»
	VarsDec : •Vars «chartype»
	VarsDec : •Vars «circletype»
	VarsDec : •Vars «floattype»
	VarsDec : •Vars «for»
	VarsDec : •Vars «id»
	VarsDec : •Vars «if»
	VarsDec : •Vars «imagetype»
	VarsDec : •Vars «inttype»
	VarsDec : •Vars «list»
	VarsDec : •Vars «print»
	VarsDec : •Vars «return»
	VarsDec : •Vars «squaretype»
	VarsDec : •Vars «stringtype»
	VarsDec : •Vars «texttype»
	VarsDec : •Vars «while»
	Assign : •id equals Expression semicolon «backgroundtype»
	Assign : •Attribute equals Expression semicolon «backgroundtype»
	Assign : •id equals Expression semicolon «booltype»
	Assign : •Attribute equals Expression semicolon «booltype»
	Assign : •id equals Expression semicolon «chartype»
	Assign : •Attribute equals Expression semicolon «chartype»
	Assign : •id equals Expression semicolon «circletype»
	Assign : •Attribute equals Expression semicolon «circletype»
	Assign : •id equals Expression semicolon «floattype»
	Assign : •Attribute equals Expression semicolon «floattype»
	Assign : •id equals Expression semicolon «for»
	Assign : •Attribute equals Expression semicolon «for»
	Assign : •id equals Expression semicolon «id»
	Assign : •Attribute equals Expression semicolon «id»
	Assign : •id equals Expression semicolon «if»
	Assign : •Attribute equals Expression semicolon «if»
	Assign : •id equals Expression semicolon «imagetype»
	Assign : •Attribute equals Expression semicolon «imagetype»
	Assign : •id equals Expression semicolon «inttype»
	Assign : •Attribute equals Expression semicolon «inttype»
	Assign : •id equals Expression semicolon «list»
	Assign : •Attribute equals Expression semicolon «list»
	Assign : •id equals Expression semicolon «print»
	Assign : •Attribute equals Expression semicolon «print»
	Assign : •id equals Expression semicolon «return»
	Assign : •Attribute equals Expression semicolon «return»
	Assign : •id equals Expression semicolon «squaretype»
	Assign : •Attribute equals Expression semicolon «squaretype»
	Assign : •id equals Expression semicolon «stringtype»
	Assign : •Attribute equals Expression semicolon «stringtype»
	Assign : •id equals Expression semicolon «texttype»
	Assign : •Attribute equals Expression semicolon «texttype»
	Assign : •id equals Expression semicolon «while»
	Assign : •Attribute equals Expression semicolon «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «backgroundtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «booltype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «chartype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «circletype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «floattype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «for»
	Condition : •if leftparenthesis Expression rightparenthesis Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «id»
	Condition : •if leftparenthesis Expression rightparenthesis Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «if»
	Condition : •if leftparenthesis Expression rightparenthesis Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «imagetype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «inttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «list»
	Condition : •if leftparenthesis Expression rightparenthesis Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «print»
	Condition : •if leftparenthesis Expression rightparenthesis Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «return»
	Condition : •if leftparenthesis Expression rightparenthesis Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «squaretype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «stringtype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «texttype»
	Condition : •if leftparenthesis Expression rightparenthesis Block «while»
	Condition : •if leftparenthesis Expression rightparenthesis Block else Block «while»
	Return : •return Expression semicolon «backgroundtype»
	Return : •return Expression semicolon «booltype»
	Return : •return Expression semicolon «chartype»
	Return : •return Expression semicolon «circletype»
	Return : •return Expression semicolon «floattype»
	Return : •return Expression semicolon «for»
	Return : •return Expression semicolon «id»
	Return : •return Expression semicolon «if»
	Return : •return Expression semicolon «imagetype»
	Return : •return Expression semicolon «inttype»
	Return : •return Expression semicolon «list»
	Return : •return Expression semicolon «print»
	Return : •return Expression semicolon «return»
	Return : •return Expression semicolon «squaretype»
	Return : •return Expression semicolon «stringtype»
	Return : •return Expression semicolon «texttype»
	Return : •return Expression semicolon «while»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «backgroundtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «booltype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «chartype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «circletype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «floattype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «for»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «id»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «if»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «imagetype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «inttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «list»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «print»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «return»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «squaretype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «stringtype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «texttype»
	For : •for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block «while»
	While : •while leftparenthesis Expression rightparenthesis Block «backgroundtype»
	While : •while leftparenthesis Expression rightparenthesis Block «booltype»
	While : •while leftparenthesis Expression rightparenthesis Block «chartype»
	While : •while leftparenthesis Expression rightparenthesis Block «circletype»
	While : •while leftparenthesis Expression rightparenthesis Block «floattype»
	While : •while leftparenthesis Expression rightparenthesis Block «for»
	While : •while leftparenthesis Expression rightparenthesis Block «id»
	While : •while leftparenthesis Expression rightparenthesis Block «if»
	While : •while leftparenthesis Expression rightparenthesis Block «imagetype»
	While : •while leftparenthesis Expression rightparenthesis Block «inttype»
	While : •while leftparenthesis Expression rightparenthesis Block «list»
	While : •while leftparenthesis Expression rightparenthesis Block «print»
	While : •while leftparenthesis Expression rightparenthesis Block «return»
	While : •while leftparenthesis Expression rightparenthesis Block «squaretype»
	While : •while leftparenthesis Expression rightparenthesis Block «stringtype»
	While : •while leftparenthesis Expression rightparenthesis Block «texttype»
	While : •while leftparenthesis Expression rightparenthesis Block «while»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «backgroundtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «booltype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «chartype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «circletype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «floattype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «for»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «id»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «if»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «imagetype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «inttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «list»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «print»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «return»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «squaretype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «stringtype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «texttype»
	Write : •print leftparenthesis Expression rightparenthesis semicolon «while»
	Vars : •Type Ids semicolon Vars «rightbracket»
	Vars : •Type Ids semicolon «rightbracket»
	Attribute : •id dot id «equals»
	Vars : •Type Ids semicolon Vars «backgroundtype»
	Vars : •Type Ids semicolon «backgroundtype»
	Vars : •Type Ids semicolon Vars «booltype»
	Vars : •Type Ids semicolon «booltype»
	Vars : •Type Ids semicolon Vars «chartype»
	Vars : •Type Ids semicolon «chartype»
	Vars : •Type Ids semicolon Vars «circletype»
	Vars : •Type Ids semicolon «circletype»
	Vars : •Type Ids semicolon Vars «floattype»
	Vars : •Type Ids semicolon «floattype»
	Vars : •Type Ids semicolon Vars «for»
	Vars : •Type Ids semicolon «for»
	Vars : •Type Ids semicolon Vars «id»
	Vars : •Type Ids semicolon «id»
	Vars : •Type Ids semicolon Vars «if»
	Vars : •Type Ids semicolon «if»
	Vars : •Type Ids semicolon Vars «imagetype»
	Vars : •Type Ids semicolon «imagetype»
	Vars : •Type Ids semicolon Vars «inttype»
	Vars : •Type Ids semicolon «inttype»
	Vars : •Type Ids semicolon Vars «list»
	Vars : •Type Ids semicolon «list»
	Vars : •Type Ids semicolon Vars «print»
	Vars : •Type Ids semicolon «print»
	Vars : •Type Ids semicolon Vars «return»
	Vars : •Type Ids semicolon «return»
	Vars : •Type Ids semicolon Vars «squaretype»
	Vars : •Type Ids semicolon «squaretype»
	Vars : •Type Ids semicolon Vars «stringtype»
	Vars : •Type Ids semicolon «stringtype»
	Vars : •Type Ids semicolon Vars «texttype»
	Vars : •Type Ids semicolon «texttype»
	Vars : •Type Ids semicolon Vars «while»
	Vars : •Type Ids semicolon «while»
	Type : •BasicType «id»
	Type : •list leftsqrbracket BasicType rightsqrbracket «id»
	BasicType : •inttype «id»
	BasicType : •floattype «id»
	BasicType : •booltype «id»
	BasicType : •stringtype «id»
	BasicType : •chartype «id»
	BasicType : •Object «id»
	Object : •squaretype «id»
	Object : •circletype «id»
	Object : •imagetype «id»
	Object : •texttype «id»
	Object : •backgroundtype «id»
}
Transitions:
	BasicType -> 9
	inttype -> 10
	floattype -> 11
	booltype -> 12
	stringtype -> 13
	chartype -> 14
	Object -> 15
	squaretype -> 16
	circletype -> 17
	imagetype -> 18
	texttype -> 19
	backgroundtype -> 20
	list -> 21
	id -> 58
	Vars -> 60
	Type -> 61
	VarsDec -> 62
	Statement -> 64
	Assign -> 65
	Condition -> 66
	Return -> 67
	For -> 68
	While -> 69
	Write -> 70
	CallFunction -> 71
	Attribute -> 72
	print -> 73
	if -> 74
	return -> 75
	for -> 76
	while -> 77
	rightbracket -> 272
	BlockAux -> 273


S251{
	While : while leftparenthesis Expression rightparenthesis Block• «rightbracket»
	While : while leftparenthesis Expression rightparenthesis Block• «backgroundtype»
	While : while leftparenthesis Expression rightparenthesis Block• «booltype»
	While : while leftparenthesis Expression rightparenthesis Block• «chartype»
	While : while leftparenthesis Expression rightparenthesis Block• «circletype»
	While : while leftparenthesis Expression rightparenthesis Block• «floattype»
	While : while leftparenthesis Expression rightparenthesis Block• «for»
	While : while leftparenthesis Expression rightparenthesis Block• «id»
	While : while leftparenthesis Expression rightparenthesis Block• «if»
	While : while leftparenthesis Expression rightparenthesis Block• «imagetype»
	While : while leftparenthesis Expression rightparenthesis Block• «inttype»
	While : while leftparenthesis Expression rightparenthesis Block• «list»
	While : while leftparenthesis Expression rightparenthesis Block• «print»
	While : while leftparenthesis Expression rightparenthesis Block• «return»
	While : while leftparenthesis Expression rightparenthesis Block• «squaretype»
	While : while leftparenthesis Expression rightparenthesis Block• «stringtype»
	While : while leftparenthesis Expression rightparenthesis Block• «texttype»
	While : while leftparenthesis Expression rightparenthesis Block• «while»
}
Transitions:


S252{
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «rightparenthesis»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «mult»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «div»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «plus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «minus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «relop»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «comma»
}
Transitions:


S253{
	ListElem : id leftsqrbracket Expression rightsqrbracket• «rightparenthesis»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «mult»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «div»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «plus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «minus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «logicalop»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «relop»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «comma»
}
Transitions:


S254{
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «rightparenthesis»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «mult»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «div»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «plus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «minus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «relop»
}
Transitions:


S255{
	ListElem : id leftsqrbracket Expression rightsqrbracket• «rightparenthesis»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «mult»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «div»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «plus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «minus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «logicalop»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «relop»
}
Transitions:


S256{
	Block : leftbracket rightbracket• «rightbracket»
	Block : leftbracket rightbracket• «else»
	Block : leftbracket rightbracket• «backgroundtype»
	Block : leftbracket rightbracket• «booltype»
	Block : leftbracket rightbracket• «chartype»
	Block : leftbracket rightbracket• «circletype»
	Block : leftbracket rightbracket• «floattype»
	Block : leftbracket rightbracket• «for»
	Block : leftbracket rightbracket• «id»
	Block : leftbracket rightbracket• «if»
	Block : leftbracket rightbracket• «imagetype»
	Block : leftbracket rightbracket• «inttype»
	Block : leftbracket rightbracket• «list»
	Block : leftbracket rightbracket• «print»
	Block : leftbracket rightbracket• «return»
	Block : leftbracket rightbracket• «squaretype»
	Block : leftbracket rightbracket• «stringtype»
	Block : leftbracket rightbracket• «texttype»
	Block : leftbracket rightbracket• «while»
}
Transitions:


S257{
	Block : leftbracket BlockAux •rightbracket «rightbracket»
	Block : leftbracket BlockAux •rightbracket «else»
	Block : leftbracket BlockAux •rightbracket «backgroundtype»
	Block : leftbracket BlockAux •rightbracket «booltype»
	Block : leftbracket BlockAux •rightbracket «chartype»
	Block : leftbracket BlockAux •rightbracket «circletype»
	Block : leftbracket BlockAux •rightbracket «floattype»
	Block : leftbracket BlockAux •rightbracket «for»
	Block : leftbracket BlockAux •rightbracket «id»
	Block : leftbracket BlockAux •rightbracket «if»
	Block : leftbracket BlockAux •rightbracket «imagetype»
	Block : leftbracket BlockAux •rightbracket «inttype»
	Block : leftbracket BlockAux •rightbracket «list»
	Block : leftbracket BlockAux •rightbracket «print»
	Block : leftbracket BlockAux •rightbracket «return»
	Block : leftbracket BlockAux •rightbracket «squaretype»
	Block : leftbracket BlockAux •rightbracket «stringtype»
	Block : leftbracket BlockAux •rightbracket «texttype»
	Block : leftbracket BlockAux •rightbracket «while»
}
Transitions:
	rightbracket -> 274


S258{
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «rightbracket»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «backgroundtype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «booltype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «chartype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «circletype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «floattype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «for»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «id»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «if»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «imagetype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «inttype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «list»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «print»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «return»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «squaretype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «stringtype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «texttype»
	Condition : if leftparenthesis Expression rightparenthesis Block else •Block «while»
	Block : •leftbracket BlockAux rightbracket «rightbracket»
	Block : •leftbracket rightbracket «rightbracket»
	Block : •leftbracket BlockAux rightbracket «backgroundtype»
	Block : •leftbracket rightbracket «backgroundtype»
	Block : •leftbracket BlockAux rightbracket «booltype»
	Block : •leftbracket rightbracket «booltype»
	Block : •leftbracket BlockAux rightbracket «chartype»
	Block : •leftbracket rightbracket «chartype»
	Block : •leftbracket BlockAux rightbracket «circletype»
	Block : •leftbracket rightbracket «circletype»
	Block : •leftbracket BlockAux rightbracket «floattype»
	Block : •leftbracket rightbracket «floattype»
	Block : •leftbracket BlockAux rightbracket «for»
	Block : •leftbracket rightbracket «for»
	Block : •leftbracket BlockAux rightbracket «id»
	Block : •leftbracket rightbracket «id»
	Block : •leftbracket BlockAux rightbracket «if»
	Block : •leftbracket rightbracket «if»
	Block : •leftbracket BlockAux rightbracket «imagetype»
	Block : •leftbracket rightbracket «imagetype»
	Block : •leftbracket BlockAux rightbracket «inttype»
	Block : •leftbracket rightbracket «inttype»
	Block : •leftbracket BlockAux rightbracket «list»
	Block : •leftbracket rightbracket «list»
	Block : •leftbracket BlockAux rightbracket «print»
	Block : •leftbracket rightbracket «print»
	Block : •leftbracket BlockAux rightbracket «return»
	Block : •leftbracket rightbracket «return»
	Block : •leftbracket BlockAux rightbracket «squaretype»
	Block : •leftbracket rightbracket «squaretype»
	Block : •leftbracket BlockAux rightbracket «stringtype»
	Block : •leftbracket rightbracket «stringtype»
	Block : •leftbracket BlockAux rightbracket «texttype»
	Block : •leftbracket rightbracket «texttype»
	Block : •leftbracket BlockAux rightbracket «while»
	Block : •leftbracket rightbracket «while»
}
Transitions:
	leftbracket -> 250
	Block -> 275


S259{
	CallFunction : id leftparenthesis rightparenthesis• «rightsqrbracket»
	CallFunction : id leftparenthesis rightparenthesis• «mult»
	CallFunction : id leftparenthesis rightparenthesis• «div»
	CallFunction : id leftparenthesis rightparenthesis• «plus»
	CallFunction : id leftparenthesis rightparenthesis• «minus»
	CallFunction : id leftparenthesis rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis rightparenthesis• «relop»
}
Transitions:


S260{
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «rightsqrbracket»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «mult»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «div»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «plus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «minus»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux •rightparenthesis «relop»
}
Transitions:
	rightparenthesis -> 276


S261{
	ListElem : id leftsqrbracket Expression •rightsqrbracket «rightsqrbracket»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «mult»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «div»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «plus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «minus»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «logicalop»
	ListElem : id leftsqrbracket Expression •rightsqrbracket «relop»
}
Transitions:
	rightsqrbracket -> 277


S262{
	Attribute : id dot id• «rightsqrbracket»
	Attribute : id dot id• «mult»
	Attribute : id dot id• «div»
	Attribute : id dot id• «plus»
	Attribute : id dot id• «minus»
	Attribute : id dot id• «logicalop»
	Attribute : id dot id• «relop»
}
Transitions:


S263{
	Factor : leftparenthesis Expression rightparenthesis• «rightsqrbracket»
	Factor : leftparenthesis Expression rightparenthesis• «mult»
	Factor : leftparenthesis Expression rightparenthesis• «div»
	Factor : leftparenthesis Expression rightparenthesis• «plus»
	Factor : leftparenthesis Expression rightparenthesis• «minus»
	Factor : leftparenthesis Expression rightparenthesis• «logicalop»
	Factor : leftparenthesis Expression rightparenthesis• «relop»
}
Transitions:


S264{
	Expression : Exp Operations Expression• «rightsqrbracket»
}
Transitions:


S265{
	Exp : Term plus Exp• «rightsqrbracket»
	Exp : Term plus Exp• «logicalop»
	Exp : Term plus Exp• «relop»
}
Transitions:


S266{
	Exp : Term minus Exp• «rightsqrbracket»
	Exp : Term minus Exp• «logicalop»
	Exp : Term minus Exp• «relop»
}
Transitions:


S267{
	Term : Factor mult Term• «rightsqrbracket»
	Term : Factor mult Term• «plus»
	Term : Factor mult Term• «minus»
	Term : Factor mult Term• «logicalop»
	Term : Factor mult Term• «relop»
}
Transitions:


S268{
	Term : Factor div Term• «rightsqrbracket»
	Term : Factor div Term• «plus»
	Term : Factor div Term• «minus»
	Term : Factor div Term• «logicalop»
	Term : Factor div Term• «relop»
}
Transitions:


S269{
	Assign : id equals Expression semicolon• «ctebool»
	Assign : id equals Expression semicolon• «ctechar»
	Assign : id equals Expression semicolon• «ctefloat»
	Assign : id equals Expression semicolon• «cteint»
	Assign : id equals Expression semicolon• «ctestring»
	Assign : id equals Expression semicolon• «id»
	Assign : id equals Expression semicolon• «leftparenthesis»
}
Transitions:


S270{
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «rightbracket»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «backgroundtype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «booltype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «chartype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «circletype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «floattype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «for»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «id»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «if»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «imagetype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «inttype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «list»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «print»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «return»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «squaretype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «stringtype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «texttype»
	For : for leftparenthesis Assign Expression semicolon Expression •rightparenthesis Block «while»
}
Transitions:
	rightparenthesis -> 278


S271{
	Assign : Attribute equals Expression semicolon• «ctebool»
	Assign : Attribute equals Expression semicolon• «ctechar»
	Assign : Attribute equals Expression semicolon• «ctefloat»
	Assign : Attribute equals Expression semicolon• «cteint»
	Assign : Attribute equals Expression semicolon• «ctestring»
	Assign : Attribute equals Expression semicolon• «id»
	Assign : Attribute equals Expression semicolon• «leftparenthesis»
}
Transitions:


S272{
	Block : leftbracket rightbracket• «rightbracket»
	Block : leftbracket rightbracket• «backgroundtype»
	Block : leftbracket rightbracket• «booltype»
	Block : leftbracket rightbracket• «chartype»
	Block : leftbracket rightbracket• «circletype»
	Block : leftbracket rightbracket• «floattype»
	Block : leftbracket rightbracket• «for»
	Block : leftbracket rightbracket• «id»
	Block : leftbracket rightbracket• «if»
	Block : leftbracket rightbracket• «imagetype»
	Block : leftbracket rightbracket• «inttype»
	Block : leftbracket rightbracket• «list»
	Block : leftbracket rightbracket• «print»
	Block : leftbracket rightbracket• «return»
	Block : leftbracket rightbracket• «squaretype»
	Block : leftbracket rightbracket• «stringtype»
	Block : leftbracket rightbracket• «texttype»
	Block : leftbracket rightbracket• «while»
}
Transitions:


S273{
	Block : leftbracket BlockAux •rightbracket «rightbracket»
	Block : leftbracket BlockAux •rightbracket «backgroundtype»
	Block : leftbracket BlockAux •rightbracket «booltype»
	Block : leftbracket BlockAux •rightbracket «chartype»
	Block : leftbracket BlockAux •rightbracket «circletype»
	Block : leftbracket BlockAux •rightbracket «floattype»
	Block : leftbracket BlockAux •rightbracket «for»
	Block : leftbracket BlockAux •rightbracket «id»
	Block : leftbracket BlockAux •rightbracket «if»
	Block : leftbracket BlockAux •rightbracket «imagetype»
	Block : leftbracket BlockAux •rightbracket «inttype»
	Block : leftbracket BlockAux •rightbracket «list»
	Block : leftbracket BlockAux •rightbracket «print»
	Block : leftbracket BlockAux •rightbracket «return»
	Block : leftbracket BlockAux •rightbracket «squaretype»
	Block : leftbracket BlockAux •rightbracket «stringtype»
	Block : leftbracket BlockAux •rightbracket «texttype»
	Block : leftbracket BlockAux •rightbracket «while»
}
Transitions:
	rightbracket -> 279


S274{
	Block : leftbracket BlockAux rightbracket• «rightbracket»
	Block : leftbracket BlockAux rightbracket• «else»
	Block : leftbracket BlockAux rightbracket• «backgroundtype»
	Block : leftbracket BlockAux rightbracket• «booltype»
	Block : leftbracket BlockAux rightbracket• «chartype»
	Block : leftbracket BlockAux rightbracket• «circletype»
	Block : leftbracket BlockAux rightbracket• «floattype»
	Block : leftbracket BlockAux rightbracket• «for»
	Block : leftbracket BlockAux rightbracket• «id»
	Block : leftbracket BlockAux rightbracket• «if»
	Block : leftbracket BlockAux rightbracket• «imagetype»
	Block : leftbracket BlockAux rightbracket• «inttype»
	Block : leftbracket BlockAux rightbracket• «list»
	Block : leftbracket BlockAux rightbracket• «print»
	Block : leftbracket BlockAux rightbracket• «return»
	Block : leftbracket BlockAux rightbracket• «squaretype»
	Block : leftbracket BlockAux rightbracket• «stringtype»
	Block : leftbracket BlockAux rightbracket• «texttype»
	Block : leftbracket BlockAux rightbracket• «while»
}
Transitions:


S275{
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «rightbracket»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «backgroundtype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «booltype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «chartype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «circletype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «floattype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «for»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «id»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «if»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «imagetype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «inttype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «list»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «print»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «return»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «squaretype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «stringtype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «texttype»
	Condition : if leftparenthesis Expression rightparenthesis Block else Block• «while»
}
Transitions:


S276{
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «rightsqrbracket»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «mult»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «div»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «plus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «minus»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «logicalop»
	CallFunction : id leftparenthesis CallFunctionAux rightparenthesis• «relop»
}
Transitions:


S277{
	ListElem : id leftsqrbracket Expression rightsqrbracket• «rightsqrbracket»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «mult»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «div»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «plus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «minus»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «logicalop»
	ListElem : id leftsqrbracket Expression rightsqrbracket• «relop»
}
Transitions:


S278{
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «rightbracket»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «backgroundtype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «booltype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «chartype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «circletype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «floattype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «for»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «id»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «if»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «imagetype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «inttype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «list»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «print»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «return»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «squaretype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «stringtype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «texttype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis •Block «while»
	Block : •leftbracket BlockAux rightbracket «rightbracket»
	Block : •leftbracket rightbracket «rightbracket»
	Block : •leftbracket BlockAux rightbracket «backgroundtype»
	Block : •leftbracket rightbracket «backgroundtype»
	Block : •leftbracket BlockAux rightbracket «booltype»
	Block : •leftbracket rightbracket «booltype»
	Block : •leftbracket BlockAux rightbracket «chartype»
	Block : •leftbracket rightbracket «chartype»
	Block : •leftbracket BlockAux rightbracket «circletype»
	Block : •leftbracket rightbracket «circletype»
	Block : •leftbracket BlockAux rightbracket «floattype»
	Block : •leftbracket rightbracket «floattype»
	Block : •leftbracket BlockAux rightbracket «for»
	Block : •leftbracket rightbracket «for»
	Block : •leftbracket BlockAux rightbracket «id»
	Block : •leftbracket rightbracket «id»
	Block : •leftbracket BlockAux rightbracket «if»
	Block : •leftbracket rightbracket «if»
	Block : •leftbracket BlockAux rightbracket «imagetype»
	Block : •leftbracket rightbracket «imagetype»
	Block : •leftbracket BlockAux rightbracket «inttype»
	Block : •leftbracket rightbracket «inttype»
	Block : •leftbracket BlockAux rightbracket «list»
	Block : •leftbracket rightbracket «list»
	Block : •leftbracket BlockAux rightbracket «print»
	Block : •leftbracket rightbracket «print»
	Block : •leftbracket BlockAux rightbracket «return»
	Block : •leftbracket rightbracket «return»
	Block : •leftbracket BlockAux rightbracket «squaretype»
	Block : •leftbracket rightbracket «squaretype»
	Block : •leftbracket BlockAux rightbracket «stringtype»
	Block : •leftbracket rightbracket «stringtype»
	Block : •leftbracket BlockAux rightbracket «texttype»
	Block : •leftbracket rightbracket «texttype»
	Block : •leftbracket BlockAux rightbracket «while»
	Block : •leftbracket rightbracket «while»
}
Transitions:
	leftbracket -> 250
	Block -> 280


S279{
	Block : leftbracket BlockAux rightbracket• «rightbracket»
	Block : leftbracket BlockAux rightbracket• «backgroundtype»
	Block : leftbracket BlockAux rightbracket• «booltype»
	Block : leftbracket BlockAux rightbracket• «chartype»
	Block : leftbracket BlockAux rightbracket• «circletype»
	Block : leftbracket BlockAux rightbracket• «floattype»
	Block : leftbracket BlockAux rightbracket• «for»
	Block : leftbracket BlockAux rightbracket• «id»
	Block : leftbracket BlockAux rightbracket• «if»
	Block : leftbracket BlockAux rightbracket• «imagetype»
	Block : leftbracket BlockAux rightbracket• «inttype»
	Block : leftbracket BlockAux rightbracket• «list»
	Block : leftbracket BlockAux rightbracket• «print»
	Block : leftbracket BlockAux rightbracket• «return»
	Block : leftbracket BlockAux rightbracket• «squaretype»
	Block : leftbracket BlockAux rightbracket• «stringtype»
	Block : leftbracket BlockAux rightbracket• «texttype»
	Block : leftbracket BlockAux rightbracket• «while»
}
Transitions:


S280{
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «rightbracket»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «backgroundtype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «booltype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «chartype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «circletype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «floattype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «for»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «id»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «if»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «imagetype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «inttype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «list»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «print»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «return»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «squaretype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «stringtype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «texttype»
	For : for leftparenthesis Assign Expression semicolon Expression rightparenthesis Block• «while»
}
Transitions:


