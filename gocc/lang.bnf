
/*
BNF File for compiler written in Go

*Insert compiler name*

Developed by:
	- Moisés Fernández
	- Víctor Villarreal
*/

/* Lexical Part */

_letter: 'a' - 'z' | 'A' - 'Z';
_digit: '0' - '9';
_id : _letter {(_letter | _digit)};
_integer: _digit {_digit};
_float: _digit {_digit} '.' _digit {_digit};
_string: '"' {_digit | _letter | ' ' | '#' |'!' | '?'} '"';
_true: 't' 'r' 'u' 'e';
_false: 'f' 'a' 'l' 's' 'e';
_boolean: _true | _false;

!ws : ' ' | '\t' | '\n' | '\r';

program: 'p' 'r' 'o' 'g' 'r' 'a' 'm';
inttype: 'i' 'n' 't';
floattype: 'f' 'l' 'o' 'a' 't';
stringtype: 's' 't' 'r' 'i' 'n' 'g';
booltype: 'b' 'o' 'o' 'l';
voidtype: 'v' 'o' 'i' 'd';
squaretype: 'S' 'q' 'u' 'a' 'r' 'e';
circletype: 'C' 'i' 'r' 'c' 'l' 'e';
imagetype: 'I' 'm' 'a' 'g' 'e';
texttype: 'T' 'e' 'x' 't';
backgroundtype: 'B' 'a' 'c' 'k' 'g' 'r' 'o' 'u' 'n' 'd';
if: 'i' 'f';
else: 'e' 'l' 's' 'e';
while: 'w' 'h' 'i' 'l' 'e';
for: 'f' 'o' 'r';
/*print: 'p' 'r' 'i' 'n' 't';*/
return: 'r' 'e' 't' 'u' 'r' 'n';
relop: '<' | '>' | '<' '=' | '>' '=' | '<' '>' | '=' '=';
logicalop: '&' '&' | '|' '|';
plus: '+';
minus:  '-'; 
mult: '*'; 
div: '/';
leftparenthesis: '(';
rightparenthesis: ')';
leftbracket: '{';
rightbracket: '}';
leftsqrbracket: '[';
rightsqrbracket: ']';
colon: ':';
semicolon: ';';
dot: '.';
comma: ',';
equals: '=';
/* main: 'm' 'a' 'i' 'n';
 tick: 't' 'i' 'c' 'k'; 
setColor: 's' 'e' 't' 'C' 'o' 'l' 'o' 'r';
setSize: 's' 'e' 't' 'S' 'i' 'z' 'e';
setPosition: 's' 'e' 't' 'P' 'o' 's' 'i' 't' 'i' 'o' 'n';
move: 'm' 'o' 'v' 'e';
setText: 's' 'e' 't' 'T' 'e' 'x' 't';
keyPressed: 'k' 'e' 'y' 'P' 'r' 'e' 's' 's' 'e' 'd';
setFontSize: 's' 'e' 't' 'F' 'o' 'n' 't' 'S' 'i' 'z' 'e';
loadImage: 'l' 'o' 'a' 'd' 'I' 'm' 'a' 'g' 'e';
checkCollision: 'c' 'h' 'e' 'c' 'k' 'C' 'o' 'l' 'l' 'i' 's' 'i' 'o' 'n';
setImage: 's' 'e' 't' 'I' 'm' 'a' 'g' 'e';
pow: 'p' 'o' 'w';
squareRoot: 's' 'q' 'u' 'a' 'r' 'e' 'R' 'o' 'o' 't';
render: 'r' 'e' 'n' 'd' 'e' 'r';
*/
list: 'l' 'i' 's' 't';


cteint: _integer;
ctefloat: _float;
ctestring: _string;
ctebool: _boolean;
id: _id;

/*  Syntax Part */

<< import "github.com/sdkvictor/golang-compiler/ast" >>

Programa
    : program id semicolon leftbracket VarsOp rightbracket Functions    << ast.NewProgram($1, $4, $6) >> 
    ;

VarsOp
    : Vars
    | empty
    ;

Vars
    : Type Ids semicolon Vars 
    | Type Ids semicolon
    ;

Ids
    : id comma Ids
    | id
    ;

Params
    : ParamsAux 
    | empty
    ;
    
ParamsAux
    : Type id comma ParamsAux << ast.AppendParamsList($0, $1, $3) >>
    | Type id
    ;

Functions
    : FunctionsAux id leftparenthesis Params rightparenthesis Block Functions       << ast.AppendFunctionList($0, $1, $3, $5, $6) >>
    |  FunctionsAux id leftparenthesis Params rightparenthesis Block                << ast.NewFunctionList($0, $1, $3, $5) >>
    ;

FunctionsAux
    : Type               << ast.NewType($0) >>
    | voidtype           << ast.NewType($0) >>
    ; 

Block
    :  leftbracket BlockAux rightbracket        
    |  leftbracket rightbracket                 
    ;

BlockAux
    : Statement             <<ast.NewStatementList($0)>>
    | Statement BlockAux    <<ast.AppendStatement($0, $1)>>
    ;

Statement
    : Vars
    | Assign
    | Condition
    | Return
    | For
    | While
    | CallFunction semicolon
    | CallClassFunction semicolon
    ;

BasicType
    : inttype
    | floattype
    | booltype
    | stringtype
    | Object
    ;

Object
    : squaretype
    | circletype
    | imagetype
    | texttype
    | backgroundtype
    ;

Expression
    : ExpressionAux /* Creas objecto Expression*/
    ;

ExpressionAux
    : Exp // crear el objeto Exp con lista de terms y creas lista de Exp
    | Exp Operations ExpressionAux //append a lista de Exp
    ;

Operations
    : relop
	| logicalop
    ;

Exp
    : Term // crear objecto Term con lista de factores y creas lista de Term
    | Term plus Exp // crear el objeto Term y agregar a lista
    | Term minus Exp
    ;

Term
    : Factor // creas lista de Factor y agregas primer Factor
	| Factor mult Term // Append Factor a lista de factores (Term)
	| Factor div Term
    ;

Factor
    : leftparenthesis Expression rightparenthesis // creas Factor con Expression adentro
    | plus Varcte
    | minus Varcte
    | Varcte // creas el nodo Factor con varcte adentro
    ;

Assign
    : id equals Expression semicolon
	| Attribute equals Expression semicolon
    ;

Condition
    : if leftparenthesis Expression rightparenthesis Block 
    | if leftparenthesis Expression rightparenthesis Block else Block
    ; 

        
WriteAux
    : Expression comma WriteAux
    | ctestring comma WriteAux
    | Expression
    | ctestring
    ;

Return
    : return Expression semicolon
    ;

For
    : for leftparenthesis Assign semicolon Expression semicolon Expression semicolon rightparenthesis Block
    ;

While
    : while leftparenthesis Expression rightparenthesis Block
    ;

CallFunction
    : id leftparenthesis CallFunctionAux rightparenthesis 
    |  id leftparenthesis rightparenthesis 
    ;

CallClassFunction
    : id dot id leftparenthesis CallFunctionAux rightparenthesis 
    | id dot id leftparenthesis rightparenthesis 
    ;
                 

CallFunctionAux
    : Expression
    | Expression comma CallFunctionAux 
    ;

Varcte
    : id
    | cteint 
    | ctefloat
    | ctestring
    | ListElem
    | ctebool
    | Attribute
    | CallFunction
    | CallClassFunction
    ;

ListElem
    : id leftsqrbracket Expression rightsqrbracket
    ;
Type 
    : BasicType
    | list leftsqrbracket BasicType rightsqrbracket 
    ;

Attribute 
    : id dot id
    ;
    
/*
Main
    : voidtype main leftparenthesis rightparenthesis Block
    ;

Tick
    : voidtype tick leftparenthesis rightparenthesis Block
    ;

    

SetColor
    : setColor leftparenthesis ctestring rightparenthesis
    ;



SetSize
    : setSize leftparenthesis cteint comma cteint rightparenthesis
    ;

SetPosition
    : setPosition leftparenthesis cteint comma cteint rightparenthesis
    ;

Move
    : move leftparenthesis cteint comma cteint rightparenthesis
    ;

SetText
    : setText leftparenthesis ctestring rightparenthesis
    ;

Render
    : render leftparenthesis rightparenthesis
    ;

KeyPressed 
    : keyPressed leftparenthesis ctestring rightparenthesis
    ;

SetFontSize
    : setFontSize leftparenthesis cteint rightparenthesis
    ;



LoadImage 
    : loadImage leftparenthesis ctestring rightparenthesis
    ;

CheckCollision
    : checkCollision leftparenthesis Object dot Object rightparenthesis
    ;

SetImage
    : setImage leftparenthesis ctestring rightparenthesis
    ;

Pow 
    : pow leftparenthesis ctefloat comma ctefloat rightparenthesis
    ;

SquareRoot
    : squareRoot leftparenthesis ctefloat rightparenthesis
    ;


PredefinedFunction
    : SetColor
    | SetSize
    | SetPosition
    | Move
    | SetText
    | KeyPressed
    | SetFontSize
    | Render 
    | LoadImage
    | CheckCollision
    | SetImage
    | Pow
    | SquareRoot
    ;

    */