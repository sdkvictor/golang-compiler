
/*
BNF File for compiler written in Go

*Insert compiler name*

Developed by:
f	- Moisés Fernández
	- Víctor Villarreal
*/

/* Lexical Part */

_letter: 'a' - 'z' | 'A' - 'Z';
_digit: '0' - '9';
_id : _letter {(_letter | _digit)};
_integer: _digit {_digit};
_float: _digit {_digit} '.' _digit {_digit};
_string: '"' {_digit | _letter | ' ' | '#' |'!' | '?'} '"';
_true: 't' 'r' 'u' 'e';
_false: 'f' 'a' 'l' 's' 'e';
_boolean: _true | _false;

!ws : ' ' | '\t' | '\n' | '\r';

program: 'p' 'r' 'o' 'g' 'r' 'a' 'm';
inttype: 'i' 'n' 't';
floattype: 'f' 'l' 'o' 'a' 't';
stringtype: 's' 't' 'r' 'i' 'n' 'g';
booltype: 'b' 'o' 'o' 'l';
chartype: 'c' 'h' 'a' 'r';
voidtype: 'v' 'o' 'i' 'd';
squaretype: 'S' 'q' 'u' 'a' 'r' 'e';
circletype: 'C' 'i' 'r' 'c' 'l' 'e';
imagetype: 'I' 'm' 'a' 'g' 'e';
texttype: 'T' 'e' 'x' 't';
backgroundtype: 'B' 'a' 'c' 'k' 'g' 'r' 'o' 'u' 'n' 'd';
if: 'i' 'f';
else: 'e' 'l' 's' 'e';
while: 'w' 'h' 'i' 'l' 'e';
for: 'f' 'o' 'r';
print: 'p' 'r' 'i' 'n' 't';
return: 'r' 'e' 't' 'u' 'r' 'n';
relop: '<' | '>' | '<' '=' | '>' '=' | '<' '>' | '=' '=';
logicalop: '&' '&' | '|' '|';
plus: '+';
minus:  '-'; 
mult: '*'; 
div: '/';
leftparenthesis: '(';
rightparenthesis: ')';
leftbracket: '{';
rightbracket: '}';
leftsqrbracket: '[';
rightsqrbracket: ']';
colon: ':';
semicolon: ';';
dot: '.';
comma: ',';
equals: '=';
/* main: 'm' 'a' 'i' 'n';
 tick: 't' 'i' 'c' 'k'; 
setColor: 's' 'e' 't' 'C' 'o' 'l' 'o' 'r';
setSize: 's' 'e' 't' 'S' 'i' 'z' 'e';
setPosition: 's' 'e' 't' 'P' 'o' 's' 'i' 't' 'i' 'o' 'n';
move: 'm' 'o' 'v' 'e';
setText: 's' 'e' 't' 'T' 'e' 'x' 't';
keyPressed: 'k' 'e' 'y' 'P' 'r' 'e' 's' 's' 'e' 'd';
setFontSize: 's' 'e' 't' 'F' 'o' 'n' 't' 'S' 'i' 'z' 'e';
loadImage: 'l' 'o' 'a' 'd' 'I' 'm' 'a' 'g' 'e';
checkCollision: 'c' 'h' 'e' 'c' 'k' 'C' 'o' 'l' 'l' 'i' 's' 'i' 'o' 'n';
setImage: 's' 'e' 't' 'I' 'm' 'a' 'g' 'e';
pow: 'p' 'o' 'w';
squareRoot: 's' 'q' 'u' 'a' 'r' 'e' 'R' 'o' 'o' 't';
render: 'r' 'e' 'n' 'd' 'e' 'r';
*/
list: 'l' 'i' 's' 't';


cteint: ['-'] _integer;
ctefloat: ['-'] _float;
ctestring: _string;
ctebool: _boolean;
ctechar: '\'' (_letter | _digit | ' ') '\'';
id: _id;

/*  Syntax Part */

<< import (
    "github.com/sdkvictor/golang-compiler/ast"
    "github.com/sdkvictor/golang-compiler/directories"
    "github.com/sdkvictor/golang-compiler/gocc/token") >>

Programa
    : program id semicolon leftbracket VarsOp rightbracket Functions    << ast.NewProgram($1, $4, $6) >> 
    ;

VarsOp
    : Vars                                  << ($0), nil >> 
    | empty                                 << make([]*directories.VarEntry, 0), nil >>
    ;

Vars /*Arreglo de vars*/
    : Type Ids semicolon Vars                    << ast.AppendVarsList($0, $1, $3) >>                      
    | Type Ids semicolon                         << ast.NewVarsList($0, $1) >>      
    ;

VarsDec 
    : Vars                                      << ast.NewVarsDec($0) >>
    ;

Ids /* Arreglo de strings */
    : id comma Ids                              << ast.AppendIdList($0, $2) >>
    | id                                        << ast.NewIdList($0) >>
    ;

Params
    : ParamsAux                         << ($0), nil >>
    | empty                             << make([]*directories.VarEntry, 0), nil >>
    ;
    
ParamsAux
    : Type id comma ParamsAux             << ast.AppendParamsList($0, $1, $3) >>
    | Type id                             << ast.NewParamsList($0, $1) >>
    ;

Functions
    : FunctionsAux id leftparenthesis Params rightparenthesis Block Functions  << ast.AppendFunction($0, $1, $3, $5, $6) >>
    | FunctionsAux id leftparenthesis Params rightparenthesis Block            << ast.FirstFunction($0, $1, $3, $5) >> /*Creates Function node and adds it to a new function list */
    ;

FunctionsAux
    : Type                                  << $0, nil >>
    | voidtype                              << ast.NewType($0) >>
    ; 

Block
    :  leftbracket BlockAux rightbracket        << ($1), nil >>
    |  leftbracket rightbracket                 << make([]ast.Statement, 0), nil >>
    ;

BlockAux
    : Statement                     << ast.NewStatementList($0) >> 
    | Statement BlockAux            << ast.AppendStatementList($0, $1) >>
    ;

Statement
    : VarsDec                       << ast.NewStatement($0) >>
    | Assign semicolon              << ast.NewStatement($0) >>
    | Condition                     << ast.NewStatement($0) >>
    | Return                        << ast.NewStatement($0) >>
    | For                           << ast.NewStatement($0) >>
    | While                         << ast.NewStatement($0) >>
    | Write                         << ast.NewStatement($0) >>
    | CallFunction semicolon        << ast.NewStatement($0) >>
    ;

BasicType
    : inttype                       << ast.NewType($0) >>
    | floattype                     << ast.NewType($0) >>
    | booltype                      << ast.NewType($0) >>
    | stringtype                    << ast.NewType($0) >>
    | chartype                      << ast.NewType($0) >>
    | Object                        << ($0), nil >>
    ;

Object
    : squaretype                    << ast.NewType($0) >>
    | circletype                    << ast.NewType($0) >>
    | imagetype                     << ast.NewType($0) >>
    | texttype                      << ast.NewType($0) >>
    | backgroundtype                << ast.NewType($0) >>
    ;

/*
Expression
    : ExpressionAux << ast.NewExpression($0) >> /*Crear objeto Expression 
    ;
*/

Expression
    : Exp                        << ast.NewExpression($0) >>/* crear el objeto Exp con lista de terms y creas lista de Exp*/
    | Exp Operations Expression  << ast.AppendExpression($0, $1, $2) >>/*append a lista de Exp*/
    ;


Operations
    : relop
	| logicalop
    ;

Exp
    : Term /* crear objecto Term con lista de factores y creas lista de Term */ << ast.NewExp($0) >>
    | Term plus Exp /* crear el objeto Term y agregar a lista */                << ast.AppendExp($0,$1,$2) >>
    | Term minus Exp                                                            << ast.AppendExp($0,$1,$2) >>
    ;

Term
    : Factor /* creas el objeto Term y agregas primer Factor y regresas Term */                 << ast.NewTerm($0) >>   
	| Factor mult Term /* recibes factor, y agregas a objeto Term el factor y el operador */    << ast.AppendTerm($0,$1,$2) >>
	| Factor div Term                                                                           << ast.AppendTerm($0,$1,$2) >>
    ;

Factor
    : leftparenthesis Expression rightparenthesis   << ast.NewFactor($1) >> /*creas Factor con Expression adentro */ 
    | Varcte                                        << ast.NewVCFactor($0) >>/* creas el nodo Factor con varcte adentro*/
    ;

Assign
    : id equals Expression                                     << ast.NewAssignWithoutAttr($0, $2) >>
	| Attribute equals Expression                              << ast.NewAssignWithAttr($0, $2) >>
    ;

Write
    : print leftparenthesis Expression rightparenthesis semicolon         << ast.NewWrite($0, $2) >>
    ;

Condition
    : if leftparenthesis Expression rightparenthesis Block               << ast.NewConditionNoElseStmts($0, $2, $4) >>
    | if leftparenthesis Expression rightparenthesis Block else Block    << ast.NewCondition($0, $2, $4, $6 ) >>
    ; 


Return
    : return Expression semicolon                                       << ast.NewReturn($0, $1) >>
    ;

For
    : for leftparenthesis Assign semicolon Expression semicolon Assign rightparenthesis Block << ast.NewFor($0, $2, $4, $6, $8) >>
    ;

While
    : while leftparenthesis Expression rightparenthesis Block           << ast.NewWhile($0, $2, $4) >>
    ;

CallFunction
    : id leftparenthesis CallFunctionAux rightparenthesis               << ast.NewFunctionCall($0, $2) >>
    | id leftparenthesis rightparenthesis                               << ast.NewFunctionCallId($0) >>
    ;

CallFunctionAux
    : Expression                                                        << ast.NewArgumentExpression($0) >>
    | Expression comma CallFunctionAux                                  << ast.AppendArgumentExpression($0, $2) >>                              
    ;

Varcte
    : id                                                                << ast.NewAttribute($0, &token.Token{Lit: []byte("")}) >>
    | cteint                                                            << ast.NewConstantInt($0) >>
    | ctefloat                                                          << ast.NewConstantFloat($0) >>
    | ctestring                                                         << ast.NewConstantString($0) >>
    | ctechar                                                           << ast.NewConstantChar($0) >>
    | ctebool                                                           << ast.NewConstantBool($0) >>
    | ListElem                                                          << $0, nil >>
    | Attribute                                                         << $0, nil >>
    | CallFunction                                                      << $0, nil >>
    ;

ListElem
    : id leftsqrbracket Expression rightsqrbracket                      << ast.NewListElem($0, $2) >>
    ;
Type 
    : BasicType                                                         << ($0), nil>>
    | BasicType leftsqrbracket cteint rightsqrbracket                   << ast.NewTypeArray($0, $2) >>
    ;

Attribute 
    : id dot id                                                         << ast.NewAttribute($0, $2)>>
    ;
    
/*
Main
    : voidtype main leftparenthesis rightparenthesis Block
    ;

Tick
    : voidtype tick leftparenthesis rightparenthesis Block
    ;

    

SetColor
    : setColor leftparenthesis ctestring rightparenthesis
    ;



SetSize
    : setSize leftparenthesis cteint comma cteint rightparenthesis
    ;

SetPosition
    : setPosition leftparenthesis cteint comma cteint rightparenthesis
    ;

Move
    : move leftparenthesis cteint comma cteint rightparenthesis
    ;

SetText
    : setText leftparenthesis ctestring rightparenthesis
    ;

Render
    : render leftparenthesis rightparenthesis
    ;

KeyPressed 
    : keyPressed leftparenthesis ctestring rightparenthesis
    ;

SetFontSize
    : setFontSize leftparenthesis cteint rightparenthesis
    ;



LoadImage 
    : loadImage leftparenthesis ctestring rightparenthesis
    ;

CheckCollision
    : checkCollision leftparenthesis Object dot Object rightparenthesis
    ;

SetImage
    : setImage leftparenthesis ctestring rightparenthesis
    ;

Pow 
    : pow leftparenthesis ctefloat comma ctefloat rightparenthesis
    ;

SquareRoot
    : squareRoot leftparenthesis ctefloat rightparenthesis
    ;


PredefinedFunction
    : SetColor
    | SetSize
    | SetPosition
    | Move
    | SetText
    | KeyPressed
    | SetFontSize
    | Render 
    | LoadImage
    | CheckCollision
    | SetImage
    | Pow
    | SquareRoot
    ;

    */