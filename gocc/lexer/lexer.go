// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"golang-compiler/token"
)

const (
	NoState    = -1
	NumStates  = 208
	NumSymbols = 257
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'p'
1: 'r'
2: 'o'
3: 'g'
4: 'r'
5: 'a'
6: 'm'
7: 'i'
8: 'n'
9: 't'
10: 'f'
11: 'l'
12: 'o'
13: 'a'
14: 't'
15: 's'
16: 't'
17: 'r'
18: 'i'
19: 'n'
20: 'g'
21: 'b'
22: 'o'
23: 'o'
24: 'l'
25: 'v'
26: 'o'
27: 'i'
28: 'd'
29: 's'
30: 'q'
31: 'u'
32: 'a'
33: 'r'
34: 'e'
35: 'c'
36: 'i'
37: 'r'
38: 'c'
39: 'l'
40: 'e'
41: 'i'
42: 'm'
43: 'a'
44: 'g'
45: 'e'
46: 't'
47: 'e'
48: 'x'
49: 't'
50: 'b'
51: 'a'
52: 'c'
53: 'k'
54: 'g'
55: 'r'
56: 'o'
57: 'u'
58: 'n'
59: 'd'
60: 'i'
61: 'f'
62: 'e'
63: 'l'
64: 's'
65: 'e'
66: 'w'
67: 'h'
68: 'i'
69: 'l'
70: 'e'
71: 'f'
72: 'o'
73: 'r'
74: 'p'
75: 'r'
76: 'i'
77: 'n'
78: 't'
79: 'r'
80: 'e'
81: 't'
82: 'u'
83: 'r'
84: 'n'
85: '>'
86: '<'
87: '<'
88: '>'
89: '<'
90: '='
91: '>'
92: '='
93: '<'
94: '>'
95: '='
96: '='
97: '&'
98: '&'
99: '|'
100: '|'
101: '+'
102: '-'
103: '*'
104: '/'
105: '('
106: ')'
107: '{'
108: '}'
109: '['
110: ']'
111: ':'
112: ';'
113: '.'
114: ','
115: '='
116: 'm'
117: 'a'
118: 'i'
119: 'n'
120: 't'
121: 'i'
122: 'c'
123: 'k'
124: 's'
125: 'e'
126: 't'
127: 'C'
128: 'o'
129: 'l'
130: 'o'
131: 'r'
132: 's'
133: 'e'
134: 't'
135: 'S'
136: 'i'
137: 'z'
138: 'e'
139: 's'
140: 'e'
141: 't'
142: 'P'
143: 'o'
144: 's'
145: 'i'
146: 't'
147: 'i'
148: 'o'
149: 'n'
150: 'm'
151: 'o'
152: 'v'
153: 'e'
154: 's'
155: 'e'
156: 't'
157: 'T'
158: 'e'
159: 'x'
160: 't'
161: 'k'
162: 'e'
163: 'y'
164: 'P'
165: 'r'
166: 'e'
167: 's'
168: 's'
169: 'e'
170: 'd'
171: 's'
172: 'e'
173: 't'
174: 'F'
175: 'o'
176: 'n'
177: 't'
178: 'S'
179: 'i'
180: 'z'
181: 'e'
182: 'l'
183: 'i'
184: 's'
185: 't'
186: 'l'
187: 'o'
188: 'a'
189: 'd'
190: 'I'
191: 'm'
192: 'a'
193: 'g'
194: 'e'
195: 'c'
196: 'h'
197: 'e'
198: 'c'
199: 'k'
200: 'C'
201: 'o'
202: 'l'
203: 'l'
204: 'i'
205: 's'
206: 'i'
207: 'o'
208: 'n'
209: 's'
210: 'e'
211: 't'
212: 'I'
213: 'm'
214: 'a'
215: 'g'
216: 'e'
217: 'p'
218: 'o'
219: 'w'
220: 's'
221: 'q'
222: 'u'
223: 'a'
224: 'r'
225: 'e'
226: 'R'
227: 'o'
228: 'o'
229: 't'
230: 'r'
231: 'e'
232: 'n'
233: 'd'
234: 'e'
235: 'r'
236: '.'
237: '"'
238: ' '
239: '"'
240: 't'
241: 'r'
242: 'u'
243: 'e'
244: 'f'
245: 'a'
246: 'l'
247: 's'
248: 'e'
249: ' '
250: '\t'
251: '\n'
252: '\r'
253: 'a'-'z'
254: 'A'-'Z'
255: '0'-'9'
256: .
*/
