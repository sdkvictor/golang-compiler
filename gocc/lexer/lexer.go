// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/sdkvictor/golang-compiler/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 134
	NumSymbols = 151
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'p'
1: 'r'
2: 'o'
3: 'g'
4: 'r'
5: 'a'
6: 'm'
7: 'i'
8: 'n'
9: 't'
10: 'f'
11: 'l'
12: 'o'
13: 'a'
14: 't'
15: 's'
16: 't'
17: 'r'
18: 'i'
19: 'n'
20: 'g'
21: 'b'
22: 'o'
23: 'o'
24: 'l'
25: 'c'
26: 'h'
27: 'a'
28: 'r'
29: 'v'
30: 'o'
31: 'i'
32: 'd'
33: 'S'
34: 'q'
35: 'u'
36: 'a'
37: 'r'
38: 'e'
39: 'C'
40: 'i'
41: 'r'
42: 'c'
43: 'l'
44: 'e'
45: 'I'
46: 'm'
47: 'a'
48: 'g'
49: 'e'
50: 'T'
51: 'e'
52: 'x'
53: 't'
54: 'B'
55: 'a'
56: 'c'
57: 'k'
58: 'g'
59: 'r'
60: 'o'
61: 'u'
62: 'n'
63: 'd'
64: 'i'
65: 'f'
66: 'e'
67: 'l'
68: 's'
69: 'e'
70: 'w'
71: 'h'
72: 'i'
73: 'l'
74: 'e'
75: 'f'
76: 'o'
77: 'r'
78: 'p'
79: 'r'
80: 'i'
81: 'n'
82: 't'
83: 'r'
84: 'e'
85: 't'
86: 'u'
87: 'r'
88: 'n'
89: '<'
90: '>'
91: '<'
92: '='
93: '>'
94: '='
95: '<'
96: '>'
97: '='
98: '='
99: '&'
100: '&'
101: '|'
102: '|'
103: '+'
104: '-'
105: '*'
106: '/'
107: '('
108: ')'
109: '{'
110: '}'
111: '['
112: ']'
113: ':'
114: ';'
115: '.'
116: ','
117: '='
118: 'l'
119: 'i'
120: 's'
121: 't'
122: '-'
123: '-'
124: '''
125: ' '
126: '''
127: '.'
128: '"'
129: ' '
130: '#'
131: '!'
132: '?'
133: '"'
134: 't'
135: 'r'
136: 'u'
137: 'e'
138: 'f'
139: 'a'
140: 'l'
141: 's'
142: 'e'
143: ' '
144: '\t'
145: '\n'
146: '\r'
147: 'a'-'z'
148: 'A'-'Z'
149: '0'-'9'
150: .
*/
