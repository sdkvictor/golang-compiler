// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/sdkvictor/golang-compiler/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 125
	NumSymbols = 142
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'p'
1: 'r'
2: 'o'
3: 'g'
4: 'r'
5: 'a'
6: 'm'
7: 'i'
8: 'n'
9: 't'
10: 'f'
11: 'l'
12: 'o'
13: 'a'
14: 't'
15: 's'
16: 't'
17: 'r'
18: 'i'
19: 'n'
20: 'g'
21: 'b'
22: 'o'
23: 'o'
24: 'l'
25: 'v'
26: 'o'
27: 'i'
28: 'd'
29: 'S'
30: 'q'
31: 'u'
32: 'a'
33: 'r'
34: 'e'
35: 'C'
36: 'i'
37: 'r'
38: 'c'
39: 'l'
40: 'e'
41: 'I'
42: 'm'
43: 'a'
44: 'g'
45: 'e'
46: 'T'
47: 'e'
48: 'x'
49: 't'
50: 'B'
51: 'a'
52: 'c'
53: 'k'
54: 'g'
55: 'r'
56: 'o'
57: 'u'
58: 'n'
59: 'd'
60: 'i'
61: 'f'
62: 'e'
63: 'l'
64: 's'
65: 'e'
66: 'w'
67: 'h'
68: 'i'
69: 'l'
70: 'e'
71: 'f'
72: 'o'
73: 'r'
74: 'p'
75: 'r'
76: 'i'
77: 'n'
78: 't'
79: 'r'
80: 'e'
81: 't'
82: 'u'
83: 'r'
84: 'n'
85: '<'
86: '>'
87: '<'
88: '='
89: '>'
90: '='
91: '<'
92: '>'
93: '='
94: '='
95: '&'
96: '&'
97: '|'
98: '|'
99: '+'
100: '-'
101: '*'
102: '/'
103: '('
104: ')'
105: '{'
106: '}'
107: '['
108: ']'
109: ':'
110: ';'
111: '.'
112: ','
113: '='
114: 'l'
115: 'i'
116: 's'
117: 't'
118: '.'
119: '"'
120: ' '
121: '#'
122: '!'
123: '?'
124: '"'
125: 't'
126: 'r'
127: 'u'
128: 'e'
129: 'f'
130: 'a'
131: 'l'
132: 's'
133: 'e'
134: ' '
135: '\t'
136: '\n'
137: '\r'
138: 'a'-'z'
139: 'A'-'Z'
140: '0'-'9'
141: .
*/
